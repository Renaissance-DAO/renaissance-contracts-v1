{
  "address": "0xcC78E0c77A8041Dd224dfb0A867ED2B00b9C5441",
  "abi": [
    {
      "inputs": [],
      "name": "AuctionEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionNotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EligibilityAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsMaxFlashLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashLoanNotRepaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IneligibleNFTs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAuctionLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFlashLoanReturnValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTAlreadyInCollection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCurator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotNFTOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RandomRedeemDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RandomSwapDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameCurator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetRedeemDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetSwapDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyNFTs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroTransferAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "AuctionLengthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AuctionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AuctionWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "BidMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCurator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCurator",
          "type": "address"
        }
      ],
      "name": "CuratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "moduleIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "eligibilityAddr",
          "type": "address"
        }
      ],
      "name": "EligibilityDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "redeemedIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enableMint",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enableRandomRedeem",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enableTargetRedeem",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enableRandomSwap",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enableTargetSwap",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enableBid",
          "type": "bool"
        }
      ],
      "name": "VaultFeaturesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "is1155",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowAllItems",
          "type": "bool"
        }
      ],
      "name": "VaultInit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numItems",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "VaultShutdown",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_curator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_is1155",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_allowAllItems",
          "type": "bool"
        }
      ],
      "name": "__FNFTCollection_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allHoldings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "allValidNFTs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowAllItems",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "livePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "enum IFNFTCollection.AuctionState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winning",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "deployEligibilityStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableVaultFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityStorage",
      "outputs": [
        {
          "internalType": "contract IEligibility",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRandomRedeem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRandomSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableTargetRedeem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableTargetSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IFNFTCollectionFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC3156FlashBorrowerUpgradeable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IFNFTCollection.AuctionState",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDepositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "is1155",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "holdingsIndex",
          "type": "uint256"
        }
      ],
      "name": "nftIdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quantity1155",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "redeemTo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "retrieveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionLength",
          "type": "uint256"
        }
      ],
      "name": "setAuctionLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_curator",
          "type": "address"
        }
      ],
      "name": "setCurator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_randomRedeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetRedeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_randomSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enableMint",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enableRandomRedeem",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enableTargetRedeem",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enableRandomSwap",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enableTargetSwap",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enableBid",
          "type": "bool"
        }
      ],
      "name": "setVaultFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "setVaultMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "startAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapTo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHoldings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d1cbe9adf443aaaab554d475d3afc102bc46a2f20788d1d223b1a0e907f9a29",
  "receipt": {
    "to": null,
    "from": "0xB249c8Bbb7D1e8833c3cd9dd9Ebe6aCE798a9D8C",
    "contractAddress": "0xcC78E0c77A8041Dd224dfb0A867ED2B00b9C5441",
    "transactionIndex": 0,
    "gasUsed": "4646280",
    "logsBloom": "0x
    "blockHash": "0x34a3fc4a6668590795be1c734fd96a188064ee0955222f0ba71723a360c5f867",
    "transactionHash": "0x4d1cbe9adf443aaaab554d475d3afc102bc46a2f20788d1d223b1a0e907f9a29",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31738999,
        "transactionHash": "0x4d1cbe9adf443aaaab554d475d3afc102bc46a2f20788d1d223b1a0e907f9a29",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b249c8bbb7d1e8833c3cd9dd9ebe6ace798a9d8c",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000080f5cdf4eb1f0d18000000000000000000000000000000000000000000000001067790148ff9e15000000000000000000000000000000000000000000000113a7a8273cd6e06a0210000000000000000000000000000000000000000000000008581c21fa4dad43800000000000000000000000000000000000000000000113afb7841c25925ad39",
        "logIndex": 0,
        "blockHash": "0x34a3fc4a6668590795be1c734fd96a188064ee0955222f0ba71723a360c5f867"
      }
    ],
    "blockNumber": 31738999,
    "cumulativeGasUsed": "4646280",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf0ff9e6b7fc2e915dfac7a0da096a36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AuctionEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EligibilityAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxFlashLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoanNotRepaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IneligibleNFTs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuctionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFlashLoanReturnValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTAlreadyInCollection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCurator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNFTOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomRedeemDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomSwapDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameCurator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetRedeemDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetSwapDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyNFTs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTransferAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"AuctionLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AuctionWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BidMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCurator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCurator\",\"type\":\"address\"}],\"name\":\"CuratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eligibilityAddr\",\"type\":\"address\"}],\"name\":\"EligibilityDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"redeemedIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enableMint\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enableRandomRedeem\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enableTargetRedeem\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enableRandomSwap\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enableTargetSwap\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enableBid\",\"type\":\"bool\"}],\"name\":\"VaultFeaturesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"is1155\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowAllItems\",\"type\":\"bool\"}],\"name\":\"VaultInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numItems\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"VaultShutdown\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is1155\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowAllItems\",\"type\":\"bool\"}],\"name\":\"__FNFTCollection_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allHoldings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"allValidNFTs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAllItems\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"livePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"enum IFNFTCollection.AuctionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winning\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"deployEligibilityStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableVaultFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityStorage\",\"outputs\":[{\"internalType\":\"contract IEligibility\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRandomRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRandomSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTargetRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTargetSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFNFTCollectionFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrowerUpgradeable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IFNFTCollection.AuctionState\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"holdingsIndex\",\"type\":\"uint256\"}],\"name\":\"nftIdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quantity1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"redeemTo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionLength\",\"type\":\"uint256\"}],\"name\":\"setAuctionLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"}],\"name\":\"setCurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randomRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randomSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableRandomRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableTargetRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableRandomSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableTargetSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableBid\",\"type\":\"bool\"}],\"name\":\"setVaultFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setVaultMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapTo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"maxFlashLoan(address)\":{\"details\":\"Returns the maximum amount of tokens available for loan.\",\"params\":{\"token\":\"The address of the token that is requested.\"},\"returns\":{\"_0\":\"The amont of token that can be loaned.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAuctionLength(uint256)\":{\"params\":{\"_auctionLength\":\"the new base price\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AuctionStarted(address,uint256,uint256)\":{\"notice\":\"An event emitted when an auction starts\"},\"AuctionWon(address,uint256,uint256)\":{\"notice\":\"An event emitted when an auction is won\"},\"BidMade(address,uint256,uint256)\":{\"notice\":\"An event emitted when a bid is made\"}},\"kind\":\"user\",\"methods\":{\"auctionLength()\":{\"notice\":\"the length of auctions\"},\"depositors(uint256)\":{\"notice\":\"only used for ERC-721 tokens\"},\"setAuctionLength(uint256)\":{\"notice\":\"allow curator to update the auction length\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/FNFTCollection.sol\":\"FNFTCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xe26a9d6acdb88e0b83c7659f9c809847da6996528dc8a4e6f0ed14e395dd1657\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrowerUpgradeable {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x51e5fea61116bd84d45c4bbb0d7923ab0ab182e923b0187667f146327d6ef496\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashLenderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrowerUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLenderUpgradeable {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa31d534e79c2275bdef26559e5c03ff1d45fee94d0007130e67ee9273263b973\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1976ce0aadaa551a0fecab9930a7f4956252fa40594c8d165f682020f0e826c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"src/contracts/FNFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"./interfaces/IEligibility.sol\\\";\\nimport \\\"./interfaces/IEligibilityManager.sol\\\";\\nimport \\\"./interfaces/IFeeDistributor.sol\\\";\\nimport \\\"./interfaces/IFNFTCollection.sol\\\";\\nimport \\\"./interfaces/IFNFTCollectionFactory.sol\\\";\\nimport \\\"./interfaces/IPausable.sol\\\";\\nimport \\\"./interfaces/IVaultManager.sol\\\";\\nimport \\\"./token/ERC20FlashMintUpgradeable.sol\\\";\\n\\n// Authors: @0xKiwi_ and @alexgausman.\\n\\ncontract FNFTCollection is\\n    IFNFTCollection,\\n    OwnableUpgradeable,\\n    IERC165,\\n    ERC20FlashMintUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC721HolderUpgradeable,\\n    ERC1155HolderUpgradeable\\n{\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    uint256 public constant BASE = 10**18;\\n\\n    mapping(uint256 => uint256) public override quantity1155;\\n    EnumerableSetUpgradeable.UintSet internal holdings;\\n\\n    IEligibility public override eligibilityStorage;\\n    IFNFTCollectionFactory public override factory;\\n    IVaultManager public override vaultManager;\\n    address public override curator;\\n\\n    uint256 public override vaultId;\\n    uint256 private randNonce;\\n\\n    /// @notice the length of auctions\\n    uint256 public override auctionLength;\\n\\n    address public override assetAddress;\\n    bool public override is1155;\\n    bool public override allowAllItems;\\n    bool public override enableMint;\\n    bool public override enableRandomRedeem;\\n    bool public override enableTargetRedeem;\\n    bool public override enableRandomSwap;\\n    bool public override enableTargetSwap;\\n    bool public override enableBid;\\n\\n    /// @notice only used for ERC-721 tokens\\n    mapping (uint256 => address) public depositors;\\n    mapping (uint256 => Auction) public auctions;\\n\\n    function __FNFTCollection_init(\\n        string memory _name,\\n        string memory _symbol,\\n        address _curator,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external override virtual initializer {\\n        __Ownable_init();\\n        __ERC20_init(_name, _symbol);\\n        if (_assetAddress == address(0)) revert ZeroAddress();\\n        setVaultFeatures(true /*enableMint*/, true /*enableRandomRedeem*/, true /*enableTargetRedeem*/, true /*enableRandomSwap*/, true /*enableTargetSwap*/, false /*enableBid*/);\\n        IFNFTCollectionFactory _factory = IFNFTCollectionFactory(msg.sender);\\n        vaultManager = IVaultManager(_factory.vaultManager());\\n        assetAddress = _assetAddress;\\n        curator = _curator;\\n        factory = _factory;\\n        vaultId = vaultManager.numVaults();\\n        is1155 = _is1155;\\n        allowAllItems = _allowAllItems;\\n        auctionLength = 3 days;\\n        emit VaultInit(vaultId, _assetAddress, _is1155, _allowAllItems);\\n    }\\n\\n    function allHoldings() external view override virtual returns (uint256[] memory) {\\n        uint256 len = holdings.length();\\n        uint256[] memory idArray = new uint256[](len);\\n        for (uint256 i; i < len;) {\\n            idArray[i] = holdings.at(i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return idArray;\\n    }\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external override virtual returns (address) {\\n        _onlyPrivileged();\\n        if (address(eligibilityStorage) != address(0)) revert EligibilityAlreadySet();\\n        IEligibilityManager eligManager = IEligibilityManager(\\n            factory.eligibilityManager()\\n        );\\n        address _eligibility = eligManager.deployEligibility(\\n            moduleIndex,\\n            initData\\n        );\\n        eligibilityStorage = IEligibility(_eligibility);\\n        // Toggle this to let the contract know to check eligibility now.\\n        allowAllItems = false;\\n        emit EligibilityDeployed(moduleIndex, _eligibility);\\n        return _eligibility;\\n    }\\n\\n    function finalizeVault() external override virtual {\\n        setCurator(address(0));\\n    }\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external override virtual returns (uint256) {\\n        return mintTo(tokenIds, amounts, msg.sender);\\n    }\\n\\n    function nftIdAt(uint256 holdingsIndex) external view override virtual returns (uint256) {\\n        return holdings.at(holdingsIndex);\\n    }\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        override\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        return redeemTo(amount, specificIds, msg.sender);\\n    }\\n\\n    function withdraw(uint256[] calldata tokenIds) external override virtual returns (uint256[] memory) {\\n        _onlyOwnerIfPaused(2);\\n        if (!enableBid) revert BidDisabled();\\n\\n        uint256 amount = tokenIds.length;\\n\\n        for (uint256 i; i < amount;) {\\n            uint256 tokenId = tokenIds[i];\\n            if (depositors[tokenId] != msg.sender) revert NotNFTOwner();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // We burn all from sender and mint to fee receiver to reduce costs.\\n        _burn(msg.sender, BASE * amount);\\n\\n        // Pay the tokens + toll.\\n        (,, uint256 _targetRedeemFee,,) = vaultFees();\\n        uint256 totalFee = _targetRedeemFee * amount;\\n        _chargeAndDistributeFees(msg.sender, totalFee);\\n\\n        // Withdraw from vault.\\n        uint256[] memory redeemedIds = _withdrawNFTsTo(amount, tokenIds, msg.sender);\\n        emit Redeemed(redeemedIds, tokenIds, msg.sender);\\n        return redeemedIds;\\n    }\\n\\n    function setVaultMetadata(\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external override virtual {\\n        _onlyPrivileged();\\n        _setMetadata(name_, symbol_);\\n    }\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external override virtual returns (uint256[] memory) {\\n        return swapTo(tokenIds, amounts, specificIds, msg.sender);\\n    }\\n\\n    function totalHoldings() external view override virtual returns (uint256) {\\n        return holdings.length();\\n    }\\n\\n    function version() external pure override returns (string memory) {\\n        return \\\"v1.0.0\\\";\\n    }\\n\\n    function allValidNFTs(uint256[] memory tokenIds)\\n        public\\n        view\\n        override\\n        virtual\\n        returns (bool)\\n    {\\n        if (allowAllItems) {\\n            return true;\\n        }\\n\\n        IEligibility _eligibilityStorage = eligibilityStorage;\\n        if (address(_eligibilityStorage) == address(0)) {\\n            return false;\\n        }\\n        return _eligibilityStorage.checkAllEligible(tokenIds);\\n    }\\n\\n    function retrieveTokens(uint256 amount, address from, address to) public onlyOwner {\\n        _burn(from, amount);\\n        _mint(to, amount);\\n    }\\n\\n    function disableVaultFees() public override virtual {\\n        _onlyPrivileged();\\n        factory.disableVaultFees(vaultId);\\n    }\\n\\n    function flashFee(address borrowedToken, uint256 amount) public view override (\\n        IERC3156FlashLenderUpgradeable,\\n        IFNFTCollection\\n    ) returns (uint256) {\\n        if (borrowedToken != address(this)) revert InvalidToken();\\n        return factory.flashLoanFee() * amount / 10000;\\n    }\\n\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address borrowedToken,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual override (\\n        IERC3156FlashLenderUpgradeable,\\n        IFNFTCollection\\n    ) returns (bool) {\\n        _onlyOwnerIfPaused(5);\\n\\n        uint256 flashLoanFee = vaultManager.excludedFromFees(address(receiver)) ? 0 : flashFee(borrowedToken, amount);\\n        return _flashLoan(receiver, borrowedToken, amount, flashLoanFee, data);\\n    }\\n\\n    function mintFee() public view override virtual returns (uint256) {\\n        (uint256 _mintFee, , , ,) = factory.vaultFees(vaultId);\\n        return _mintFee;\\n    }\\n\\n    function mintTo(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) public override virtual nonReentrant returns (uint256) {\\n        _onlyOwnerIfPaused(1);\\n        if (!enableMint) revert MintDisabled();\\n        // Take the NFTs.\\n        uint256 count = _receiveNFTs(tokenIds, amounts);\\n\\n        // Mint to the user.\\n        _mint(to, BASE * count);\\n        uint256 totalFee = mintFee() * count;\\n        _chargeAndDistributeFees(to, totalFee);\\n\\n        emit Minted(tokenIds, amounts, to);\\n        return count;\\n    }\\n\\n    function randomRedeemFee() public view override virtual returns (uint256) {\\n        (, uint256 _randomRedeemFee, , ,) = factory.vaultFees(vaultId);\\n        return _randomRedeemFee;\\n    }\\n\\n    function randomSwapFee() public view override virtual returns (uint256) {\\n        (, , , uint256 _randomSwapFee, ) = factory.vaultFees(vaultId);\\n        return _randomSwapFee;\\n    }\\n\\n    function redeemTo(uint256 amount, uint256[] memory specificIds, address to)\\n        public\\n        override\\n        virtual\\n        nonReentrant\\n        returns (uint256[] memory)\\n    {\\n        _onlyOwnerIfPaused(2);\\n        if (enableBid) revert BidEnabled();\\n        if (amount != specificIds.length && !enableRandomRedeem) revert RandomRedeemDisabled();\\n        if (specificIds.length != 0 && !enableTargetRedeem) revert TargetRedeemDisabled();\\n\\n        // We burn all from sender and mint to fee receiver to reduce costs.\\n        _burn(msg.sender, BASE * amount);\\n\\n        // Pay the tokens + toll.\\n        (, uint256 _randomRedeemFee, uint256 _targetRedeemFee, ,) = vaultFees();\\n        uint256 totalFee = (_targetRedeemFee * specificIds.length) + (\\n            _randomRedeemFee * (amount - specificIds.length)\\n        );\\n        _chargeAndDistributeFees(msg.sender, totalFee);\\n\\n        // Withdraw from vault.\\n        uint256[] memory redeemedIds = _withdrawNFTsTo(amount, specificIds, to);\\n        emit Redeemed(redeemedIds, specificIds, to);\\n        return redeemedIds;\\n    }\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) public override virtual {\\n        _onlyPrivileged();\\n        factory.setVaultFees(vaultId, _mintFee, _randomRedeemFee, _targetRedeemFee, _randomSwapFee, _targetSwapFee);\\n    }\\n\\n    // The curator has control over options like fees and features\\n    function setCurator(address _curator) public override virtual {\\n        _onlyPrivileged();\\n        if (curator == _curator) revert SameCurator();\\n        emit CuratorUpdated(curator, _curator);\\n        curator = _curator;\\n    }\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap,\\n        bool _enableBid\\n    ) public override virtual {\\n        _onlyPrivileged();\\n        enableMint = _enableMint;\\n        enableRandomRedeem = _enableRandomRedeem;\\n        enableTargetRedeem = _enableTargetRedeem;\\n        enableRandomSwap = _enableRandomSwap;\\n        enableTargetSwap = _enableTargetSwap;\\n        enableBid = _enableBid;\\n\\n        emit VaultFeaturesUpdated(\\n            _enableMint,\\n            _enableRandomRedeem,\\n            _enableTargetRedeem,\\n            _enableRandomSwap,\\n            _enableTargetSwap,\\n            _enableBid\\n        );\\n    }\\n\\n    /// @notice allow curator to update the auction length\\n    /// @param _auctionLength the new base price\\n    function setAuctionLength(uint256 _auctionLength) external override {\\n        _onlyPrivileged();\\n        if (\\n            _auctionLength < factory.minAuctionLength() || _auctionLength > factory.maxAuctionLength()\\n        ) revert InvalidAuctionLength();\\n\\n        auctionLength = _auctionLength;\\n        emit AuctionLengthUpdated(_auctionLength);\\n    }\\n\\n    function shutdown(address recipient) public override onlyOwner {\\n        uint256 numItems = totalSupply() / BASE;\\n        if (numItems >= 4) revert TooManyNFTs();\\n        uint256[] memory specificIds = new uint256[](0);\\n        _withdrawNFTsTo(numItems, specificIds, recipient);\\n        emit VaultShutdown(assetAddress, numItems, recipient);\\n        assetAddress = address(0);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC1155ReceiverUpgradeable, IERC165) returns (bool) {\\n        return interfaceId == type(IFNFTCollection).interfaceId ||\\n                interfaceId == type(IERC165).interfaceId ||\\n                super.supportsInterface(interfaceId);\\n    }\\n\\n    function swapTo(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts, /* ignored for ERC721 vaults */\\n        uint256[] memory specificIds,\\n        address to\\n    ) public override virtual nonReentrant returns (uint256[] memory) {\\n        _onlyOwnerIfPaused(3);\\n        if (enableBid) revert BidEnabled();\\n\\n        uint256 count;\\n        if (is1155) {\\n            for (uint256 i; i < tokenIds.length;) {\\n                uint256 amount = amounts[i];\\n                if (amount == 0) revert ZeroTransferAmount();\\n                count += amount;\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            count = tokenIds.length;\\n        }\\n\\n        if (count != specificIds.length && !enableRandomSwap) revert RandomSwapDisabled();\\n        if (specificIds.length != 0 && !enableTargetSwap) revert TargetSwapDisabled();\\n\\n        (, , ,uint256 _randomSwapFee, uint256 _targetSwapFee) = vaultFees();\\n        uint256 totalFee = (_targetSwapFee * specificIds.length) + (\\n            _randomSwapFee * (count - specificIds.length)\\n        );\\n        _chargeAndDistributeFees(msg.sender, totalFee);\\n\\n        // Give the NFTs first, so the user wont get the same thing back, just to be nice.\\n        uint256[] memory ids = _withdrawNFTsTo(count, specificIds, to);\\n\\n        _receiveNFTs(tokenIds, amounts);\\n\\n        emit Swapped(tokenIds, amounts, specificIds, ids, to);\\n        return ids;\\n    }\\n\\n    function startAuction(uint256 tokenId, uint256 price) external override {\\n        _onlyOwnerIfPaused(4);\\n        if (!enableBid || is1155) revert BidDisabled();\\n        if (auctions[tokenId].state != AuctionState.Inactive) revert AuctionLive();\\n        if (price < BASE) revert BidTooLow();\\n\\n        _burn(msg.sender, price);\\n\\n        auctions[tokenId] = Auction({\\n            livePrice: price,\\n            end: block.timestamp + auctionLength,\\n            state: AuctionState.Live,\\n            winning: msg.sender\\n        });\\n\\n        emit AuctionStarted(msg.sender, tokenId, price);\\n    }\\n\\n    function bid(uint256 tokenId, uint256 price) external override {\\n        _onlyOwnerIfPaused(4);\\n        if (!enableBid || is1155) revert BidDisabled();\\n        if (auctions[tokenId].state != AuctionState.Live) revert AuctionNotLive();\\n        uint256 livePrice = auctions[tokenId].livePrice;\\n        uint256 increase = factory.minBidIncrease() + 10000;\\n        if (price * 10000 < livePrice * increase) revert BidTooLow();\\n\\n        uint256 auctionEnd = auctions[tokenId].end;\\n        if (block.timestamp >= auctionEnd) revert AuctionEnded();\\n\\n        _burn(msg.sender, price);\\n        _mint(auctions[tokenId].winning, livePrice);\\n\\n        auctions[tokenId].livePrice = price;\\n        auctions[tokenId].winning = msg.sender;\\n\\n        if (auctionEnd - block.timestamp <= 15 minutes) {\\n            auctions[tokenId].end += 15 minutes;\\n        }\\n\\n        emit BidMade(msg.sender, tokenId, price);\\n    }\\n\\n    function endAuction(uint256 tokenId) external override {\\n        _onlyOwnerIfPaused(4);\\n        if (!enableBid || is1155) revert BidDisabled();\\n        if (auctions[tokenId].state != AuctionState.Live) revert AuctionNotLive();\\n        if (block.timestamp < auctions[tokenId].end) revert AuctionNotEnded();\\n\\n        address winner = auctions[tokenId].winning;\\n        uint256 price = auctions[tokenId].livePrice;\\n\\n        auctions[tokenId].livePrice = 0;\\n        auctions[tokenId].end = 0;\\n        auctions[tokenId].state = AuctionState.Inactive;\\n        auctions[tokenId].winning = address(0);\\n\\n        uint256 premium = price - BASE;\\n        if (premium > 0) _mint(depositors[tokenId], premium);\\n\\n        uint256[] memory withdrawTokenIds = new uint256[](1);\\n        withdrawTokenIds[0] = tokenId;\\n        _withdrawNFTsTo(1, withdrawTokenIds, winner);\\n\\n        emit AuctionWon(winner, tokenId, price);\\n    }\\n\\n    function getAuction(uint256 tokenId) external view override returns (uint256, uint256, AuctionState, address) {\\n        AuctionState state = auctions[tokenId].state;\\n        if (state == AuctionState.Inactive) revert AuctionNotLive();\\n\\n        return (\\n            auctions[tokenId].livePrice,\\n            auctions[tokenId].end,\\n            state,\\n            auctions[tokenId].winning\\n        );\\n    }\\n\\n    function getDepositor(uint256 tokenId) external view override returns (address depositor) {\\n        depositor = depositors[tokenId];\\n        if (depositor == address(0)) revert NotInVault();\\n    }\\n\\n    function targetRedeemFee() public view override virtual returns (uint256) {\\n        (, , uint256 _targetRedeemFee, ,) = factory.vaultFees(vaultId);\\n        return _targetRedeemFee;\\n    }\\n\\n    function targetSwapFee() public view override virtual returns (uint256) {\\n        (, , , ,uint256 _targetSwapFee) = factory.vaultFees(vaultId);\\n        return _targetSwapFee;\\n    }\\n\\n    function vaultFees() public view override virtual returns (uint256, uint256, uint256, uint256, uint256) {\\n        return factory.vaultFees(vaultId);\\n    }\\n\\n    // We set a hook to the eligibility module (if it exists) after redeems in case anything needs to be modified.\\n    function _afterRedeemHook(uint256[] memory tokenIds) internal virtual {\\n        IEligibility _eligibilityStorage = eligibilityStorage;\\n        if (address(_eligibilityStorage) == address(0)) {\\n            return;\\n        }\\n        _eligibilityStorage.afterRedeemHook(tokenIds);\\n    }\\n\\n    function _chargeAndDistributeFees(address user, uint256 amount) internal override virtual {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        IVaultManager _vaultManager = vaultManager;\\n\\n        if (_vaultManager.excludedFromFees(msg.sender)) {\\n            return;\\n        }\\n\\n        // Mint fees directly to the distributor and distribute.\\n        address feeDistributor = _vaultManager.feeDistributor();\\n        // Changed to a _transfer() in v1.0.3.\\n        super._transfer(user, feeDistributor, amount);\\n        IFeeDistributor(feeDistributor).distribute(vaultId);\\n    }\\n\\n    function _getRandomTokenIdFromVault() internal virtual returns (uint256) {\\n        uint256 randomIndex = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    blockhash(block.number - 1),\\n                    randNonce,\\n                    block.coinbase,\\n                    block.difficulty,\\n                    block.timestamp\\n                )\\n            )\\n        ) % holdings.length();\\n        ++randNonce;\\n        return holdings.at(randomIndex);\\n    }\\n\\n    function _receiveNFTs(uint256[] memory tokenIds, uint256[] memory amounts)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        if (!allValidNFTs(tokenIds)) revert IneligibleNFTs();\\n        uint256 length = tokenIds.length;\\n        if (is1155) {\\n            // This is technically a check, so placing it before the effect.\\n            IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\\n                msg.sender,\\n                address(this),\\n                tokenIds,\\n                amounts,\\n                \\\"\\\"\\n            );\\n\\n            uint256 count;\\n            for (uint256 i; i < length;) {\\n                uint256 tokenId = tokenIds[i];\\n                uint256 amount = amounts[i];\\n                if (amount == 0) revert ZeroTransferAmount();\\n                if (quantity1155[tokenId] == 0) {\\n                    holdings.add(tokenId);\\n                }\\n                quantity1155[tokenId] += amount;\\n                count += amount;\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            return count;\\n        } else {\\n            address _assetAddress = assetAddress;\\n            for (uint256 i; i < length;) {\\n                uint256 tokenId = tokenIds[i];\\n                // We may already own the NFT here so we check in order:\\n                // Does the vault own it?\\n                //   - If so, check if its in holdings list\\n                //      - If so, we reject. This means the NFT has already been claimed for.\\n                //      - If not, it means we have not yet accounted for this NFT, so we continue.\\n                //   -If not, we \\\"pull\\\" it from the msg.sender and add to holdings.\\n                _transferFromERC721(_assetAddress, tokenId);\\n                depositors[tokenId] = msg.sender;\\n                holdings.add(tokenId);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            return length;\\n        }\\n    }\\n\\n    function _onlyOwnerIfPaused(uint256 lockId) internal view {\\n        if (msg.sender != owner() && IPausable(address(factory)).isPaused(lockId)) revert Paused();\\n    }\\n\\n\\n    function _onlyPrivileged() internal view {\\n        if (curator == address(0)) {\\n            if (msg.sender != owner()) revert NotOwner();\\n        } else {\\n            if (msg.sender != curator) revert NotCurator();\\n        }\\n    }\\n\\n    function _transferERC721(address assetAddr, address to, uint256 tokenId) internal virtual {\\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n        bytes memory data;\\n        if (assetAddr == kitties) {\\n            // Changed in v1.0.4.\\n            data = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, tokenId);\\n        } else if (assetAddr == punks) {\\n            // CryptoPunks.\\n            data = abi.encodeWithSignature(\\\"transferPunk(address,uint256)\\\", to, tokenId);\\n        } else {\\n            // Default.\\n            data = abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256)\\\", address(this), to, tokenId);\\n        }\\n        (bool success, bytes memory returnData) = address(assetAddr).call(data);\\n        require(success, string(returnData));\\n    }\\n\\n    function _transferFromERC721(address assetAddr, uint256 tokenId) internal virtual {\\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n        bytes memory data;\\n        if (assetAddr == kitties) {\\n            // Cryptokitties.\\n            data = abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", msg.sender, address(this), tokenId);\\n        } else if (assetAddr == punks) {\\n            // CryptoPunks.\\n            // Fix here for frontrun attack. Added in v1.0.2.\\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\\\"punkIndexToAddress(uint256)\\\", tokenId);\\n            (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\\n            (address nftOwner) = abi.decode(result, (address));\\n            if (!checkSuccess || nftOwner != msg.sender) revert NotNFTOwner();\\n            data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenId);\\n        } else {\\n            // Default.\\n            // Allow other contracts to \\\"push\\\" into the vault, safely.\\n            // If we already have the token requested, make sure we don't have it in the list to prevent duplicate minting.\\n            if (IERC721Upgradeable(assetAddress).ownerOf(tokenId) == address(this)) {\\n                if (holdings.contains(tokenId)) revert NFTAlreadyInCollection();\\n                return;\\n            } else {\\n                data = abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256)\\\", msg.sender, address(this), tokenId);\\n            }\\n        }\\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n        require(success, string(resultData));\\n    }\\n\\n    function _withdrawNFTsTo(\\n        uint256 amount,\\n        uint256[] memory specificIds,\\n        address to\\n    ) internal virtual returns (uint256[] memory) {\\n        bool _is1155 = is1155;\\n        address _assetAddress = assetAddress;\\n        uint256[] memory redeemedIds = new uint256[](amount);\\n        uint256 specificLength = specificIds.length;\\n        for (uint256 i; i < amount;) {\\n            // This will always be fine considering the validations made above.\\n            uint256 tokenId = i < specificLength ?\\n                specificIds[i] : _getRandomTokenIdFromVault();\\n            redeemedIds[i] = tokenId;\\n\\n            if (_is1155) {\\n                quantity1155[tokenId] -= 1;\\n                if (quantity1155[tokenId] == 0) {\\n                    holdings.remove(tokenId);\\n                }\\n\\n                IERC1155Upgradeable(_assetAddress).safeTransferFrom(\\n                    address(this),\\n                    to,\\n                    tokenId,\\n                    1,\\n                    \\\"\\\"\\n                );\\n            } else {\\n                holdings.remove(tokenId);\\n                delete depositors[tokenId];\\n                _transferERC721(_assetAddress, to, tokenId);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        _afterRedeemHook(redeemedIds);\\n        return redeemedIds;\\n    }\\n}\",\"keccak256\":\"0xdd834b4451f8b50b64281909619d35b892d5627fa5ded469f98f3d972e64b975\",\"license\":\"MIT\"},\"src/contracts/interfaces/IEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __Eligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2eeb6bdbe34301a2267cdda92a10c82b242406818873bcac89b691b2178689e7\",\"license\":\"MIT\"},\"src/contracts/interfaces/IEligibilityManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IEligibilityManager {\\n    struct EligibilityModule {\\n        address implementation;\\n        address targetAsset;\\n        string name;\\n    }\\n\\n    function modules(uint256) external view returns(address, address, string memory);\\n\\n    function __EligibilityManager_init() external;\\n\\n    function addModule(address implementation) external;\\n\\n    function updateModule(uint256 moduleIndex, address implementation) external;\\n\\n    function deployEligibility(uint256 vaultId, bytes calldata initData) external returns (address);\\n\\n    function allModules() external view returns (EligibilityModule[] memory);\\n\\n    function allModuleNames() external view returns (string[] memory);\\n\\n    event ModuleAdded(\\n        address implementation,\\n        address targetAsset,\\n        string name,\\n        bool finalizedOnDeploy\\n    );\\n    event ModuleUpdated(\\n        address implementation,\\n        string name,\\n        bool finalizedOnDeploy\\n    );\\n\\n    error NoImplementation();\\n    error OutOfBounds();\\n}\\n\",\"keccak256\":\"0x5fb6c7b75ee7dfe67170a9f475ef7e8b38701f86620ce755145581eebf7090da\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\\\";\\n\\nimport \\\"./IEligibility.sol\\\";\\nimport \\\"./IFNFTCollectionFactory.sol\\\";\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"../token/ERC20Upgradeable.sol\\\";\\n\\ninterface IFNFTCollection is IERC20Upgradeable {\\n    enum AuctionState { Inactive, Live, Ended }\\n\\n    struct Auction {\\n        uint256 livePrice;\\n        uint256 end;\\n        AuctionState state;\\n        address winning;\\n    }\\n\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function curator() external view returns (address);\\n\\n    function assetAddress() external view returns (address);\\n\\n    function factory() external view returns (IFNFTCollectionFactory);\\n\\n    function eligibilityStorage() external view returns (IEligibility);\\n\\n    function is1155() external view returns (bool);\\n\\n    function allowAllItems() external view returns (bool);\\n\\n    function enableMint() external view returns (bool);\\n\\n    function enableRandomRedeem() external view returns (bool);\\n\\n    function enableTargetRedeem() external view returns (bool);\\n\\n    function enableRandomSwap() external view returns (bool);\\n\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function enableBid() external view returns (bool);\\n\\n    function auctionLength() external view returns (uint256);\\n\\n    function quantity1155(uint256) external view returns (uint256);\\n\\n    function vaultId() external view returns (uint256);\\n\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n\\n    function allHoldings() external view returns (uint256[] memory);\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function randomRedeemFee() external view returns (uint256);\\n\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    function randomSwapFee() external view returns (uint256);\\n\\n    function targetSwapFee() external view returns (uint256);\\n\\n    function vaultFees() external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function shutdown(address recipient) external;\\n\\n    function version() external returns (string memory);\\n\\n    function __FNFTCollection_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _curator,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap,\\n        bool _enableBid\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n\\n    function setAuctionLength(uint256 _auctionLength) external;\\n\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The curator has control over options like fees and features\\n    function setCurator(address _curator) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n    function withdraw(uint256[] calldata tokenIds) external returns (uint256[] memory);\\n\\n    function startAuction(uint256 tokenId, uint256 price) external;\\n    function bid(uint256 tokenId, uint256 price) external;\\n    function endAuction(uint256 tokenId) external;\\n\\n    function flashFee(address borrowedToken, uint256 amount) external view returns (uint256);\\n\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address borrowedToken,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function allValidNFTs(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAuction(uint256 tokenId) external view returns (uint256, uint256, AuctionState, address);\\n    function getDepositor(uint256 tokenId) external view returns (address);\\n\\n    // /// @notice An event emitted when someone redeems all tokens for the NFT\\n    // event TokenRedeemed(address indexed redeemer);\\n\\n    event AuctionLengthUpdated(uint256 length);\\n    /// @notice An event emitted when an auction starts\\n    event AuctionStarted(address indexed buyer, uint256 tokenId, uint256 price);\\n    /// @notice An event emitted when an auction is won\\n    event AuctionWon(address indexed buyer, uint256 tokenId, uint256 price);\\n    /// @notice An event emitted when a bid is made\\n    event BidMade(address indexed buyer, uint256 tokenId, uint256 price);\\n    event CuratorUpdated(address oldCurator, address newCurator);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        address to\\n    );\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n    event VaultFeaturesUpdated(\\n      bool enableMint,\\n      bool enableRandomRedeem,\\n      bool enableTargetRedeem,\\n      bool enableRandomSwap,\\n      bool enableTargetSwap,\\n      bool enableBid\\n    );\\n    event VaultShutdown(address assetAddress, uint256 numItems, address recipient);\\n\\n    error AuctionEnded();\\n    error AuctionLive();\\n    error AuctionNotEnded();\\n    error AuctionNotLive();\\n    error BidDisabled();\\n    error BidEnabled();\\n    error BidTooLow();\\n    error EligibilityAlreadySet();\\n    error FeeTooHigh();\\n    error IneligibleNFTs();\\n    error InvalidAuctionLength();\\n    error MintDisabled();\\n    error NFTAlreadyInCollection();\\n    error NotCurator();\\n    error NotNFTOwner();\\n    error NotInVault();\\n    error NotOwner();\\n    error Paused();\\n    error RandomRedeemDisabled();\\n    error RandomSwapDisabled();\\n    error TargetRedeemDisabled();\\n    error TargetSwapDisabled();\\n    error TooManyNFTs();\\n    error InvalidToken();\\n    error SameCurator();\\n    error ZeroAddress();\\n    error ZeroTransferAmount();\\n}\",\"keccak256\":\"0x73c0a4f17e8693c5a13b247941a378d2c5f7d597348a4a9dd132b000d094aa0e\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTCollectionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\nimport \\\"./IVaultManager.sol\\\";\\n\\ninterface IFNFTCollectionFactory is IBeacon {\\n  struct VaultFees {\\n      bool active;\\n      uint64 mintFee;\\n      uint64 randomRedeemFee;\\n      uint64 targetRedeemFee;\\n      uint64 randomSwapFee;\\n      uint64 targetSwapFee;\\n  }\\n\\n  // Read functions.\\n  function vaultManager() external view returns (IVaultManager);\\n\\n  function eligibilityManager() external view returns (address);\\n\\n  function factoryMintFee() external view returns (uint64);\\n\\n  function factoryRandomRedeemFee() external view returns (uint64);\\n\\n  function factoryTargetRedeemFee() external view returns (uint64);\\n\\n  function factoryRandomSwapFee() external view returns (uint64);\\n\\n  function factoryTargetSwapFee() external view returns (uint64);\\n\\n  function vaultFees(uint256 vaultId) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n  function flashLoanFee() external view returns (uint256);\\n\\n  function maxAuctionLength() external view returns (uint256);\\n\\n  function minAuctionLength() external view returns (uint256);\\n\\n  function minBidIncrease() external view returns (uint256);\\n\\n  // Write functions.\\n  function __FNFTCollectionFactory_init(address _vaultManager, address _fnftCollection) external;\\n\\n  function createVault(\\n      address _assetAddress,\\n      bool is1155,\\n      bool allowAllItems,\\n      string calldata _name,\\n      string calldata _symbol\\n  ) external returns (address);\\n\\n  function setEligibilityManager(address _eligibilityManager) external;\\n\\n  function setFactoryFees(\\n    uint256 _factoryMintFee,\\n    uint256 _factoryRandomRedeemFee,\\n    uint256 _factoryTargetRedeemFee,\\n    uint256 _factoryRandomSwapFee,\\n    uint256 _factoryTargetSwapFee,\\n    uint256 _flashLoanFee\\n  ) external;\\n\\n  function setFactoryThresholds(\\n      uint256 _maxAuctionLength,\\n      uint256 _minAuctionLength,\\n      uint256 _minBidIncrease\\n  ) external;\\n\\n  function setVaultFees(\\n      uint256 vaultId,\\n      uint256 _mintFee,\\n      uint256 _randomRedeemFee,\\n      uint256 _targetRedeemFee,\\n      uint256 _randomSwapFee,\\n      uint256 _targetSwapFee\\n  ) external;\\n\\n  function disableVaultFees(uint256 vaultId) external;\\n\\n  event FactoryThresholdsUpdated(uint256 maxAuctionLength, uint256 minAuctionLength, uint256 minBidIncrease);\\n  event EligibilityManagerUpdated(address oldEligManager, address newEligManager);\\n  event VaultCreated(uint256 indexed vaultId, address curator, address vaultAddress, address assetAddress, string name, string symbol);\\n  event VaultFeesUpdated(uint256 vaultId, uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\\n  event VaultFeesDisabled(uint256 vaultId);\\n  event FactoryFeesUpdated(uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee, uint256 flashLoanFee);\\n\\n  error NotVault();\\n  error FeeTooHigh();\\n  error MaxAuctionLengthOutOfBounds();\\n  error MinAuctionLengthOutOfBounds();\\n  error MinBidIncreaseOutOfBounds();\\n  error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x3a40606069aab5c31d4d30a52ff4d834f5e67054eebdf3b6bbdd3d8ef97e7040\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./ITimelockExcludeList.sol\\\";\\n\\n\\ninterface IFNFTStaking {\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function inventoryLockTimeErc20() external view returns (uint256);\\n\\n    function timelockExcludeList() external view returns (ITimelockExcludeList);\\n\\n    function __FNFTStaking_init(address _vaultManager) external;\\n\\n    function setTimelockExcludeList(address _timelockExcludeList) external;\\n\\n    function setInventoryLockTimeErc20(uint256 _inventoryLockTimeErc20) external;\\n\\n    function isAddressTimelockExcluded(address addr, uint256 vaultId) external returns (bool);\\n\\n    function deployXTokenForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\n\\n    function timelockMintFor(uint256 vaultId, uint256 amount, address to, uint256 timelockLength) external returns (uint256);\\n\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\n\\n    function xTokenShareValue(uint256 vaultId) external returns (uint256);\\n\\n    function timelockUntil(uint256 vaultId, address who) external returns (uint256);\\n\\n    function balanceOf(uint256 vaultId, address who) external returns (uint256);\\n\\n    function xTokenAddr(address baseToken) external returns (address);\\n\\n    function vaultXToken(uint256 vaultId) external view returns (address);\\n\\n    event StakingPoolCreated(uint256 vaultId, address xToken, address baseToken);\\n    event FeesReceived(uint256 vaultId, uint256 amount, address xToken);\\n    event BaseTokenDeposited(uint256 vaultId, uint256 baseTokenAmount, uint256 amount, uint256 timelockUntil, address sender);\\n    event XTokenWithdrawn(uint256 vaultId, uint256 baseTokenAmount, uint256 amount, address sender);\\n\\n    event InventoryLockTimeErc20Updated(uint256 oldInventoryLockTimeErc20, uint256 newInventoryLockTimeErc20);\\n    event TimelockExcludeListUpdated(address oldTimelockExcludeList, address newTimelockExcludeList);\\n\\n    error LockTooLong();\\n    error NotExcludedFromFees();\\n    error NotZapContract();\\n    error XTokenNotDeployed();\\n\\n}\",\"keccak256\":\"0xcdb51e91728e2f01a8b9090be9012d7f058c0b4875746782707a7d8d81e2706d\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./ILPStaking.sol\\\";\\nimport \\\"./IFNFTStaking.sol\\\";\\n\\ninterface IFeeDistributor {\\n\\n  struct FeeReceiver {\\n    uint256 allocPoint;\\n    address receiver;\\n    bool isContract;\\n  }\\n\\n  function distributionPaused() external returns (bool);\\n\\n  function vaultManager() external returns (IVaultManager);\\n\\n  function lpStaking() external returns (ILPStaking);\\n\\n  function fnftStaking() external returns (IFNFTStaking);\\n\\n  function treasury() external returns (address);\\n\\n  function allocTotal() external returns (uint256);\\n\\n  function feeReceivers(uint256) external returns (uint256, address, bool);\\n\\n  function __FeeDistributor_init(address _vaultManager, address _lpStaking, address _treasury) external;\\n\\n  function rescueTokens(address token) external;\\n\\n  function distribute(uint256 vaultId) external;\\n\\n  function addReceiver(uint256 _allocPoint, address _receiver, bool _isContract) external;\\n\\n  function initializeVaultReceivers(uint256 _vaultId) external;\\n\\n  function changeReceiverAlloc(uint256 _idx, uint256 _allocPoint) external;\\n\\n  function changeReceiverAddress(uint256 _idx, address _address, bool _isContract) external;\\n\\n  function removeReceiver(uint256 _receiverIdx) external;\\n\\n  function setTreasuryAddress(address _treasury) external;\\n\\n  function setLPStakingAddress(address _lpStaking) external;\\n\\n  function setFNFTStakingAddress(address _inventoryStaking) external;\\n\\n  function pauseFeeDistribution(bool _pause) external;\\n\\n  event TreasuryAddressUpdated(address newTreasury);\\n  event LPStakingAddressUpdated(address newLPStaking);\\n  event FNFTStakingAddressUpdated(address newFNFTStaking);\\n  event DistributionPaused(bool paused);\\n  event FeeReceiverAdded(address receiver, uint256 allocPoint);\\n  event FeeReceiverAllocUpdated(address receiver, uint256 allocPoint);\\n  event FeeReceiverAddressUpdated(address oldReceiver, address newReceiver);\\n  event FeeReceiverRemoved(address receiver);\\n\\n  error NotVaultManager();\\n  error OutOfBounds();\\n  error ZeroAddress();\\n}\",\"keccak256\":\"0x0bb4491305e0e5122e03adb57d47daca2e3df92389a818ec3fa8463045b9f582\",\"license\":\"MIT\"},\"src/contracts/interfaces/ILPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IStakingTokenProvider.sol\\\";\\nimport \\\"../token/LPStakingXTokenUpgradeable.sol\\\";\\n\\ninterface ILPStaking {\\n    struct StakingPool {\\n        address stakingToken;\\n        address baseToken;\\n    }\\n\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function stakingTokenProvider() external view returns (IStakingTokenProvider);\\n\\n    function lpStakingXToken() external view returns (LPStakingXTokenUpgradeable);\\n\\n    function vaultStakingInfo(uint256) external view returns (address, address);\\n\\n    function __LPStaking__init(address _vaultManager, address _stakingTokenProvider) external;\\n\\n    function setStakingTokenProvider(address _stakingTokenProvider) external;\\n\\n    function addPoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVaults(uint256[] calldata vaultIds) external;\\n\\n    function updatePoolForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 amount) external;\\n\\n    function timelockDepositFor(uint256 vaultId, address account, uint256 amount, uint256 timelockLength) external;\\n\\n    function exit(uint256 vaultId) external;\\n\\n    function emergencyExitAndClaim(address _stakingToken, address _baseToken) external;\\n\\n    function emergencyExit(address _stakingToken, address _baseToken) external;\\n\\n    function withdrawTo(uint256 vaultId, uint256 amount, address to) external;\\n\\n    function claimRewardsTo(uint256 vaultId, address to) external;\\n\\n    function claimMultipleRewards(uint256[] calldata vaultIds) external;\\n\\n    function xToken(uint256 vaultId) external view returns (LPStakingXTokenUpgradeable);\\n\\n    function xTokenAddr(address stakedToken, address baseToken) external view returns (address);\\n\\n    function balanceOf(uint256 vaultId, address addr) external view returns (uint256);\\n\\n    function lockedUntil(uint256 vaultId, address who) external view returns (uint256);\\n\\n    function lockedLPBalance(uint256 vaultId, address who) external view returns (uint256);\\n\\n    function xToken(StakingPool memory pool) external view returns (LPStakingXTokenUpgradeable);\\n\\n    function retrieveTokens(uint256 vaultId, uint256 amount, address from, address to) external;\\n\\n    event StakingPoolCreated(uint256 vaultId, address xToken, address baseToken);\\n    event StakingPoolUpdated(uint256 vaultId, address xToken);\\n    event FeesReceived(uint256 vaultId, uint256 amount, address xToken);\\n    event LPDeposited(uint256 vaultId, uint256 amount, address xToken, address sender);\\n    event XTokenWithdrawn(uint256 vaultId, uint256 amount, address xToken, address sender);\\n    event StakingTokenProviderUpdated(address oldStakingTokenProvider, address newStakingTokenProvider);\\n\\n    error NotAPool();\\n    error NotDeployingProperDistro();\\n    error NotExcludedFromFees();\\n    error NothingToMigrate();\\n    error PoolAlreadyExists();\\n    error PoolDoesNotExist();\\n    error LPStakingXTokenAlreadySet();\\n    error TimelockTooLong();\\n    error VaultManagerAlreadySet();\\n    error VaultManagerNotSet();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x6c8766af488b3c056fb361a8e507618ebf80011baa1aee29d0400942920abbbf\",\"license\":\"MIT\"},\"src/contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPausable {\\n    function isPaused(uint256 pauseId) external view returns (bool);\\n}\",\"keccak256\":\"0xad61c6900eb5e4ccaa76fb05bd9bb680befa31847c1a4a7323244349236a9baf\",\"license\":\"MIT\"},\"src/contracts/interfaces/IStakingTokenProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakingTokenProvider {\\n    function uniLikeExchange() external returns (address);\\n\\n    function defaultPairedToken() external returns (address);\\n\\n    function defaultPrefix() external returns (string memory);\\n\\n    function pairedToken(address) external returns (address);\\n\\n    function pairedPrefix(address) external returns (string memory);\\n\\n    function __StakingTokenProvider_init(address _uniLikeExchange, address _defaultPairedtoken, string memory _defaultPrefix) external;\\n\\n    function setPairedTokenForVaultToken(address _vaultToken, address _newPairedToken, string calldata _newPrefix) external;\\n\\n    function setDefaultPairedToken(address _defaultPairedToken, string calldata _defaultPrefix) external;\\n\\n    function stakingTokenForVaultToken(address _vaultToken) external view returns (address);\\n\\n    function nameForStakingToken(address _vaultToken) external view returns (string memory);\\n\\n    function pairForVaultToken(address _vaultToken, address _pairedToken) external view returns (address);\\n\\n    event DefaultPairedTokenUpdated(address oldDefaultPairedToken, address newDefaultPairedToken);\\n    event PairedTokenForVaultUpdated(address vaultToken, address oldPairedtoken, address newPairedToken);\\n\\n    error IdenticalAddress();\\n    error ZeroAddress();\\n}\",\"keccak256\":\"0x9e1fb1537606cdea4faf2baf748657800337b12d2586f1f83cc3d96cbaec17ce\",\"license\":\"MIT\"},\"src/contracts/interfaces/ITimelockExcludeList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITimelockExcludeList {\\n    function isExcluded(address addr, uint256 vaultId) external view returns (bool);\\n}\",\"keccak256\":\"0xb908cf66c38d674f2970c91a15f5edb3c8b310261b0cd70f61f936feb02eab8d\",\"license\":\"MIT\"},\"src/contracts/interfaces/IVaultManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IVaultManager {\\n    function fnftSingleFactory() external view returns (address);\\n\\n    function fnftCollectionFactory() external view returns (address);\\n\\n    function excludedFromFees(address) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function __VaultManager_init(address _weth) external;\\n\\n    function WETH() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function ifoFactory() external view returns (address);\\n\\n    function zapContract() external view returns (address);\\n\\n    function feeReceiver() external view returns (address payable);\\n\\n    function togglePaused() external;\\n\\n    function addVault(address _fnft) external returns (uint256 vaultId);\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setFeeExclusion(address _address, bool _excluded) external;\\n\\n    function setFeeReceiver(address payable _feeReceiver) external;\\n\\n    function setIFOFactory(address _ifoFactory) external;\\n\\n    function setZapContract(address _zapContract) external;\\n\\n    function setFNFTCollectionFactory(address _fnftCollectionFactory) external;\\n\\n    function setFNFTSingleFactory(address _fnftCollectionFactory) external;\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function vaults(uint256) external view returns (address);\\n\\n    function numVaults() external view returns (uint);\\n\\n    event PriceOracleUpdated(address oldPriceOracle, address newPriceOracle);\\n    event IFOFactoryUpdated(address oldIFOFactory, address newIFOFactory);\\n    event FeeReceiverUpdated(address oldFeeReceiver, address newFeeReceiver);\\n    event ZapContractUpdated(address oldZapContract, address newZapContract);\\n    event FNFTCollectionFactoryUpdated(address oldFNFTCollectionFactory, address newFNFTCollectionFactory);\\n    event FNFTSingleFactoryUpdated(address oldFNFTSingleFactory, address newFNFTSingleFactory);\\n    event VaultAdded(uint256 vaultId, address vault);\\n    event FeeDistributorUpdated(address oldFeeDistributor, address newFeeDistributor);\\n    event FeeExclusionUpdated(address target, bool excluded);\\n\\n    error FeeTooHigh();\\n    error MaxAuctionLengthOutOfBounds();\\n    error MaxReserveFactorTooLow();\\n    error MinAuctionLengthOutOfBounds();\\n    error MinBidIncreaseOutOfBounds();\\n    error MinReserveFactorTooHigh();\\n    error MinVotePercentageTooHigh();\\n    error MultiplierTooLow();\\n    error OnlyFactory();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0xf883c7d6e14d75bac6f1b2533293234d93608e563d45d79b80b3d31ee07395f2\",\"license\":\"MIT\"},\"src/contracts/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n    function upgradeChildTo(address newImplementation) external;\\n}\",\"keccak256\":\"0x2ee2683fe16040709f07a18653117d408b026c5f9eb933b3b6af6d26b617f35c\",\"license\":\"MIT\"},\"src/contracts/token/ERC20FlashMintUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20FlashMint.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashLenderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * Adds the {flashLoan} method, which provides flash loan support at the token\\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC20FlashMintUpgradeable is Initializable, ERC20Upgradeable, IERC3156FlashLenderUpgradeable {\\n    function __ERC20FlashMint_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20FlashMint_init_unchained() internal onlyInitializing {\\n    }\\n    bytes32 private constant _ON_RETURN_VALUE = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    error ExceedsMaxFlashLoan();\\n    error FlashLoanNotRepaid();\\n    error InvalidFlashLoanReturnValue();\\n\\n    /**\\n     * @dev Returns the maximum amount of tokens available for loan.\\n     * @param token The address of the token that is requested.\\n     * @return The amont of token that can be loaned.\\n     */\\n    function maxFlashLoan(address token) public view virtual override returns (uint256) {\\n        return token == address(this) ? type(uint256).max - ERC20Upgradeable.totalSupply() : 0;\\n    }\\n\\n    function _flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) internal returns (bool) {\\n        if (amount > maxFlashLoan(token)) revert ExceedsMaxFlashLoan();\\n\\n        _mint(address(receiver), amount);\\n        if (receiver.onFlashLoan(msg.sender, token, amount, fee, data) != _ON_RETURN_VALUE) revert InvalidFlashLoanReturnValue();\\n        uint256 currentAllowance = allowance(address(receiver), address(this));\\n        if (amount + fee > currentAllowance) revert FlashLoanNotRepaid();\\n\\n        _approve(address(receiver), address(this), currentAllowance - amount - fee);\\n\\n        _burn(address(receiver), amount);\\n        _chargeAndDistributeFees(address(receiver), fee);\\n\\n        return true;\\n    }\\n\\n    function _chargeAndDistributeFees(address user, uint256 amount) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea8f4fd3607effd978dc28884710cf7a12e12952a99fc0a24c40f6be3e50b3c2\",\"license\":\"MIT\"},\"src/contracts/token/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\",\"keccak256\":\"0x6ffb3595113d54827e8eca1b15cf843744a8d5865bb591ba974a7d978b9ea571\",\"license\":\"MIT\"},\"src/contracts/token/LPStakingXTokenUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/// @title Reward-Paying Token (renamed from Dividend)\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute a target token\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\ncontract LPStakingXTokenUpgradeable is OwnableUpgradeable, ERC20Upgradeable {\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  IERC20Upgradeable public target;\\n\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received target is small.\\n  // For more discussion about choosing the value of `magnitude`,\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n  uint256 constant internal magnitude = 2**128;\\n\\n  uint256 internal magnifiedRewardPerShare;\\n\\n  // About dividendCorrection:\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n  //   `dividendOf(_user)` should not be changed,\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n  mapping(address => int256) internal magnifiedRewardCorrections;\\n  mapping(address => uint256) internal withdrawnRewards;\\n\\n  mapping(address => uint256) internal timelock;\\n\\n  event Timelocked(address user, uint256 amount, uint256 until);\\n\\n  error UserIsLocked();\\n  error ZeroAmount();\\n  error ZeroSupply();\\n\\n  function __LPStakingXToken_init(IERC20Upgradeable _target, string memory _name, string memory _symbol) public initializer {\\n    __Ownable_init();\\n    __ERC20_init(_name, _symbol);\\n    target = _target;\\n  }\\n\\n  function transfer(address recipient, uint256 amount)\\n      public\\n      virtual\\n      override\\n      returns (bool)\\n  {\\n      _transfer(_msgSender(), recipient, amount);\\n      return true;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Emits an {Approval} event indicating the updated allowance. This is not\\n    * required by the EIP. See the note at the beginning of {ERC20}.\\n    *\\n    * Requirements:\\n    *\\n    * - `sender` and `recipient` cannot be the zero address.\\n    * - `sender` must have a balance of at least `amount`.\\n    * - the caller must have allowance for ``sender``'s tokens of at least\\n    * `amount`.\\n    */\\n  function transferFrom(address sender, address recipient, uint256 amount)\\n      public\\n      virtual\\n      override\\n      returns (bool)\\n  {\\n      _transfer(sender, recipient, amount);\\n      _approve(sender, _msgSender(), allowance(sender, _msgSender()) - amount);\\n      return true;\\n  }\\n\\n  function mint(address account, uint256 amount) public onlyOwner virtual {\\n      _mint(account, amount);\\n  }\\n\\n  function timelockMint(address account, uint256 amount, uint256 timelockLength) public onlyOwner virtual {\\n    uint256 timelockFinish = block.timestamp + timelockLength;\\n    timelock[account] = timelockFinish;\\n    emit Timelocked(account, amount, timelockFinish);\\n    _mint(account, amount);\\n  }\\n\\n  function timelockUntil(address account) public view returns (uint256) {\\n    return timelock[account];\\n  }\\n\\n  /**\\n    * @dev Destroys `amount` tokens from `account`, without deducting from the caller's\\n    * allowance. Dangerous.\\n    *\\n    * See {ERC20-_burn} and {ERC20-allowance}.\\n    */\\n  function burnFrom(address account, uint256 amount) public virtual onlyOwner {\\n      _burn(account, amount);\\n  }\\n\\n  /// @notice Distributes target to token holders as dividends.\\n  /// @dev It reverts if the total supply of tokens is 0.\\n  /// It emits the `RewardsDistributed` event if the amount of received target is greater than 0.\\n  /// About undistributed target tokens:\\n  ///   In each distribution, there is a small amount of target not distributed,\\n  ///     the magnified amount of which is\\n  ///     `(amount * magnitude) % totalSupply()`.\\n  ///   With a well-chosen `magnitude`, the amount of undistributed target\\n  ///     (de-magnified) in a distribution can be less than 1 wei.\\n  ///   We can actually keep track of the undistributed target in a distribution\\n  ///     and try to distribute it in the next distribution,\\n  ///     but keeping track of such data on-chain costs much more than\\n  ///     the saved target, so we don't do that.\\n  function distributeRewards(uint amount) external virtual onlyOwner {\\n    if (totalSupply() == 0) revert ZeroSupply();\\n    if (amount == 0) revert ZeroAmount();\\n\\n    // Because we receive the tokens from the staking contract, we assume the tokens have been received.\\n    magnifiedRewardPerShare = magnifiedRewardPerShare + (amount * magnitude / totalSupply());\\n\\n    emit RewardsDistributed(msg.sender, amount);\\n  }\\n\\n  /// @notice Withdraws the target distributed to the sender.\\n  /// @dev It emits a `RewardWithdrawn` event if the amount of withdrawn target is greater than 0.\\n  function withdrawReward(address user) external onlyOwner {\\n    uint256 _withdrawableReward = withdrawableRewardOf(user);\\n    if (_withdrawableReward > 0) {\\n      withdrawnRewards[user] = withdrawnRewards[user] + _withdrawableReward;\\n      target.safeTransfer(user, _withdrawableReward);\\n      emit RewardWithdrawn(user, _withdrawableReward);\\n    }\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner) public view returns(uint256) {\\n    return withdrawableRewardOf(_owner);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableRewardOf(address _owner) internal view returns(uint256) {\\n    return accumulativeRewardOf(_owner) - withdrawnRewards[_owner];\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnRewardOf(address _owner) public view returns(uint256) {\\n    return withdrawnRewards[_owner];\\n  }\\n\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeRewardOf(_owner) = withdrawableRewardOf(_owner) + withdrawnRewardOf(_owner)\\n  /// = (magnifiedRewardPerShare * balanceOf(_owner) + magnifiedRewardCorrections[_owner]) / magnitude\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeRewardOf(address _owner) public view returns(uint256) {\\n    return ((magnifiedRewardPerShare * balanceOf(_owner)).toInt256() + magnifiedRewardCorrections[_owner]).toUint256() / magnitude;\\n  }\\n\\n  /// @dev Internal function that transfer tokens from one address to another.\\n  /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n  /// @param from The address to transfer from.\\n  /// @param to The address to transfer to.\\n  /// @param value The amount to be transferred.\\n  function _transfer(address from, address to, uint256 value) internal override {\\n    if (timelock[from] >= block.timestamp) revert UserIsLocked();\\n    super._transfer(from, to, value);\\n\\n    int256 _magCorrection = (magnifiedRewardPerShare * value).toInt256();\\n    magnifiedRewardCorrections[from] = magnifiedRewardCorrections[from] + _magCorrection;\\n    magnifiedRewardCorrections[to] = magnifiedRewardCorrections[to] - _magCorrection;\\n  }\\n\\n  /// @dev Internal function that mints tokens to an account.\\n  /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n  /// @param account The account that will receive the created tokens.\\n  /// @param value The amount that will be created.\\n  function _mint(address account, uint256 value) internal override {\\n    super._mint(account, value);\\n\\n    magnifiedRewardCorrections[account] = magnifiedRewardCorrections[account] - (magnifiedRewardPerShare * value).toInt256();\\n  }\\n\\n  /// @dev Internal function that burns an amount of the token of a given account.\\n  /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n  /// @param account The account whose tokens will be burnt.\\n  /// @param value The amount that will be burnt.\\n  function _burn(address account, uint256 value) internal override {\\n    if (timelock[account] >= block.timestamp) revert UserIsLocked();\\n    super._burn(account, value);\\n\\n    magnifiedRewardCorrections[account] = magnifiedRewardCorrections[account] + (magnifiedRewardPerShare * value).toInt256();\\n  }\\n\\n\\n  /// @dev This event MUST emit when target is distributed to token holders.\\n  /// @param from The address which sends target to this contract.\\n  /// @param weiAmount The amount of distributed target in wei.\\n  event RewardsDistributed(\\n    address indexed from,\\n    uint256 weiAmount\\n  );\\n\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\n  /// @param to The address which withdraws target from this contract.\\n  /// @param weiAmount The amount of withdrawn target in wei.\\n  event RewardWithdrawn(\\n    address indexed to,\\n    uint256 weiAmount\\n  );\\n}\",\"keccak256\":\"0xb1c86212e64708255110a346342716f0abd0f7a1b9713bc8b3f295a73b0c062d\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615314806100206000396000f3fe608060405234801561001057600080fd5b506004361061043d5760003560e01c80638b3aba5711610236578063cce2f3fb1161013b578063e66f53b7116100c3578063f23a6e6111610087578063f23a6e6114610a0d578063f2fde38b14610a2c578063f7fce33414610a3f578063fcc0e38114610a47578063feb8eba514610a5c57600080fd5b8063e66f53b7146109bc578063e90956cf146109d0578063e9ec2e99146109e3578063ec342ad0146109eb578063f1d20dd4146109fa57600080fd5b8063d9d98ce41161010a578063d9d98ce414610946578063dd62ed3e14610959578063e0a8b97a1461096c578063e0b4a79a1461097f578063e4b2fb791461099257600080fd5b8063cce2f3fb14610905578063d29e27bf14610918578063d53f62171461092b578063d6ee4a931461093357600080fd5b8063aa024980116101be578063bc197c811161018d578063bc197c81146108a2578063c3cb8c14146108c1578063c45a0155146108c9578063c4a0db96146108dd578063c4ff5247146108f057600080fd5b8063aa02498014610854578063b10402ea14610869578063b579605b1461087c578063b9a2de3a1461088f57600080fd5b806395d89b411161020557806395d89b4114610800578063983d95ce146108085780639d54def61461081b578063a457c2d71461082e578063a9059cbb1461084157600080fd5b80638b3aba57146107a75780638c850814146107c85780638da5cb5b146107db5780638f878a43146107ec57600080fd5b80633950935111610347578063598647f8116102cf578063715018a611610293578063715018a61461073357806372188e3f1461073b57806378bd79351461076b578063793096581461077e5780638a4adf241461079357600080fd5b8063598647f8146106bc5780635cffe9de146106cf578063613255ab146106e25780636b948a35146106f557806370a082311461070a57600080fd5b80634fee13fc116103165780634fee13fc1461060c5780635035434a1461061f57806354fd4d5014610634578063571a26a0146106565780635877aee6146106a957600080fd5b806339509351146105be5780633d5d190c146105d157806344b28d59146105e457806345a0b652146105f957600080fd5b806318160ddd116103ca578063313ce56711610399578063313ce56714610580578063325c25a21461058f57806332d8e65b1461059957806333194c0a146105ac57806335dca76c146105b657600080fd5b806318160ddd146105245780631ba46cfd1461052c57806323b872dd1461055857806325705d8d1461056b57600080fd5b806306f26dc21161041157806306f26dc21461049a57806306fdde03146104af578063095ea7b3146104c457806313966db5146104d7578063150b7a02146104ed57600080fd5b80625181611461044257806301ffc9a71461044c578063042f186c1461047457806304a66b4814610487575b600080fd5b61044a610a64565b005b61045f61045a3660046142f4565b610ad7565b60405190151581526020015b60405180910390f35b61044a6104823660046143f6565b610b1d565b61044a6104953660046144a4565b610d7e565b6101cd5461045f90600160a01b900460ff1681565b6104b7610e14565b60405161046b919061450b565b61045f6104d236600461453e565b610ea6565b6104df610ebe565b60405190815260200161046b565b61050b6104fb36600461456a565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161046b565b6067546104df565b6101cd54610540906001600160a01b031681565b6040516001600160a01b03909116815260200161046b565b61045f6105663660046145d5565b610f46565b610573610f6a565b60405161046b9190614651565b6040516012815260200161046b565b6104df6101cc5481565b6105406105a7366004614664565b611004565b6104df6101ca5481565b6104df611040565b61045f6105cc36600461453e565b6110c7565b6104df6105df3660046146c8565b611106565b6101cd5461045f90600160b01b900460ff1681565b6104df610607366004614664565b611180565b61044a61061a366004614733565b61118e565b6101cd5461045f90600160c81b900460ff1681565b604080518082019091526006815265076312e302e360d41b60208201526104b7565b610699610664366004614664565b6101cf6020526000908152604090208054600182015460029092015490919060ff81169061010090046001600160a01b031684565b60405161046b949392919061476b565b6105406106b73660046147f8565b611338565b61044a6106ca366004614733565b6114c6565b61045f6106dd366004614843565b61172c565b6104df6106f03660046148b5565b6117d9565b6101cd5461045f90600160a81b900460ff1681565b6104df6107183660046148b5565b6001600160a01b031660009081526065602052604090205490565b61044a611801565b610743611840565b604080519586526020860194909452928401919091526060830152608082015260a00161046b565b610699610779366004614664565b6118cd565b6101cd5461045f90600160c01b900460ff1681565b6101c854610540906001600160a01b031681565b6104df6107b5366004614664565b6101c36020526000908152604090205481565b6105736107d6366004614946565b611952565b6033546001600160a01b0316610540565b6101c654610540906001600160a01b031681565b6104b7611b5c565b6105736108163660046149e0565b611b6b565b610573610829366004614a21565b611ce2565b61045f61083c36600461453e565b611e72565b61045f61084f36600461453e565b611f04565b6101cd5461045f90600160d81b900460ff1681565b6104df610877366004614a7b565b611f12565b61044a61088a366004614664565b612003565b61044a61089d366004614664565b612160565b61050b6108b0366004614ad6565b63bc197c8160e01b95945050505050565b61044a612333565b6101c754610540906001600160a01b031681565b6105736108eb366004614b83565b61233d565b6101cd5461045f90600160d01b900460ff1681565b61044a6109133660046148b5565b612386565b61044a610926366004614bc1565b612470565b6104df612564565b610573610941366004614c15565b6125eb565b6104df61095436600461453e565b61268d565b6104df610967366004614cae565b61274f565b61044a61097a366004614ce7565b61277a565b61044a61098d366004614d46565b6127f5565b6105406109a0366004614664565b6101ce602052600090815260409020546001600160a01b031681565b6101c954610540906001600160a01b031681565b61044a6109de3660046148b5565b612838565b6104df6128da565b6104df670de0b6b3a764000081565b61045f610a08366004614d7d565b6128ec565b61050b610a1b366004614db1565b63f23a6e6160e01b95945050505050565b61044a610a3a3660046148b5565b612992565b6104df612a2d565b6101cd5461045f90600160b81b900460ff1681565b6104df612ab5565b610a6c612b3d565b6101c7546101ca546040516360c1795960e11b81526001600160a01b039092169163c182f2b291610aa39160040190815260200190565b600060405180830381600087803b158015610abd57600080fd5b505af1158015610ad1573d6000803e3d6000fd5b50505050565b60006001600160e01b0319821663ce47666760e01b1480610b0857506001600160e01b031982166301ffc9a760e01b145b80610b175750610b1782612ba5565b92915050565b6000610b296001612bda565b90508015610b41576000805461ff0019166101001790555b610b49612c62565b610b538787612c91565b6001600160a01b038416610b7a5760405163d92e233d60e01b815260040160405180910390fd5b610b8c60018060018060016000612470565b6000339050806001600160a01b0316638a4adf246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf39190614e19565b6101c880546001600160a01b03199081166001600160a01b039384169081179092556101cd805482168985161790556101c9805482168a85161790556101c7805490911692841692909217909155604080516304c94c4160e31b8152905163264a6208916004818101926020929091908290030181865afa158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190614e36565b6101ca8190556101cd805461ffff60a01b1916600160a01b87151590810260ff60a81b191691909117600160a81b871515908102919091179092556203f4806101cc55604080516001600160a01b038a16815260208101929092528101919091527f18ecce5c418b882a3d89e5b6cc8100dc3383309b8e78525266fe1283a7f934d69060600160405180910390a2508015610d75576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610d86612b3d565b6101c7546101ca546040516310ccb16960e11b815260048101919091526024810187905260448101869052606481018590526084810184905260a481018390526001600160a01b039091169063219962d29060c401600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b505050505050505050565b606060688054610e2390614e4f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4f90614e4f565b8015610e9c5780601f10610e7157610100808354040283529160200191610e9c565b820191906000526020600020905b815481529060010190602001808311610e7f57829003601f168201915b5050505050905090565b600033610eb4818585612cc6565b5060019392505050565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b0390911691632206137991610efa9160040190815260200190565b60a060405180830381865afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190614e89565b509295945050505050565b600033610f54858285612dea565b610f5f858585612e5e565b506001949350505050565b60606000610f796101c461302c565b90506000816001600160401b03811115610f9557610f9561431e565b604051908082528060200260200182016040528015610fbe578160200160208202803683370190505b50905060005b82811015610ffd57610fd86101c482613036565b828281518110610fea57610fea614ec9565b6020908102919091010152600101610fc4565b5092915050565b60008181526101ce60205260409020546001600160a01b03168061103b57604051632692809160e11b815260040160405180910390fd5b919050565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b039091169163220613799161107c9160040190815260200190565b60a060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd9190614e89565b9695505050505050565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190610eb49082908690611101908790614ef5565b612cc6565b600061117785858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250339250611f12915050565b95945050505050565b6000610b176101c483613036565b6111986004613042565b6101cd54600160d81b900460ff1615806111bc57506101cd54600160a01b900460ff165b156111da57604051639bcbd04360e01b815260040160405180910390fd5b60008281526101cf6020526040812060029081015460ff169081111561120257611202614755565b1461122057604051631c2ce4fd60e01b815260040160405180910390fd5b670de0b6b3a764000081101561124957604051635069375b60e11b815260040160405180910390fd5b61125333826130e4565b60405180608001604052808281526020016101cc54426112739190614ef5565b8152600160208083018290523360409384015260008681526101cf825283902084518155908401518183015591830151600280840180549293909260ff19169184908111156112c4576112c4614755565b021790555060609190910151600290910180546001600160a01b0390921661010002610100600160a81b0319909216919091179055604080518381526020810183905233917f92db7303de5c78e58e4570f0b4acf392e3dac09394e96c4fa62b323b6337ee65910160405180910390a25050565b6000611342612b3d565b6101c6546001600160a01b03161561136d576040516344a30fbf60e01b815260040160405180910390fd5b6101c75460408051630a63bfd560e11b815290516000926001600160a01b0316916314c77faa9160048083019260209291908290030181865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190614e19565b90506000816001600160a01b031663576ff9088787876040518463ffffffff1660e01b815260040161141093929190614f36565b6020604051808303816000875af115801561142f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114539190614e19565b6101c680546001600160a01b0319166001600160a01b0383169081179091556101cd805460ff60a81b191690556040805189815260208101929092529192507fe14c63b3d4272158635bee1d1b95b51bb8de042ee95a15cbfaf2865b4d0af811910160405180910390a195945050505050565b6114d06004613042565b6101cd54600160d81b900460ff1615806114f457506101cd54600160a01b900460ff165b1561151257604051639bcbd04360e01b815260040160405180910390fd5b600160008381526101cf6020526040902060029081015460ff169081111561153c5761153c614755565b1461155a576040516358fd8d1160e01b815260040160405180910390fd5b60008281526101cf60209081526040808320546101c7548251637c513c0f60e01b815292519194936001600160a01b0390911692637c513c0f92600480830193928290030181865afa1580156115b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d89190614e36565b6115e490612710614ef5565b90506115f08183614f50565b6115fc84612710614f50565b101561161b57604051635069375b60e11b815260040160405180910390fd5b60008481526101cf602052604090206001015442811161164e5760405163283a4a6160e21b815260040160405180910390fd5b61165833856130e4565b60008581526101cf60205260409020600201546116839061010090046001600160a01b031684613232565b60008581526101cf602052604090208481556002018054610100600160a81b03191633610100021790556103846116ba4283614f6f565b116116e95760008581526101cf60205260408120600101805461038492906116e3908490614ef5565b90915550505b604080518681526020810186905233917fa83fe65d893591fe1c92845e86c5a5907f93f15e28b4e2124db434265822181b91015b60405180910390a25050505050565b60006117386005613042565b6101c8546040516306df336560e51b81526001600160a01b038881166004830152600092169063dbe66ca090602401602060405180830381865afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190614f86565b6117bb576117b6868661268d565b6117be565b60005b90506117ce878787848888613311565b979650505050505050565b60006001600160a01b03821630146117f2576000610b17565b606754610b1790600019614f6f565b6033546001600160a01b031633146118345760405162461bcd60e51b815260040161182b90614fa3565b60405180910390fd5b61183e6000613473565b565b6101c7546101ca54604051632206137960e01b8152600481019190915260009182918291829182916001600160a01b03169063220613799060240160a060405180830381865afa158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bc9190614e89565b945094509450945094509091929394565b60008181526101cf602052604081206002015481908190819060ff16818160028111156118fc576118fc614755565b0361191a576040516358fd8d1160e01b815260040160405180910390fd5b60009586526101cf60205260409095208054600182015460029092015490979196955061010090046001600160a01b03169350915050565b6060600260c954036119765760405162461bcd60e51b815260040161182b90614fd8565b600260c9556119856003613042565b6101cd54600160d81b900460ff16156119b15760405163330809f960e11b815260040160405180910390fd5b6101cd54600090600160a01b900460ff1615611a2d5760005b8651811015611a275760008682815181106119e7576119e7614ec9565b6020026020010151905080600003611a12576040516329c5442960e01b815260040160405180910390fd5b611a1c8184614ef5565b9250506001016119ca565b50611a31565b5084515b83518114158015611a4d57506101cd54600160c81b900460ff16155b15611a6b57604051631bee2d3960e11b815260040160405180910390fd5b835115801590611a8657506101cd54600160d01b900460ff16155b15611aa45760405163dc1d736760e01b815260040160405180910390fd5b600080611aaf611840565b945094505050506000865184611ac59190614f6f565b611acf9084614f50565b8751611adb9084614f50565b611ae59190614ef5565b9050611af133826134c5565b6000611afe858989613620565b9050611b0a8a8a613805565b507f66982ed4a058811a8004bdcec9adcb3671f2b4f1a788667a3a74959d7c09af3c8a8a8a848b604051611b4295949392919061500f565b60405180910390a1600160c9559998505050505050505050565b606060698054610e2390614e4f565b6060611b776002613042565b6101cd54600160d81b900460ff16611ba257604051639bcbd04360e01b815260040160405180910390fd5b8160005b81811015611c12576000858583818110611bc257611bc2614ec9565b6020908102929092013560008181526101ce909352604090922054919250506001600160a01b03163314611c0957604051631022318760e21b815260040160405180910390fd5b50600101611ba6565b50611c2e33611c2983670de0b6b3a7640000614f50565b6130e4565b6000611c38611840565b50509250505060008282611c4c9190614f50565b9050611c5833826134c5565b6000611c9984888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250613620915050565b90507f63b13f6307f284441e029836b0c22eb91eb62a7ad555670061157930ce884f4e81888833604051611cd09493929190615077565b60405180910390a19695505050505050565b6060600260c95403611d065760405162461bcd60e51b815260040161182b90614fd8565b600260c9819055611d1690613042565b6101cd54600160d81b900460ff1615611d425760405163330809f960e11b815260040160405180910390fd5b82518414158015611d5e57506101cd54600160b81b900460ff16155b15611d7c57604051635249c6e360e01b815260040160405180910390fd5b825115801590611d9757506101cd54600160c01b900460ff16155b15611db557604051631da0a2ed60e21b815260040160405180910390fd5b611dcb33611c2986670de0b6b3a7640000614f50565b600080611dd6611840565b505092509250506000855187611dec9190614f6f565b611df69084614f50565b8651611e029084614f50565b611e0c9190614ef5565b9050611e1833826134c5565b6000611e25888888613620565b90507f63b13f6307f284441e029836b0c22eb91eb62a7ad555670061157930ce884f4e818888604051611e5a939291906150dc565b60405180910390a1600160c955979650505050505050565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919083811015611ef75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161182b565b610f5f8286868403612cc6565b600033610eb4818585612e5e565b6000600260c95403611f365760405162461bcd60e51b815260040161182b90614fd8565b600260c955611f456001613042565b6101cd54600160b01b900460ff16611f70576040516317efbd6b60e01b815260040160405180910390fd5b6000611f7c8585613805565b9050611f9983611f9483670de0b6b3a7640000614f50565b613232565b600081611fa4610ebe565b611fae9190614f50565b9050611fba84826134c5565b7f1f72ad2a14447fa756b6f5aca53504645af79813493aca2d906b69e4aaeb9492868686604051611fed939291906150dc565b60405180910390a150600160c955949350505050565b61200b612b3d565b6101c760009054906101000a90046001600160a01b03166001600160a01b031663a0b335e36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561205f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120839190614e36565b81108061210657506101c760009054906101000a90046001600160a01b03166001600160a01b0316630e519ef96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121039190614e36565b81115b15612124576040516321029bc560e11b815260040160405180910390fd5b6101cc8190556040518181527f26d6292d6fb0e786778ddcd15ee4e4ee219a7b892d1bf667e1c497c85bbcddcb9060200160405180910390a150565b61216a6004613042565b6101cd54600160d81b900460ff16158061218e57506101cd54600160a01b900460ff165b156121ac57604051639bcbd04360e01b815260040160405180910390fd5b600160008281526101cf6020526040902060029081015460ff16908111156121d6576121d6614755565b146121f4576040516358fd8d1160e01b815260040160405180910390fd5b60008181526101cf602052604090206001015442101561222757604051636463738960e01b815260040160405180910390fd5b60008181526101cf60205260408120600281018054825484845560019093018490556001600160a81b0319811690915561010090046001600160a01b031691612278670de0b6b3a764000083614f6f565b905080156122a35760008481526101ce60205260409020546122a3906001600160a01b031682613232565b6040805160018082528183019092526000916020808301908036833701905050905084816000815181106122d9576122d9614ec9565b6020026020010181815250506122f160018286613620565b5060408051868152602081018590526001600160a01b038616917f46d4d7f683a950a220ec6b7660e9917988b3e3cf4afba314c532b1e8ee29944e910161171d565b61183e6000612838565b606061237e84848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250611ce2915050565b949350505050565b6033546001600160a01b031633146123b05760405162461bcd60e51b815260040161182b90614fa3565b6000670de0b6b3a76400006123c460675490565b6123ce9190615130565b9050600481106123f157604051636e58b71560e01b815260040160405180910390fd5b60408051600081526020810190915261240b828285613620565b506101cd54604080516001600160a01b0392831681526020810185905291851682820152517f1f6d756c685d4969a551099165b59f836b4d2cc7e036e623f0248c28bff91db59181900360600190a150506101cd80546001600160a01b031916905550565b612478612b3d565b6101cd805461ffff60b01b1916600160b01b88151590810260ff60b81b191691909117600160b81b8815159081029190911761ffff60c01b1916600160c01b88151590810260ff60c81b191691909117600160c81b8815159081029190911761ffff60d01b1916600160d01b88151590810260ff60d81b191691909117600160d81b88151590810291909117909655604080519586526020860194909452928401919091526060830152608082015260a08101919091527fb99086478c28bdee69303d660a2e2956e75ba132163a2224576580dbb57f74259060c00160405180910390a1505050505050565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b03909116916322061379916125a09160040190815260200190565b60a060405180830381865afa1580156125bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e19190614e89565b5095945050505050565b60606117ce87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250339250611952915050565b60006001600160a01b03831630146126b85760405163c1ab6dc160e01b815260040160405180910390fd5b612710826101c760009054906101000a90046001600160a01b03166001600160a01b0316634847cdc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127349190614e36565b61273e9190614f50565b6127489190615130565b9392505050565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b612782612b3d565b610ad184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f88018190048102820181019092528681529250869150859081908401838280828437600092019190915250613a0092505050565b6033546001600160a01b0316331461281f5760405162461bcd60e51b815260040161182b90614fa3565b61282982846130e4565b6128338184613232565b505050565b612840612b3d565b6101c9546001600160a01b0380831691160361286f57604051635e39359760e01b815260040160405180910390fd5b6101c954604080516001600160a01b03928316815291831660208301527fbc21df13ae8a32d7d89d87c70c0d02240cd4fb9554c57522bbbf6f27bfc2dacd910160405180910390a16101c980546001600160a01b0319166001600160a01b0392909216919091179055565b60006128e76101c461302c565b905090565b6101cd54600090600160a81b900460ff161561290a57506001919050565b6101c6546001600160a01b0316806129255750600092915050565b6040516384ca9f8560e01b81526001600160a01b038216906384ca9f8590612951908690600401614651565b602060405180830381865afa15801561296e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127489190614f86565b6033546001600160a01b031633146129bc5760405162461bcd60e51b815260040161182b90614fa3565b6001600160a01b038116612a215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161182b565b612a2a81613473565b50565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b0390911691632206137991612a699160040190815260200190565b60a060405180830381865afa158015612a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaa9190614e89565b509195945050505050565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b0390911691632206137991612af19160040190815260200190565b60a060405180830381865afa158015612b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b329190614e89565b509095945050505050565b6101c9546001600160a01b0316612b79576033546001600160a01b0316331461183e576040516330cd747160e01b815260040160405180910390fd5b6101c9546001600160a01b0316331461183e576040516356b381a560e01b815260040160405180910390fd5b60006001600160e01b03198216630271189760e51b1480610b1757506301ffc9a760e01b6001600160e01b0319831614610b17565b60008054610100900460ff1615612c21578160ff166001148015612bfd5750303b155b612c195760405162461bcd60e51b815260040161182b90615144565b506000919050565b60005460ff808416911610612c485760405162461bcd60e51b815260040161182b90615144565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16612c895760405162461bcd60e51b815260040161182b90615192565b61183e613a27565b600054610100900460ff16612cb85760405162461bcd60e51b815260040161182b90615192565b612cc28282613a57565b5050565b6001600160a01b038316612d285760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161182b565b6001600160a01b038216612d895760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161182b565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000612df6848461274f565b90506000198114610ad15781811015612e515760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161182b565b610ad18484848403612cc6565b6001600160a01b038316612ec25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161182b565b6001600160a01b038216612f245760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161182b565b6001600160a01b03831660009081526065602052604090205481811015612f9c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161182b565b6001600160a01b03808516600090815260656020526040808220858503905591851681529081208054849290612fd3908490614ef5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161301f91815260200190565b60405180910390a3610ad1565b6000610b17825490565b60006127488383613a7e565b6033546001600160a01b031633148015906130c657506101c754604051632f7ca90f60e21b8152600481018390526001600160a01b039091169063bdf2a43c90602401602060405180830381865afa1580156130a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c69190614f86565b15612a2a576040516313d0ff5960e31b815260040160405180910390fd5b6001600160a01b0382166131445760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161182b565b6001600160a01b038216600090815260656020526040902054818110156131b85760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161182b565b6001600160a01b03831660009081526065602052604081208383039055606780548492906131e7908490614f6f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b0382166132885760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161182b565b806067600082825461329a9190614ef5565b90915550506001600160a01b038216600090815260656020526040812080548392906132c7908490614ef5565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600061331c866117d9565b85111561333c57604051634b29c39b60e11b815260040160405180910390fd5b6133468786613232565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038916906323e30c8b9061339e9033908b908b908b908b908b906004016151dd565b6020604051808303816000875af11580156133bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e19190614e36565b146133ff57604051637679356b60e01b815260040160405180910390fd5b600061340b883061274f565b9050806134188688614ef5565b111561343757604051633fe269db60e11b815260040160405180910390fd5b6134518830876134478a86614f6f565b6111019190614f6f565b61345b88876130e4565b61346588866134c5565b506001979650505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806000036134d1575050565b6101c8546040516306df336560e51b81523360048201526001600160a01b0390911690819063dbe66ca090602401602060405180830381865afa15801561351c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135409190614f86565b1561354a57505050565b6000816001600160a01b0316630d43e8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561358a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ae9190614e19565b90506135bb848285612e5e565b6101ca546040516391c05b0b60e01b815260048101919091526001600160a01b038216906391c05b0b90602401600060405180830381600087803b15801561360257600080fd5b505af1158015613616573d6000803e3d6000fd5b5050505050505050565b6101cd5460609060ff600160a01b820416906001600160a01b03166000866001600160401b038111156136555761365561431e565b60405190808252806020026020018201604052801561367e578160200160208202803683370190505b50865190915060005b888110156137f05760008282106136a5576136a0613aa8565b6136c0565b8882815181106136b7576136b7614ec9565b60200260200101515b9050808483815181106136d5576136d5614ec9565b60200260200101818152505085156137b25760008181526101c360205260408120805460019290613707908490614f6f565b909155505060008181526101c3602052604081205490036137305761372e6101c482613b46565b505b604051637921219560e11b81523060048201526001600160a01b038981166024830152604482018390526001606483015260a06084830152600060a483015286169063f242432a9060c401600060405180830381600087803b15801561379557600080fd5b505af11580156137a9573d6000803e3d6000fd5b505050506137e7565b6137be6101c482613b46565b5060008181526101ce6020526040902080546001600160a01b03191690556137e7858983613b52565b50600101613687565b506137fa82613d27565b509695505050505050565b6000613810836128ec565b61382d57604051631aecbf0160e01b815260040160405180910390fd5b82516101cd54600160a01b900460ff1615613980576101cd54604051631759616b60e11b81526001600160a01b0390911690632eb2c2d690613879903390309089908990600401615224565b600060405180830381600087803b15801561389357600080fd5b505af11580156138a7573d6000803e3d6000fd5b505050506000805b828110156139765760008682815181106138cb576138cb614ec9565b6020026020010151905060008683815181106138e9576138e9614ec9565b6020026020010151905080600003613914576040516329c5442960e01b815260040160405180910390fd5b60008281526101c360205260408120549003613938576139366101c483613d9f565b505b60008281526101c3602052604081208054839290613957908490614ef5565b9091555061396790508185614ef5565b935082600101925050506138af565b509150610b179050565b6101cd546001600160a01b031660005b828110156139f55760008682815181106139ac576139ac614ec9565b602002602001015190506139c08382613dab565b60008181526101ce6020526040902080546001600160a01b031916331790556139eb6101c482613d9f565b5050600101613990565b508192505050610b17565b8151613a1390606890602085019061425b565b50805161283390606990602084019061425b565b600054610100900460ff16613a4e5760405162461bcd60e51b815260040161182b90615192565b61183e33613473565b600054610100900460ff16613a005760405162461bcd60e51b815260040161182b90615192565b6000826000018281548110613a9557613a95614ec9565b9060005260206000200154905092915050565b600080613ab66101c461302c565b613ac1600143614f6f565b6101cb54604080519240602084015282015241606090811b6bffffffffffffffffffffffff19169082015244607482015242609482015260b4016040516020818303038152906040528051906020012060001c613b1e919061527f565b90506101cb60008154613b3090615293565b90915550613b406101c482613036565b91505090565b60006127488383614119565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60607306012c8cf97bead5deae237070f9587f8e7a266c196001600160a01b03871601613bf0576040516001600160a01b03861660248201526044810185905260640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790529050613ca5565b816001600160a01b0316866001600160a01b031603613c56576040516001600160a01b03861660248201526044810185905260640160408051601f198184030181529190526020810180516001600160e01b03166322dca8bb60e21b1790529050613ca5565b6040513060248201526001600160a01b03861660448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b17905290505b600080876001600160a01b031683604051613cc091906152ac565b6000604051808303816000865af19150503d8060008114613cfd576040519150601f19603f3d011682016040523d82523d6000602084013e613d02565b606091505b5091509150818190610e095760405162461bcd60e51b815260040161182b919061450b565b6101c6546001600160a01b031680613d3d575050565b604051632f17cda960e11b81526001600160a01b03821690635e2f9b5290613d69908590600401614651565b600060405180830381600087803b158015613d8357600080fd5b505af1158015613d97573d6000803e3d6000fd5b505050505050565b6000612748838361420c565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60607306012c8cf97bead5deae237070f9587f8e7a266c196001600160a01b03861601613e46576040513360248201523060448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790529050614097565b816001600160a01b0316856001600160a01b031603613f9157600084604051602401613e7491815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316630b02f02d60e31b1790525190915060009081906001600160a01b03891690613ebd9085906152ac565b600060405180830381855afa9150503d8060008114613ef8576040519150601f19603f3d011682016040523d82523d6000602084013e613efd565b606091505b5091509150600081806020019051810190613f189190614e19565b9050821580613f3057506001600160a01b0381163314155b15613f4e57604051631022318760e21b815260040160405180910390fd5b6040516024810189905260440160408051601f198184030181529190526020810180516001600160e01b031663104c9fd360e31b17905294506140979350505050565b6101cd546040516331a9108f60e11b81526004810186905230916001600160a01b031690636352211e90602401602060405180830381865afa158015613fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fff9190614e19565b6001600160a01b0316036140515761402c6101c48560008181526001830160205260408120541515612748565b1561404a5760405163e208540b60e01b815260040160405180910390fd5b5050505050565b6040513360248201523060448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b17905290505b600080866001600160a01b0316836040516140b291906152ac565b6000604051808303816000865af19150503d80600081146140ef576040519150601f19603f3d011682016040523d82523d6000602084013e6140f4565b606091505b50915091508181906136165760405162461bcd60e51b815260040161182b919061450b565b6000818152600183016020526040812054801561420257600061413d600183614f6f565b855490915060009061415190600190614f6f565b90508181146141b657600086600001828154811061417157614171614ec9565b906000526020600020015490508087600001848154811061419457614194614ec9565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806141c7576141c76152c8565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b17565b6000915050610b17565b600081815260018301602052604081205461425357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b17565b506000610b17565b82805461426790614e4f565b90600052602060002090601f01602090048101928261428957600085556142cf565b82601f106142a257805160ff19168380011785556142cf565b828001600101855582156142cf579182015b828111156142cf5782518255916020019190600101906142b4565b506142db9291506142df565b5090565b5b808211156142db57600081556001016142e0565b60006020828403121561430657600080fd5b81356001600160e01b03198116811461274857600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561435c5761435c61431e565b604052919050565b600082601f83011261437557600080fd5b81356001600160401b0381111561438e5761438e61431e565b6143a1601f8201601f1916602001614334565b8181528460208386010111156143b657600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b0381168114612a2a57600080fd5b8015158114612a2a57600080fd5b60008060008060008060c0878903121561440f57600080fd5b86356001600160401b038082111561442657600080fd5b6144328a838b01614364565b9750602089013591508082111561444857600080fd5b5061445589828a01614364565b9550506040870135614466816143d3565b93506060870135614476816143d3565b92506080870135614486816143e8565b915060a0870135614496816143e8565b809150509295509295509295565b600080600080600060a086880312156144bc57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60005b838110156144fa5781810151838201526020016144e2565b83811115610ad15750506000910152565b602081526000825180602084015261452a8160408501602087016144df565b601f01601f19169190910160400192915050565b6000806040838503121561455157600080fd5b823561455c816143d3565b946020939093013593505050565b6000806000806080858703121561458057600080fd5b843561458b816143d3565b9350602085013561459b816143d3565b92506040850135915060608501356001600160401b038111156145bd57600080fd5b6145c987828801614364565b91505092959194509250565b6000806000606084860312156145ea57600080fd5b83356145f5816143d3565b92506020840135614605816143d3565b929592945050506040919091013590565b600081518084526020808501945080840160005b838110156146465781518752958201959082019060010161462a565b509495945050505050565b6020815260006127486020830184614616565b60006020828403121561467657600080fd5b5035919050565b60008083601f84011261468f57600080fd5b5081356001600160401b038111156146a657600080fd5b6020830191508360208260051b85010111156146c157600080fd5b9250929050565b600080600080604085870312156146de57600080fd5b84356001600160401b03808211156146f557600080fd5b6147018883890161467d565b9096509450602087013591508082111561471a57600080fd5b506147278782880161467d565b95989497509550505050565b6000806040838503121561474657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b84815260208101849052608081016003841061479757634e487b7160e01b600052602160045260246000fd5b60408201939093526001600160a01b039190911660609091015292915050565b60008083601f8401126147c957600080fd5b5081356001600160401b038111156147e057600080fd5b6020830191508360208285010111156146c157600080fd5b60008060006040848603121561480d57600080fd5b8335925060208401356001600160401b0381111561482a57600080fd5b614836868287016147b7565b9497909650939450505050565b60008060008060006080868803121561485b57600080fd5b8535614866816143d3565b94506020860135614876816143d3565b93506040860135925060608601356001600160401b0381111561489857600080fd5b6148a4888289016147b7565b969995985093965092949392505050565b6000602082840312156148c757600080fd5b8135612748816143d3565b600082601f8301126148e357600080fd5b813560206001600160401b038211156148fe576148fe61431e565b8160051b61490d828201614334565b928352848101820192828101908785111561492757600080fd5b83870192505b848310156117ce5782358252918301919083019061492d565b6000806000806080858703121561495c57600080fd5b84356001600160401b038082111561497357600080fd5b61497f888389016148d2565b9550602087013591508082111561499557600080fd5b6149a1888389016148d2565b945060408701359150808211156149b757600080fd5b506149c4878288016148d2565b92505060608501356149d5816143d3565b939692955090935050565b600080602083850312156149f357600080fd5b82356001600160401b03811115614a0957600080fd5b614a158582860161467d565b90969095509350505050565b600080600060608486031215614a3657600080fd5b8335925060208401356001600160401b03811115614a5357600080fd5b614a5f868287016148d2565b9250506040840135614a70816143d3565b809150509250925092565b600080600060608486031215614a9057600080fd5b83356001600160401b0380821115614aa757600080fd5b614ab3878388016148d2565b94506020860135915080821115614ac957600080fd5b50614a5f868287016148d2565b600080600080600060a08688031215614aee57600080fd5b8535614af9816143d3565b94506020860135614b09816143d3565b935060408601356001600160401b0380821115614b2557600080fd5b614b3189838a016148d2565b94506060880135915080821115614b4757600080fd5b614b5389838a016148d2565b93506080880135915080821115614b6957600080fd5b50614b7688828901614364565b9150509295509295909350565b600080600060408486031215614b9857600080fd5b8335925060208401356001600160401b03811115614bb557600080fd5b6148368682870161467d565b60008060008060008060c08789031215614bda57600080fd5b8635614be5816143e8565b95506020870135614bf5816143e8565b94506040870135614c05816143e8565b93506060870135614476816143e8565b60008060008060008060608789031215614c2e57600080fd5b86356001600160401b0380821115614c4557600080fd5b614c518a838b0161467d565b90985096506020890135915080821115614c6a57600080fd5b614c768a838b0161467d565b90965094506040890135915080821115614c8f57600080fd5b50614c9c89828a0161467d565b979a9699509497509295939492505050565b60008060408385031215614cc157600080fd5b8235614ccc816143d3565b91506020830135614cdc816143d3565b809150509250929050565b60008060008060408587031215614cfd57600080fd5b84356001600160401b0380821115614d1457600080fd5b614d20888389016147b7565b90965094506020870135915080821115614d3957600080fd5b50614727878288016147b7565b600080600060608486031215614d5b57600080fd5b833592506020840135614d6d816143d3565b91506040840135614a70816143d3565b600060208284031215614d8f57600080fd5b81356001600160401b03811115614da557600080fd5b61237e848285016148d2565b600080600080600060a08688031215614dc957600080fd5b8535614dd4816143d3565b94506020860135614de4816143d3565b9350604086013592506060860135915060808601356001600160401b03811115614e0d57600080fd5b614b7688828901614364565b600060208284031215614e2b57600080fd5b8151612748816143d3565b600060208284031215614e4857600080fd5b5051919050565b600181811c90821680614e6357607f821691505b602082108103614e8357634e487b7160e01b600052602260045260246000fd5b50919050565b600080600080600060a08688031215614ea157600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614f0857614f08614edf565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000611177604083018486614f0d565b6000816000190483118215151615614f6a57614f6a614edf565b500290565b600082821015614f8157614f81614edf565b500390565b600060208284031215614f9857600080fd5b8151612748816143e8565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60a08152600061502260a0830188614616565b82810360208401526150348188614616565b905082810360408401526150488187614616565b9050828103606084015261505c8186614616565b91505060018060a01b03831660808301529695505050505050565b60608152600061508a6060830187614616565b82810360208401528481526001600160fb1b038511156150a957600080fd5b8460051b80876020840137600091016020019081526001600160a01b039390931660409290920191909152509392505050565b6060815260006150ef6060830186614616565b82810360208401526151018186614616565b91505060018060a01b0383166040830152949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261513f5761513f61511a565b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a0608082018190526000906152189083018486614f0d565b98975050505050505050565b6001600160a01b0385811682528416602082015260a06040820181905260009061525090830185614616565b82810360608401526152628185614616565b838103608090940193909352505060008152602001949350505050565b60008261528e5761528e61511a565b500690565b6000600182016152a5576152a5614edf565b5060010190565b600082516152be8184602087016144df565b9190910192915050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e2e3cbcbcadd8f810604eff883145e31aaa9d594a14126779035e077140eaec464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061043d5760003560e01c80638b3aba5711610236578063cce2f3fb1161013b578063e66f53b7116100c3578063f23a6e6111610087578063f23a6e6114610a0d578063f2fde38b14610a2c578063f7fce33414610a3f578063fcc0e38114610a47578063feb8eba514610a5c57600080fd5b8063e66f53b7146109bc578063e90956cf146109d0578063e9ec2e99146109e3578063ec342ad0146109eb578063f1d20dd4146109fa57600080fd5b8063d9d98ce41161010a578063d9d98ce414610946578063dd62ed3e14610959578063e0a8b97a1461096c578063e0b4a79a1461097f578063e4b2fb791461099257600080fd5b8063cce2f3fb14610905578063d29e27bf14610918578063d53f62171461092b578063d6ee4a931461093357600080fd5b8063aa024980116101be578063bc197c811161018d578063bc197c81146108a2578063c3cb8c14146108c1578063c45a0155146108c9578063c4a0db96146108dd578063c4ff5247146108f057600080fd5b8063aa02498014610854578063b10402ea14610869578063b579605b1461087c578063b9a2de3a1461088f57600080fd5b806395d89b411161020557806395d89b4114610800578063983d95ce146108085780639d54def61461081b578063a457c2d71461082e578063a9059cbb1461084157600080fd5b80638b3aba57146107a75780638c850814146107c85780638da5cb5b146107db5780638f878a43146107ec57600080fd5b80633950935111610347578063598647f8116102cf578063715018a611610293578063715018a61461073357806372188e3f1461073b57806378bd79351461076b578063793096581461077e5780638a4adf241461079357600080fd5b8063598647f8146106bc5780635cffe9de146106cf578063613255ab146106e25780636b948a35146106f557806370a082311461070a57600080fd5b80634fee13fc116103165780634fee13fc1461060c5780635035434a1461061f57806354fd4d5014610634578063571a26a0146106565780635877aee6146106a957600080fd5b806339509351146105be5780633d5d190c146105d157806344b28d59146105e457806345a0b652146105f957600080fd5b806318160ddd116103ca578063313ce56711610399578063313ce56714610580578063325c25a21461058f57806332d8e65b1461059957806333194c0a146105ac57806335dca76c146105b657600080fd5b806318160ddd146105245780631ba46cfd1461052c57806323b872dd1461055857806325705d8d1461056b57600080fd5b806306f26dc21161041157806306f26dc21461049a57806306fdde03146104af578063095ea7b3146104c457806313966db5146104d7578063150b7a02146104ed57600080fd5b80625181611461044257806301ffc9a71461044c578063042f186c1461047457806304a66b4814610487575b600080fd5b61044a610a64565b005b61045f61045a3660046142f4565b610ad7565b60405190151581526020015b60405180910390f35b61044a6104823660046143f6565b610b1d565b61044a6104953660046144a4565b610d7e565b6101cd5461045f90600160a01b900460ff1681565b6104b7610e14565b60405161046b919061450b565b61045f6104d236600461453e565b610ea6565b6104df610ebe565b60405190815260200161046b565b61050b6104fb36600461456a565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161046b565b6067546104df565b6101cd54610540906001600160a01b031681565b6040516001600160a01b03909116815260200161046b565b61045f6105663660046145d5565b610f46565b610573610f6a565b60405161046b9190614651565b6040516012815260200161046b565b6104df6101cc5481565b6105406105a7366004614664565b611004565b6104df6101ca5481565b6104df611040565b61045f6105cc36600461453e565b6110c7565b6104df6105df3660046146c8565b611106565b6101cd5461045f90600160b01b900460ff1681565b6104df610607366004614664565b611180565b61044a61061a366004614733565b61118e565b6101cd5461045f90600160c81b900460ff1681565b604080518082019091526006815265076312e302e360d41b60208201526104b7565b610699610664366004614664565b6101cf6020526000908152604090208054600182015460029092015490919060ff81169061010090046001600160a01b031684565b60405161046b949392919061476b565b6105406106b73660046147f8565b611338565b61044a6106ca366004614733565b6114c6565b61045f6106dd366004614843565b61172c565b6104df6106f03660046148b5565b6117d9565b6101cd5461045f90600160a81b900460ff1681565b6104df6107183660046148b5565b6001600160a01b031660009081526065602052604090205490565b61044a611801565b610743611840565b604080519586526020860194909452928401919091526060830152608082015260a00161046b565b610699610779366004614664565b6118cd565b6101cd5461045f90600160c01b900460ff1681565b6101c854610540906001600160a01b031681565b6104df6107b5366004614664565b6101c36020526000908152604090205481565b6105736107d6366004614946565b611952565b6033546001600160a01b0316610540565b6101c654610540906001600160a01b031681565b6104b7611b5c565b6105736108163660046149e0565b611b6b565b610573610829366004614a21565b611ce2565b61045f61083c36600461453e565b611e72565b61045f61084f36600461453e565b611f04565b6101cd5461045f90600160d81b900460ff1681565b6104df610877366004614a7b565b611f12565b61044a61088a366004614664565b612003565b61044a61089d366004614664565b612160565b61050b6108b0366004614ad6565b63bc197c8160e01b95945050505050565b61044a612333565b6101c754610540906001600160a01b031681565b6105736108eb366004614b83565b61233d565b6101cd5461045f90600160d01b900460ff1681565b61044a6109133660046148b5565b612386565b61044a610926366004614bc1565b612470565b6104df612564565b610573610941366004614c15565b6125eb565b6104df61095436600461453e565b61268d565b6104df610967366004614cae565b61274f565b61044a61097a366004614ce7565b61277a565b61044a61098d366004614d46565b6127f5565b6105406109a0366004614664565b6101ce602052600090815260409020546001600160a01b031681565b6101c954610540906001600160a01b031681565b61044a6109de3660046148b5565b612838565b6104df6128da565b6104df670de0b6b3a764000081565b61045f610a08366004614d7d565b6128ec565b61050b610a1b366004614db1565b63f23a6e6160e01b95945050505050565b61044a610a3a3660046148b5565b612992565b6104df612a2d565b6101cd5461045f90600160b81b900460ff1681565b6104df612ab5565b610a6c612b3d565b6101c7546101ca546040516360c1795960e11b81526001600160a01b039092169163c182f2b291610aa39160040190815260200190565b600060405180830381600087803b158015610abd57600080fd5b505af1158015610ad1573d6000803e3d6000fd5b50505050565b60006001600160e01b0319821663ce47666760e01b1480610b0857506001600160e01b031982166301ffc9a760e01b145b80610b175750610b1782612ba5565b92915050565b6000610b296001612bda565b90508015610b41576000805461ff0019166101001790555b610b49612c62565b610b538787612c91565b6001600160a01b038416610b7a5760405163d92e233d60e01b815260040160405180910390fd5b610b8c60018060018060016000612470565b6000339050806001600160a01b0316638a4adf246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf39190614e19565b6101c880546001600160a01b03199081166001600160a01b039384169081179092556101cd805482168985161790556101c9805482168a85161790556101c7805490911692841692909217909155604080516304c94c4160e31b8152905163264a6208916004818101926020929091908290030181865afa158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190614e36565b6101ca8190556101cd805461ffff60a01b1916600160a01b87151590810260ff60a81b191691909117600160a81b871515908102919091179092556203f4806101cc55604080516001600160a01b038a16815260208101929092528101919091527f18ecce5c418b882a3d89e5b6cc8100dc3383309b8e78525266fe1283a7f934d69060600160405180910390a2508015610d75576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610d86612b3d565b6101c7546101ca546040516310ccb16960e11b815260048101919091526024810187905260448101869052606481018590526084810184905260a481018390526001600160a01b039091169063219962d29060c401600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b505050505050505050565b606060688054610e2390614e4f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4f90614e4f565b8015610e9c5780601f10610e7157610100808354040283529160200191610e9c565b820191906000526020600020905b815481529060010190602001808311610e7f57829003601f168201915b5050505050905090565b600033610eb4818585612cc6565b5060019392505050565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b0390911691632206137991610efa9160040190815260200190565b60a060405180830381865afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190614e89565b509295945050505050565b600033610f54858285612dea565b610f5f858585612e5e565b506001949350505050565b60606000610f796101c461302c565b90506000816001600160401b03811115610f9557610f9561431e565b604051908082528060200260200182016040528015610fbe578160200160208202803683370190505b50905060005b82811015610ffd57610fd86101c482613036565b828281518110610fea57610fea614ec9565b6020908102919091010152600101610fc4565b5092915050565b60008181526101ce60205260409020546001600160a01b03168061103b57604051632692809160e11b815260040160405180910390fd5b919050565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b039091169163220613799161107c9160040190815260200190565b60a060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd9190614e89565b9695505050505050565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190610eb49082908690611101908790614ef5565b612cc6565b600061117785858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250339250611f12915050565b95945050505050565b6000610b176101c483613036565b6111986004613042565b6101cd54600160d81b900460ff1615806111bc57506101cd54600160a01b900460ff165b156111da57604051639bcbd04360e01b815260040160405180910390fd5b60008281526101cf6020526040812060029081015460ff169081111561120257611202614755565b1461122057604051631c2ce4fd60e01b815260040160405180910390fd5b670de0b6b3a764000081101561124957604051635069375b60e11b815260040160405180910390fd5b61125333826130e4565b60405180608001604052808281526020016101cc54426112739190614ef5565b8152600160208083018290523360409384015260008681526101cf825283902084518155908401518183015591830151600280840180549293909260ff19169184908111156112c4576112c4614755565b021790555060609190910151600290910180546001600160a01b0390921661010002610100600160a81b0319909216919091179055604080518381526020810183905233917f92db7303de5c78e58e4570f0b4acf392e3dac09394e96c4fa62b323b6337ee65910160405180910390a25050565b6000611342612b3d565b6101c6546001600160a01b03161561136d576040516344a30fbf60e01b815260040160405180910390fd5b6101c75460408051630a63bfd560e11b815290516000926001600160a01b0316916314c77faa9160048083019260209291908290030181865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190614e19565b90506000816001600160a01b031663576ff9088787876040518463ffffffff1660e01b815260040161141093929190614f36565b6020604051808303816000875af115801561142f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114539190614e19565b6101c680546001600160a01b0319166001600160a01b0383169081179091556101cd805460ff60a81b191690556040805189815260208101929092529192507fe14c63b3d4272158635bee1d1b95b51bb8de042ee95a15cbfaf2865b4d0af811910160405180910390a195945050505050565b6114d06004613042565b6101cd54600160d81b900460ff1615806114f457506101cd54600160a01b900460ff165b1561151257604051639bcbd04360e01b815260040160405180910390fd5b600160008381526101cf6020526040902060029081015460ff169081111561153c5761153c614755565b1461155a576040516358fd8d1160e01b815260040160405180910390fd5b60008281526101cf60209081526040808320546101c7548251637c513c0f60e01b815292519194936001600160a01b0390911692637c513c0f92600480830193928290030181865afa1580156115b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d89190614e36565b6115e490612710614ef5565b90506115f08183614f50565b6115fc84612710614f50565b101561161b57604051635069375b60e11b815260040160405180910390fd5b60008481526101cf602052604090206001015442811161164e5760405163283a4a6160e21b815260040160405180910390fd5b61165833856130e4565b60008581526101cf60205260409020600201546116839061010090046001600160a01b031684613232565b60008581526101cf602052604090208481556002018054610100600160a81b03191633610100021790556103846116ba4283614f6f565b116116e95760008581526101cf60205260408120600101805461038492906116e3908490614ef5565b90915550505b604080518681526020810186905233917fa83fe65d893591fe1c92845e86c5a5907f93f15e28b4e2124db434265822181b91015b60405180910390a25050505050565b60006117386005613042565b6101c8546040516306df336560e51b81526001600160a01b038881166004830152600092169063dbe66ca090602401602060405180830381865afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190614f86565b6117bb576117b6868661268d565b6117be565b60005b90506117ce878787848888613311565b979650505050505050565b60006001600160a01b03821630146117f2576000610b17565b606754610b1790600019614f6f565b6033546001600160a01b031633146118345760405162461bcd60e51b815260040161182b90614fa3565b60405180910390fd5b61183e6000613473565b565b6101c7546101ca54604051632206137960e01b8152600481019190915260009182918291829182916001600160a01b03169063220613799060240160a060405180830381865afa158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bc9190614e89565b945094509450945094509091929394565b60008181526101cf602052604081206002015481908190819060ff16818160028111156118fc576118fc614755565b0361191a576040516358fd8d1160e01b815260040160405180910390fd5b60009586526101cf60205260409095208054600182015460029092015490979196955061010090046001600160a01b03169350915050565b6060600260c954036119765760405162461bcd60e51b815260040161182b90614fd8565b600260c9556119856003613042565b6101cd54600160d81b900460ff16156119b15760405163330809f960e11b815260040160405180910390fd5b6101cd54600090600160a01b900460ff1615611a2d5760005b8651811015611a275760008682815181106119e7576119e7614ec9565b6020026020010151905080600003611a12576040516329c5442960e01b815260040160405180910390fd5b611a1c8184614ef5565b9250506001016119ca565b50611a31565b5084515b83518114158015611a4d57506101cd54600160c81b900460ff16155b15611a6b57604051631bee2d3960e11b815260040160405180910390fd5b835115801590611a8657506101cd54600160d01b900460ff16155b15611aa45760405163dc1d736760e01b815260040160405180910390fd5b600080611aaf611840565b945094505050506000865184611ac59190614f6f565b611acf9084614f50565b8751611adb9084614f50565b611ae59190614ef5565b9050611af133826134c5565b6000611afe858989613620565b9050611b0a8a8a613805565b507f66982ed4a058811a8004bdcec9adcb3671f2b4f1a788667a3a74959d7c09af3c8a8a8a848b604051611b4295949392919061500f565b60405180910390a1600160c9559998505050505050505050565b606060698054610e2390614e4f565b6060611b776002613042565b6101cd54600160d81b900460ff16611ba257604051639bcbd04360e01b815260040160405180910390fd5b8160005b81811015611c12576000858583818110611bc257611bc2614ec9565b6020908102929092013560008181526101ce909352604090922054919250506001600160a01b03163314611c0957604051631022318760e21b815260040160405180910390fd5b50600101611ba6565b50611c2e33611c2983670de0b6b3a7640000614f50565b6130e4565b6000611c38611840565b50509250505060008282611c4c9190614f50565b9050611c5833826134c5565b6000611c9984888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250613620915050565b90507f63b13f6307f284441e029836b0c22eb91eb62a7ad555670061157930ce884f4e81888833604051611cd09493929190615077565b60405180910390a19695505050505050565b6060600260c95403611d065760405162461bcd60e51b815260040161182b90614fd8565b600260c9819055611d1690613042565b6101cd54600160d81b900460ff1615611d425760405163330809f960e11b815260040160405180910390fd5b82518414158015611d5e57506101cd54600160b81b900460ff16155b15611d7c57604051635249c6e360e01b815260040160405180910390fd5b825115801590611d9757506101cd54600160c01b900460ff16155b15611db557604051631da0a2ed60e21b815260040160405180910390fd5b611dcb33611c2986670de0b6b3a7640000614f50565b600080611dd6611840565b505092509250506000855187611dec9190614f6f565b611df69084614f50565b8651611e029084614f50565b611e0c9190614ef5565b9050611e1833826134c5565b6000611e25888888613620565b90507f63b13f6307f284441e029836b0c22eb91eb62a7ad555670061157930ce884f4e818888604051611e5a939291906150dc565b60405180910390a1600160c955979650505050505050565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919083811015611ef75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161182b565b610f5f8286868403612cc6565b600033610eb4818585612e5e565b6000600260c95403611f365760405162461bcd60e51b815260040161182b90614fd8565b600260c955611f456001613042565b6101cd54600160b01b900460ff16611f70576040516317efbd6b60e01b815260040160405180910390fd5b6000611f7c8585613805565b9050611f9983611f9483670de0b6b3a7640000614f50565b613232565b600081611fa4610ebe565b611fae9190614f50565b9050611fba84826134c5565b7f1f72ad2a14447fa756b6f5aca53504645af79813493aca2d906b69e4aaeb9492868686604051611fed939291906150dc565b60405180910390a150600160c955949350505050565b61200b612b3d565b6101c760009054906101000a90046001600160a01b03166001600160a01b031663a0b335e36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561205f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120839190614e36565b81108061210657506101c760009054906101000a90046001600160a01b03166001600160a01b0316630e519ef96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121039190614e36565b81115b15612124576040516321029bc560e11b815260040160405180910390fd5b6101cc8190556040518181527f26d6292d6fb0e786778ddcd15ee4e4ee219a7b892d1bf667e1c497c85bbcddcb9060200160405180910390a150565b61216a6004613042565b6101cd54600160d81b900460ff16158061218e57506101cd54600160a01b900460ff165b156121ac57604051639bcbd04360e01b815260040160405180910390fd5b600160008281526101cf6020526040902060029081015460ff16908111156121d6576121d6614755565b146121f4576040516358fd8d1160e01b815260040160405180910390fd5b60008181526101cf602052604090206001015442101561222757604051636463738960e01b815260040160405180910390fd5b60008181526101cf60205260408120600281018054825484845560019093018490556001600160a81b0319811690915561010090046001600160a01b031691612278670de0b6b3a764000083614f6f565b905080156122a35760008481526101ce60205260409020546122a3906001600160a01b031682613232565b6040805160018082528183019092526000916020808301908036833701905050905084816000815181106122d9576122d9614ec9565b6020026020010181815250506122f160018286613620565b5060408051868152602081018590526001600160a01b038616917f46d4d7f683a950a220ec6b7660e9917988b3e3cf4afba314c532b1e8ee29944e910161171d565b61183e6000612838565b606061237e84848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250611ce2915050565b949350505050565b6033546001600160a01b031633146123b05760405162461bcd60e51b815260040161182b90614fa3565b6000670de0b6b3a76400006123c460675490565b6123ce9190615130565b9050600481106123f157604051636e58b71560e01b815260040160405180910390fd5b60408051600081526020810190915261240b828285613620565b506101cd54604080516001600160a01b0392831681526020810185905291851682820152517f1f6d756c685d4969a551099165b59f836b4d2cc7e036e623f0248c28bff91db59181900360600190a150506101cd80546001600160a01b031916905550565b612478612b3d565b6101cd805461ffff60b01b1916600160b01b88151590810260ff60b81b191691909117600160b81b8815159081029190911761ffff60c01b1916600160c01b88151590810260ff60c81b191691909117600160c81b8815159081029190911761ffff60d01b1916600160d01b88151590810260ff60d81b191691909117600160d81b88151590810291909117909655604080519586526020860194909452928401919091526060830152608082015260a08101919091527fb99086478c28bdee69303d660a2e2956e75ba132163a2224576580dbb57f74259060c00160405180910390a1505050505050565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b03909116916322061379916125a09160040190815260200190565b60a060405180830381865afa1580156125bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e19190614e89565b5095945050505050565b60606117ce87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250339250611952915050565b60006001600160a01b03831630146126b85760405163c1ab6dc160e01b815260040160405180910390fd5b612710826101c760009054906101000a90046001600160a01b03166001600160a01b0316634847cdc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127349190614e36565b61273e9190614f50565b6127489190615130565b9392505050565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b612782612b3d565b610ad184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f88018190048102820181019092528681529250869150859081908401838280828437600092019190915250613a0092505050565b6033546001600160a01b0316331461281f5760405162461bcd60e51b815260040161182b90614fa3565b61282982846130e4565b6128338184613232565b505050565b612840612b3d565b6101c9546001600160a01b0380831691160361286f57604051635e39359760e01b815260040160405180910390fd5b6101c954604080516001600160a01b03928316815291831660208301527fbc21df13ae8a32d7d89d87c70c0d02240cd4fb9554c57522bbbf6f27bfc2dacd910160405180910390a16101c980546001600160a01b0319166001600160a01b0392909216919091179055565b60006128e76101c461302c565b905090565b6101cd54600090600160a81b900460ff161561290a57506001919050565b6101c6546001600160a01b0316806129255750600092915050565b6040516384ca9f8560e01b81526001600160a01b038216906384ca9f8590612951908690600401614651565b602060405180830381865afa15801561296e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127489190614f86565b6033546001600160a01b031633146129bc5760405162461bcd60e51b815260040161182b90614fa3565b6001600160a01b038116612a215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161182b565b612a2a81613473565b50565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b0390911691632206137991612a699160040190815260200190565b60a060405180830381865afa158015612a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaa9190614e89565b509195945050505050565b6101c7546101ca54604051632206137960e01b815260009283926001600160a01b0390911691632206137991612af19160040190815260200190565b60a060405180830381865afa158015612b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b329190614e89565b509095945050505050565b6101c9546001600160a01b0316612b79576033546001600160a01b0316331461183e576040516330cd747160e01b815260040160405180910390fd5b6101c9546001600160a01b0316331461183e576040516356b381a560e01b815260040160405180910390fd5b60006001600160e01b03198216630271189760e51b1480610b1757506301ffc9a760e01b6001600160e01b0319831614610b17565b60008054610100900460ff1615612c21578160ff166001148015612bfd5750303b155b612c195760405162461bcd60e51b815260040161182b90615144565b506000919050565b60005460ff808416911610612c485760405162461bcd60e51b815260040161182b90615144565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16612c895760405162461bcd60e51b815260040161182b90615192565b61183e613a27565b600054610100900460ff16612cb85760405162461bcd60e51b815260040161182b90615192565b612cc28282613a57565b5050565b6001600160a01b038316612d285760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161182b565b6001600160a01b038216612d895760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161182b565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000612df6848461274f565b90506000198114610ad15781811015612e515760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161182b565b610ad18484848403612cc6565b6001600160a01b038316612ec25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161182b565b6001600160a01b038216612f245760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161182b565b6001600160a01b03831660009081526065602052604090205481811015612f9c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161182b565b6001600160a01b03808516600090815260656020526040808220858503905591851681529081208054849290612fd3908490614ef5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161301f91815260200190565b60405180910390a3610ad1565b6000610b17825490565b60006127488383613a7e565b6033546001600160a01b031633148015906130c657506101c754604051632f7ca90f60e21b8152600481018390526001600160a01b039091169063bdf2a43c90602401602060405180830381865afa1580156130a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c69190614f86565b15612a2a576040516313d0ff5960e31b815260040160405180910390fd5b6001600160a01b0382166131445760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161182b565b6001600160a01b038216600090815260656020526040902054818110156131b85760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161182b565b6001600160a01b03831660009081526065602052604081208383039055606780548492906131e7908490614f6f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b0382166132885760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161182b565b806067600082825461329a9190614ef5565b90915550506001600160a01b038216600090815260656020526040812080548392906132c7908490614ef5565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600061331c866117d9565b85111561333c57604051634b29c39b60e11b815260040160405180910390fd5b6133468786613232565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038916906323e30c8b9061339e9033908b908b908b908b908b906004016151dd565b6020604051808303816000875af11580156133bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e19190614e36565b146133ff57604051637679356b60e01b815260040160405180910390fd5b600061340b883061274f565b9050806134188688614ef5565b111561343757604051633fe269db60e11b815260040160405180910390fd5b6134518830876134478a86614f6f565b6111019190614f6f565b61345b88876130e4565b61346588866134c5565b506001979650505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806000036134d1575050565b6101c8546040516306df336560e51b81523360048201526001600160a01b0390911690819063dbe66ca090602401602060405180830381865afa15801561351c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135409190614f86565b1561354a57505050565b6000816001600160a01b0316630d43e8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561358a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ae9190614e19565b90506135bb848285612e5e565b6101ca546040516391c05b0b60e01b815260048101919091526001600160a01b038216906391c05b0b90602401600060405180830381600087803b15801561360257600080fd5b505af1158015613616573d6000803e3d6000fd5b5050505050505050565b6101cd5460609060ff600160a01b820416906001600160a01b03166000866001600160401b038111156136555761365561431e565b60405190808252806020026020018201604052801561367e578160200160208202803683370190505b50865190915060005b888110156137f05760008282106136a5576136a0613aa8565b6136c0565b8882815181106136b7576136b7614ec9565b60200260200101515b9050808483815181106136d5576136d5614ec9565b60200260200101818152505085156137b25760008181526101c360205260408120805460019290613707908490614f6f565b909155505060008181526101c3602052604081205490036137305761372e6101c482613b46565b505b604051637921219560e11b81523060048201526001600160a01b038981166024830152604482018390526001606483015260a06084830152600060a483015286169063f242432a9060c401600060405180830381600087803b15801561379557600080fd5b505af11580156137a9573d6000803e3d6000fd5b505050506137e7565b6137be6101c482613b46565b5060008181526101ce6020526040902080546001600160a01b03191690556137e7858983613b52565b50600101613687565b506137fa82613d27565b509695505050505050565b6000613810836128ec565b61382d57604051631aecbf0160e01b815260040160405180910390fd5b82516101cd54600160a01b900460ff1615613980576101cd54604051631759616b60e11b81526001600160a01b0390911690632eb2c2d690613879903390309089908990600401615224565b600060405180830381600087803b15801561389357600080fd5b505af11580156138a7573d6000803e3d6000fd5b505050506000805b828110156139765760008682815181106138cb576138cb614ec9565b6020026020010151905060008683815181106138e9576138e9614ec9565b6020026020010151905080600003613914576040516329c5442960e01b815260040160405180910390fd5b60008281526101c360205260408120549003613938576139366101c483613d9f565b505b60008281526101c3602052604081208054839290613957908490614ef5565b9091555061396790508185614ef5565b935082600101925050506138af565b509150610b179050565b6101cd546001600160a01b031660005b828110156139f55760008682815181106139ac576139ac614ec9565b602002602001015190506139c08382613dab565b60008181526101ce6020526040902080546001600160a01b031916331790556139eb6101c482613d9f565b5050600101613990565b508192505050610b17565b8151613a1390606890602085019061425b565b50805161283390606990602084019061425b565b600054610100900460ff16613a4e5760405162461bcd60e51b815260040161182b90615192565b61183e33613473565b600054610100900460ff16613a005760405162461bcd60e51b815260040161182b90615192565b6000826000018281548110613a9557613a95614ec9565b9060005260206000200154905092915050565b600080613ab66101c461302c565b613ac1600143614f6f565b6101cb54604080519240602084015282015241606090811b6bffffffffffffffffffffffff19169082015244607482015242609482015260b4016040516020818303038152906040528051906020012060001c613b1e919061527f565b90506101cb60008154613b3090615293565b90915550613b406101c482613036565b91505090565b60006127488383614119565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60607306012c8cf97bead5deae237070f9587f8e7a266c196001600160a01b03871601613bf0576040516001600160a01b03861660248201526044810185905260640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790529050613ca5565b816001600160a01b0316866001600160a01b031603613c56576040516001600160a01b03861660248201526044810185905260640160408051601f198184030181529190526020810180516001600160e01b03166322dca8bb60e21b1790529050613ca5565b6040513060248201526001600160a01b03861660448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b17905290505b600080876001600160a01b031683604051613cc091906152ac565b6000604051808303816000865af19150503d8060008114613cfd576040519150601f19603f3d011682016040523d82523d6000602084013e613d02565b606091505b5091509150818190610e095760405162461bcd60e51b815260040161182b919061450b565b6101c6546001600160a01b031680613d3d575050565b604051632f17cda960e11b81526001600160a01b03821690635e2f9b5290613d69908590600401614651565b600060405180830381600087803b158015613d8357600080fd5b505af1158015613d97573d6000803e3d6000fd5b505050505050565b6000612748838361420c565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60607306012c8cf97bead5deae237070f9587f8e7a266c196001600160a01b03861601613e46576040513360248201523060448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790529050614097565b816001600160a01b0316856001600160a01b031603613f9157600084604051602401613e7491815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316630b02f02d60e31b1790525190915060009081906001600160a01b03891690613ebd9085906152ac565b600060405180830381855afa9150503d8060008114613ef8576040519150601f19603f3d011682016040523d82523d6000602084013e613efd565b606091505b5091509150600081806020019051810190613f189190614e19565b9050821580613f3057506001600160a01b0381163314155b15613f4e57604051631022318760e21b815260040160405180910390fd5b6040516024810189905260440160408051601f198184030181529190526020810180516001600160e01b031663104c9fd360e31b17905294506140979350505050565b6101cd546040516331a9108f60e11b81526004810186905230916001600160a01b031690636352211e90602401602060405180830381865afa158015613fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fff9190614e19565b6001600160a01b0316036140515761402c6101c48560008181526001830160205260408120541515612748565b1561404a5760405163e208540b60e01b815260040160405180910390fd5b5050505050565b6040513360248201523060448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b17905290505b600080866001600160a01b0316836040516140b291906152ac565b6000604051808303816000865af19150503d80600081146140ef576040519150601f19603f3d011682016040523d82523d6000602084013e6140f4565b606091505b50915091508181906136165760405162461bcd60e51b815260040161182b919061450b565b6000818152600183016020526040812054801561420257600061413d600183614f6f565b855490915060009061415190600190614f6f565b90508181146141b657600086600001828154811061417157614171614ec9565b906000526020600020015490508087600001848154811061419457614194614ec9565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806141c7576141c76152c8565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b17565b6000915050610b17565b600081815260018301602052604081205461425357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b17565b506000610b17565b82805461426790614e4f565b90600052602060002090601f01602090048101928261428957600085556142cf565b82601f106142a257805160ff19168380011785556142cf565b828001600101855582156142cf579182015b828111156142cf5782518255916020019190600101906142b4565b506142db9291506142df565b5090565b5b808211156142db57600081556001016142e0565b60006020828403121561430657600080fd5b81356001600160e01b03198116811461274857600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561435c5761435c61431e565b604052919050565b600082601f83011261437557600080fd5b81356001600160401b0381111561438e5761438e61431e565b6143a1601f8201601f1916602001614334565b8181528460208386010111156143b657600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b0381168114612a2a57600080fd5b8015158114612a2a57600080fd5b60008060008060008060c0878903121561440f57600080fd5b86356001600160401b038082111561442657600080fd5b6144328a838b01614364565b9750602089013591508082111561444857600080fd5b5061445589828a01614364565b9550506040870135614466816143d3565b93506060870135614476816143d3565b92506080870135614486816143e8565b915060a0870135614496816143e8565b809150509295509295509295565b600080600080600060a086880312156144bc57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60005b838110156144fa5781810151838201526020016144e2565b83811115610ad15750506000910152565b602081526000825180602084015261452a8160408501602087016144df565b601f01601f19169190910160400192915050565b6000806040838503121561455157600080fd5b823561455c816143d3565b946020939093013593505050565b6000806000806080858703121561458057600080fd5b843561458b816143d3565b9350602085013561459b816143d3565b92506040850135915060608501356001600160401b038111156145bd57600080fd5b6145c987828801614364565b91505092959194509250565b6000806000606084860312156145ea57600080fd5b83356145f5816143d3565b92506020840135614605816143d3565b929592945050506040919091013590565b600081518084526020808501945080840160005b838110156146465781518752958201959082019060010161462a565b509495945050505050565b6020815260006127486020830184614616565b60006020828403121561467657600080fd5b5035919050565b60008083601f84011261468f57600080fd5b5081356001600160401b038111156146a657600080fd5b6020830191508360208260051b85010111156146c157600080fd5b9250929050565b600080600080604085870312156146de57600080fd5b84356001600160401b03808211156146f557600080fd5b6147018883890161467d565b9096509450602087013591508082111561471a57600080fd5b506147278782880161467d565b95989497509550505050565b6000806040838503121561474657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b84815260208101849052608081016003841061479757634e487b7160e01b600052602160045260246000fd5b60408201939093526001600160a01b039190911660609091015292915050565b60008083601f8401126147c957600080fd5b5081356001600160401b038111156147e057600080fd5b6020830191508360208285010111156146c157600080fd5b60008060006040848603121561480d57600080fd5b8335925060208401356001600160401b0381111561482a57600080fd5b614836868287016147b7565b9497909650939450505050565b60008060008060006080868803121561485b57600080fd5b8535614866816143d3565b94506020860135614876816143d3565b93506040860135925060608601356001600160401b0381111561489857600080fd5b6148a4888289016147b7565b969995985093965092949392505050565b6000602082840312156148c757600080fd5b8135612748816143d3565b600082601f8301126148e357600080fd5b813560206001600160401b038211156148fe576148fe61431e565b8160051b61490d828201614334565b928352848101820192828101908785111561492757600080fd5b83870192505b848310156117ce5782358252918301919083019061492d565b6000806000806080858703121561495c57600080fd5b84356001600160401b038082111561497357600080fd5b61497f888389016148d2565b9550602087013591508082111561499557600080fd5b6149a1888389016148d2565b945060408701359150808211156149b757600080fd5b506149c4878288016148d2565b92505060608501356149d5816143d3565b939692955090935050565b600080602083850312156149f357600080fd5b82356001600160401b03811115614a0957600080fd5b614a158582860161467d565b90969095509350505050565b600080600060608486031215614a3657600080fd5b8335925060208401356001600160401b03811115614a5357600080fd5b614a5f868287016148d2565b9250506040840135614a70816143d3565b809150509250925092565b600080600060608486031215614a9057600080fd5b83356001600160401b0380821115614aa757600080fd5b614ab3878388016148d2565b94506020860135915080821115614ac957600080fd5b50614a5f868287016148d2565b600080600080600060a08688031215614aee57600080fd5b8535614af9816143d3565b94506020860135614b09816143d3565b935060408601356001600160401b0380821115614b2557600080fd5b614b3189838a016148d2565b94506060880135915080821115614b4757600080fd5b614b5389838a016148d2565b93506080880135915080821115614b6957600080fd5b50614b7688828901614364565b9150509295509295909350565b600080600060408486031215614b9857600080fd5b8335925060208401356001600160401b03811115614bb557600080fd5b6148368682870161467d565b60008060008060008060c08789031215614bda57600080fd5b8635614be5816143e8565b95506020870135614bf5816143e8565b94506040870135614c05816143e8565b93506060870135614476816143e8565b60008060008060008060608789031215614c2e57600080fd5b86356001600160401b0380821115614c4557600080fd5b614c518a838b0161467d565b90985096506020890135915080821115614c6a57600080fd5b614c768a838b0161467d565b90965094506040890135915080821115614c8f57600080fd5b50614c9c89828a0161467d565b979a9699509497509295939492505050565b60008060408385031215614cc157600080fd5b8235614ccc816143d3565b91506020830135614cdc816143d3565b809150509250929050565b60008060008060408587031215614cfd57600080fd5b84356001600160401b0380821115614d1457600080fd5b614d20888389016147b7565b90965094506020870135915080821115614d3957600080fd5b50614727878288016147b7565b600080600060608486031215614d5b57600080fd5b833592506020840135614d6d816143d3565b91506040840135614a70816143d3565b600060208284031215614d8f57600080fd5b81356001600160401b03811115614da557600080fd5b61237e848285016148d2565b600080600080600060a08688031215614dc957600080fd5b8535614dd4816143d3565b94506020860135614de4816143d3565b9350604086013592506060860135915060808601356001600160401b03811115614e0d57600080fd5b614b7688828901614364565b600060208284031215614e2b57600080fd5b8151612748816143d3565b600060208284031215614e4857600080fd5b5051919050565b600181811c90821680614e6357607f821691505b602082108103614e8357634e487b7160e01b600052602260045260246000fd5b50919050565b600080600080600060a08688031215614ea157600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614f0857614f08614edf565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000611177604083018486614f0d565b6000816000190483118215151615614f6a57614f6a614edf565b500290565b600082821015614f8157614f81614edf565b500390565b600060208284031215614f9857600080fd5b8151612748816143e8565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60a08152600061502260a0830188614616565b82810360208401526150348188614616565b905082810360408401526150488187614616565b9050828103606084015261505c8186614616565b91505060018060a01b03831660808301529695505050505050565b60608152600061508a6060830187614616565b82810360208401528481526001600160fb1b038511156150a957600080fd5b8460051b80876020840137600091016020019081526001600160a01b039390931660409290920191909152509392505050565b6060815260006150ef6060830186614616565b82810360208401526151018186614616565b91505060018060a01b0383166040830152949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261513f5761513f61511a565b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a0608082018190526000906152189083018486614f0d565b98975050505050505050565b6001600160a01b0385811682528416602082015260a06040820181905260009061525090830185614616565b82810360608401526152628185614616565b838103608090940193909352505060008152602001949350505050565b60008261528e5761528e61511a565b500690565b6000600182016152a5576152a5614edf565b5060010190565b600082516152be8184602087016144df565b9190910192915050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e2e3cbcbcadd8f810604eff883145e31aaa9d594a14126779035e077140eaec464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "maxFlashLoan(address)": {
        "details": "Returns the maximum amount of tokens available for loan.",
        "params": {
          "token": "The address of the token that is requested."
        },
        "returns": {
          "_0": "The amont of token that can be loaned."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAuctionLength(uint256)": {
        "params": {
          "_auctionLength": "the new base price"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AuctionStarted(address,uint256,uint256)": {
        "notice": "An event emitted when an auction starts"
      },
      "AuctionWon(address,uint256,uint256)": {
        "notice": "An event emitted when an auction is won"
      },
      "BidMade(address,uint256,uint256)": {
        "notice": "An event emitted when a bid is made"
      }
    },
    "kind": "user",
    "methods": {
      "auctionLength()": {
        "notice": "the length of auctions"
      },
      "depositors(uint256)": {
        "notice": "only used for ERC-721 tokens"
      },
      "setAuctionLength(uint256)": {
        "notice": "allow curator to update the auction length"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 274,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 277,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2270,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 20218,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20224,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "_allowances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 20226,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 20228,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "_name",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 20230,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "_symbol",
        "offset": 0,
        "slot": "105",
        "type": "t_string_storage"
      },
      {
        "astId": 20827,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 20198,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 534,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 578,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1985,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2314,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 866,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 812,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7612,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "quantity1155",
        "offset": 0,
        "slot": "451",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7615,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "holdings",
        "offset": 0,
        "slot": "452",
        "type": "t_struct(UintSet)2796_storage"
      },
      {
        "astId": 7619,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "eligibilityStorage",
        "offset": 0,
        "slot": "454",
        "type": "t_contract(IEligibility)15014"
      },
      {
        "astId": 7623,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "factory",
        "offset": 0,
        "slot": "455",
        "type": "t_contract(IFNFTCollectionFactory)15903"
      },
      {
        "astId": 7627,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "vaultManager",
        "offset": 0,
        "slot": "456",
        "type": "t_contract(IVaultManager)17110"
      },
      {
        "astId": 7630,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "curator",
        "offset": 0,
        "slot": "457",
        "type": "t_address"
      },
      {
        "astId": 7633,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "vaultId",
        "offset": 0,
        "slot": "458",
        "type": "t_uint256"
      },
      {
        "astId": 7635,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "randNonce",
        "offset": 0,
        "slot": "459",
        "type": "t_uint256"
      },
      {
        "astId": 7639,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "auctionLength",
        "offset": 0,
        "slot": "460",
        "type": "t_uint256"
      },
      {
        "astId": 7642,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "assetAddress",
        "offset": 0,
        "slot": "461",
        "type": "t_address"
      },
      {
        "astId": 7645,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "is1155",
        "offset": 20,
        "slot": "461",
        "type": "t_bool"
      },
      {
        "astId": 7648,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "allowAllItems",
        "offset": 21,
        "slot": "461",
        "type": "t_bool"
      },
      {
        "astId": 7651,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "enableMint",
        "offset": 22,
        "slot": "461",
        "type": "t_bool"
      },
      {
        "astId": 7654,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "enableRandomRedeem",
        "offset": 23,
        "slot": "461",
        "type": "t_bool"
      },
      {
        "astId": 7657,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "enableTargetRedeem",
        "offset": 24,
        "slot": "461",
        "type": "t_bool"
      },
      {
        "astId": 7660,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "enableRandomSwap",
        "offset": 25,
        "slot": "461",
        "type": "t_bool"
      },
      {
        "astId": 7663,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "enableTargetSwap",
        "offset": 26,
        "slot": "461",
        "type": "t_bool"
      },
      {
        "astId": 7666,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "enableBid",
        "offset": 27,
        "slot": "461",
        "type": "t_bool"
      },
      {
        "astId": 7671,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "depositors",
        "offset": 0,
        "slot": "462",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7676,
        "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
        "label": "auctions",
        "offset": 0,
        "slot": "463",
        "type": "t_mapping(t_uint256,t_struct(Auction)15117_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IEligibility)15014": {
        "encoding": "inplace",
        "label": "contract IEligibility",
        "numberOfBytes": "20"
      },
      "t_contract(IFNFTCollectionFactory)15903": {
        "encoding": "inplace",
        "label": "contract IFNFTCollectionFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)17110": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)15107": {
        "encoding": "inplace",
        "label": "enum IFNFTCollection.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Auction)15117_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IFNFTCollection.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)15117_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)15117_storage": {
        "encoding": "inplace",
        "label": "struct IFNFTCollection.Auction",
        "members": [
          {
            "astId": 15109,
            "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
            "label": "livePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15111,
            "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15114,
            "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
            "label": "state",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(AuctionState)15107"
          },
          {
            "astId": 15116,
            "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
            "label": "winning",
            "offset": 1,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2338_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2333,
            "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2337,
            "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2796_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 2795,
            "contract": "src/contracts/FNFTCollection.sol:FNFTCollection",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2338_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}