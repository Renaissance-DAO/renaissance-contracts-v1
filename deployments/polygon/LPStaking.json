{
  "address": "0x8f74973e4ff9096612e460F0b297360d668F2CD3",
  "abi": [
    {
      "inputs": [],
      "name": "LPStakingXTokenAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDeployingProperDistro",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExcludedFromFees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToMigrate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimelockTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultManagerAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultManagerNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "xToken",
          "type": "address"
        }
      ],
      "name": "FeesReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "xToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "LPDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isGuardian",
          "type": "bool"
        }
      ],
      "name": "SetIsGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "xToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "StakingPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "xToken",
          "type": "address"
        }
      ],
      "name": "StakingPoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldStakingTokenProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newStakingTokenProvider",
          "type": "address"
        }
      ],
      "name": "StakingTokenProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "xToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "XTokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingTokenProvider",
          "type": "address"
        }
      ],
      "name": "__LPStaking__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "addPoolForVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "vaultIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimMultipleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimRewardsTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        }
      ],
      "name": "emergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        }
      ],
      "name": "emergencyExitAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "lockedLPBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "lockedUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStakingXToken",
      "outputs": [
        {
          "internalType": "contract LPStakingXTokenUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "onlyOwnerIfPaused",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "receiveRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "retrieveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isGuardian",
          "type": "bool"
        }
      ],
      "name": "setIsGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingTokenProvider",
          "type": "address"
        }
      ],
      "name": "setStakingTokenProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingTokenProvider",
      "outputs": [
        {
          "internalType": "contract IStakingTokenProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelockLength",
          "type": "uint256"
        }
      ],
      "name": "timelockDepositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "updatePoolForVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "vaultIds",
          "type": "uint256[]"
        }
      ],
      "name": "updatePoolForVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultStakingInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "baseToken",
              "type": "address"
            }
          ],
          "internalType": "struct ILPStaking.StakingPool",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "name": "xToken",
      "outputs": [
        {
          "internalType": "contract LPStakingXTokenUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "xToken",
      "outputs": [
        {
          "internalType": "contract LPStakingXTokenUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "xTokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d54874a6ad1f09d4491b5a57aa5199117328e707b0589bdf80d1e3cc1210f15",
  "receipt": {
    "to": null,
    "from": "0xB249c8Bbb7D1e8833c3cd9dd9Ebe6aCE798a9D8C",
    "contractAddress": "0x8f74973e4ff9096612e460F0b297360d668F2CD3",
    "transactionIndex": 0,
    "gasUsed": "3872098",
    "logsBloom": "0x
    "blockHash": "0x1e8869ca6a049f2af6d24bc8c78610fecbe715e2e9fd9d7ac35baf22d8303ad8",
    "transactionHash": "0x7d54874a6ad1f09d4491b5a57aa5199117328e707b0589bdf80d1e3cc1210f15",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31738986,
        "transactionHash": "0x7d54874a6ad1f09d4491b5a57aa5199117328e707b0589bdf80d1e3cc1210f15",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b249c8bbb7d1e8833c3cd9dd9ebe6ace798a9d8c",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000006b78e925aa89741c000000000000000000000000000000000000000000000002312a7cf0d7dc415000000000000000000000000000000000000000000000113875a91f5b98d4498c000000000000000000000000000000000000000000000001c5b193cb2d52cd34000000000000000000000000000000000000000000001138e1220881435dbda8",
        "logIndex": 0,
        "blockHash": "0x1e8869ca6a049f2af6d24bc8c78610fecbe715e2e9fd9d7ac35baf22d8303ad8"
      }
    ],
    "blockNumber": 31738986,
    "cumulativeGasUsed": "3872098",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf0ff9e6b7fc2e915dfac7a0da096a36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LPStakingXTokenAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDeployingProperDistro\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExcludedFromFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToMigrate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimelockTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultManagerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultManagerNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"}],\"name\":\"FeesReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LPDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGuardian\",\"type\":\"bool\"}],\"name\":\"SetIsGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"StakingPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"}],\"name\":\"StakingPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStakingTokenProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStakingTokenProvider\",\"type\":\"address\"}],\"name\":\"StakingTokenProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"XTokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingTokenProvider\",\"type\":\"address\"}],\"name\":\"__LPStaking__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"addPoolForVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vaultIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMultipleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardsTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"name\":\"emergencyExitAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"lockedLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"lockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingXToken\",\"outputs\":[{\"internalType\":\"contract LPStakingXTokenUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"onlyOwnerIfPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isGuardian\",\"type\":\"bool\"}],\"name\":\"setIsGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingTokenProvider\",\"type\":\"address\"}],\"name\":\"setStakingTokenProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenProvider\",\"outputs\":[{\"internalType\":\"contract IStakingTokenProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockLength\",\"type\":\"uint256\"}],\"name\":\"timelockDepositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"updatePoolForVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vaultIds\",\"type\":\"uint256[]\"}],\"name\":\"updatePoolForVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultStakingInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"internalType\":\"struct ILPStaking.StakingPool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"xToken\",\"outputs\":[{\"internalType\":\"contract LPStakingXTokenUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"xToken\",\"outputs\":[{\"internalType\":\"contract LPStakingXTokenUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"xTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/LPStaking.sol\":\"LPStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xe26a9d6acdb88e0b83c7659f9c809847da6996528dc8a4e6f0ed14e395dd1657\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x45fe5b6e09537c84248325b6cb3595aed7752b07425dfe136351234f2d8130dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xebe3f8a59f0f1c96344a05edb984ef666ee4207e993cca99af3808f1de8771b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"src/contracts/LPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ILPStaking.sol\\\";\\nimport \\\"./interfaces/IStakingTokenProvider.sol\\\";\\nimport \\\"./interfaces/IVaultManager.sol\\\";\\nimport \\\"./token/LPStakingXTokenUpgradeable.sol\\\";\\nimport \\\"./util/Pausable.sol\\\";\\n\\n// Pausing codes for LP staking are:\\n// 10: Deposit\\n\\ncontract LPStaking is ILPStaking, Pausable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    mapping(uint256 => StakingPool) public override vaultStakingInfo;\\n\\n    IStakingTokenProvider public override stakingTokenProvider;\\n    LPStakingXTokenUpgradeable public override lpStakingXToken;\\n    IVaultManager public override vaultManager;\\n\\n    function __LPStaking__init(address _vaultManager, address _stakingTokenProvider) external override initializer {\\n        __Ownable_init();\\n        if (_stakingTokenProvider == address(0)) revert ZeroAddress();\\n        if (address(lpStakingXToken) != address(0)) revert LPStakingXTokenAlreadySet();\\n        vaultManager = IVaultManager(_vaultManager);\\n        stakingTokenProvider = IStakingTokenProvider(_stakingTokenProvider);\\n        lpStakingXToken = new LPStakingXTokenUpgradeable();\\n        lpStakingXToken.__LPStakingXToken_init(IERC20Upgradeable(address(0)), \\\"\\\", \\\"\\\");\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != owner() && msg.sender != vaultManager.feeDistributor()) revert Unauthorized();\\n        _;\\n    }\\n\\n    function addPoolForVault(uint256 vaultId) external override onlyAdmin {\\n        if (address(vaultManager) == address(0)) revert VaultManagerNotSet();\\n        if (vaultStakingInfo[vaultId].stakingToken != address(0)) revert PoolAlreadyExists();\\n        address _baseToken = vaultManager.vault(vaultId);\\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(_baseToken);\\n        StakingPool memory pool = StakingPool(_stakingToken, _baseToken);\\n        vaultStakingInfo[vaultId] = pool;\\n        address newXToken = _deployDividendToken(pool);\\n        emit StakingPoolCreated(vaultId, newXToken, _baseToken);\\n    }\\n\\n    function deposit(uint256 vaultId, uint256 amount) external override {\\n        onlyOwnerIfPaused(10);\\n        // Check the pool in case its been updated.\\n        updatePoolForVault(vaultId);\\n\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        if (pool.stakingToken == address(0)) revert PoolDoesNotExist();\\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(msg.sender, address(this), amount);\\n        LPStakingXTokenUpgradeable _xToken = xToken(pool);\\n\\n        // If the user has an existing timelock, check if it is in the future.\\n        uint256 currentTimelock = _xToken.timelockUntil(msg.sender);\\n        if (currentTimelock > block.timestamp) {\\n            // Maintain the same timelock if they already have one.\\n            // We do this instead of patching in the token because\\n            // the reward distribution token contracts as currently deployed are not upgradeable.\\n            _xToken.timelockMint(msg.sender, amount, currentTimelock-block.timestamp);\\n        } else {\\n            // Timelock for 2 seconds if they don't already have a timelock to prevent flash loans.\\n            _xToken.timelockMint(msg.sender, amount, 2);\\n        }\\n\\n        emit LPDeposited(vaultId, amount, address(_xToken), msg.sender);\\n    }\\n\\n    function claimMultipleRewards(uint256[] calldata vaultIds) external override {\\n        uint256 length = vaultIds.length;\\n        for (uint256 i; i < length;) {\\n            claimRewardsTo(vaultIds[i], msg.sender);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function emergencyExit(address _stakingToken, address _baseToken) external override {\\n        StakingPool memory pool = StakingPool(_stakingToken, _baseToken);\\n        LPStakingXTokenUpgradeable dist = xToken(pool);\\n        if (!_isContract(address(dist))) revert NotAPool();\\n        _withdraw(pool, dist.balanceOf(msg.sender), msg.sender);\\n    }\\n\\n    function emergencyExitAndClaim(address _stakingToken, address _baseToken) external override {\\n        StakingPool memory pool = StakingPool(_stakingToken, _baseToken);\\n        LPStakingXTokenUpgradeable dist = xToken(pool);\\n        if (!_isContract(address(dist))) revert NotAPool();\\n        _claimRewards(pool, msg.sender);\\n        _withdraw(pool, dist.balanceOf(msg.sender), msg.sender);\\n    }\\n\\n    function exit(uint256 vaultId) external override {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        _claimRewards(pool, msg.sender);\\n        _withdraw(pool, balanceOf(vaultId, msg.sender), msg.sender);\\n    }\\n\\n    function lockedLPBalance(uint256 vaultId, address who) external view override returns (uint256) {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        LPStakingXTokenUpgradeable _xToken = xToken(pool);\\n        if(block.timestamp > _xToken.timelockUntil(who)) {\\n            return 0;\\n        }\\n        return _xToken.balanceOf(who);\\n    }\\n\\n    function lockedUntil(uint256 vaultId, address who) external view override returns (uint256) {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        LPStakingXTokenUpgradeable _xToken = xToken(pool);\\n        return _xToken.timelockUntil(who);\\n    }\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount) external override onlyAdmin returns (bool) {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        if (pool.stakingToken == address(0)) {\\n            // In case the pair is updated, but not yet\\n            return false;\\n        }\\n\\n        LPStakingXTokenUpgradeable _xToken = xToken(pool);\\n        // Don't distribute rewards unless there are people to distribute to.\\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\\n        if (!_isContract(address(_xToken)) || _xToken.totalSupply() == 0) {\\n            return false;\\n        }\\n        // We \\\"pull\\\" to the dividend tokens so the vault only needs to approve this contract.\\n        IERC20Upgradeable(pool.baseToken).safeTransferFrom(msg.sender, address(_xToken), amount);\\n        _xToken.distributeRewards(amount);\\n        emit FeesReceived(vaultId, amount, address(_xToken));\\n        return true;\\n    }\\n\\n    function xToken(uint256 vaultId) external view override returns (LPStakingXTokenUpgradeable) {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        if (pool.stakingToken == address(0)) {\\n            return LPStakingXTokenUpgradeable(address(0));\\n        }\\n        return xToken(pool);\\n    }\\n\\n    function setStakingTokenProvider(address _stakingTokenProvider) external override onlyOwner {\\n        if (_stakingTokenProvider == address(0)) revert ZeroAddress();\\n        emit StakingTokenProviderUpdated(address(stakingTokenProvider), _stakingTokenProvider);\\n        stakingTokenProvider = IStakingTokenProvider(_stakingTokenProvider);\\n    }\\n\\n    function timelockDepositFor(uint256 vaultId, address account, uint256 amount, uint256 timelockLength) external override {\\n        if (timelockLength >= 2592000) revert TimelockTooLong();\\n        if (!vaultManager.excludedFromFees(msg.sender)) revert NotExcludedFromFees();\\n        onlyOwnerIfPaused(10);\\n        // Check the pool in case its been updated.\\n        updatePoolForVault(vaultId);\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        if (pool.stakingToken == address(0)) revert PoolDoesNotExist();\\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(msg.sender, address(this), amount);\\n        xToken(pool).timelockMint(account, amount, timelockLength);\\n    }\\n\\n    // In case the provider changes, this lets the pool be updated. Anyone can call it.\\n    function updatePoolForVault(uint256 vaultId) public override {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        // Not letting people use this function to create new pools.\\n        if (pool.stakingToken == address(0)) revert PoolDoesNotExist();\\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(pool.baseToken);\\n        StakingPool memory newPool = StakingPool(_stakingToken, pool.baseToken);\\n        vaultStakingInfo[vaultId] = newPool;\\n\\n        // If the pool is already deployed, ignore the update.\\n        address addr = address(xToken(newPool));\\n        if (_isContract(addr)) {\\n            return;\\n        }\\n        address newXToken = _deployDividendToken(newPool);\\n        emit StakingPoolUpdated(vaultId, newXToken);\\n    }\\n\\n    function updatePoolForVaults(uint256[] calldata vaultIds) external override {\\n        uint256 length = vaultIds.length;\\n        for (uint256 i; i < length;) {\\n            updatePoolForVault(vaultIds[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function withdrawTo(uint256 vaultId, uint256 amount, address to) external override {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        _claimRewards(pool, to);\\n        _withdraw(pool, amount, to);\\n\\n        emit XTokenWithdrawn(vaultId, amount, address(xToken(pool)), to);\\n    }\\n\\n    function balanceOf(uint256 vaultId, address addr) public view override returns (uint256) {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        LPStakingXTokenUpgradeable _xToken = xToken(pool);\\n        if (!_isContract(address(_xToken))) revert NotAPool();\\n        return _xToken.balanceOf(addr);\\n    }\\n\\n    function claimRewardsTo(uint256 vaultId, address to) public override {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        _claimRewards(pool, to);\\n    }\\n\\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\\n    function xToken(StakingPool memory pool) public view override returns (LPStakingXTokenUpgradeable) {\\n        bytes32 salt = keccak256(abi.encodePacked(pool.stakingToken, pool.baseToken, uint256(2) /* small nonce to change tokens */));\\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(address(lpStakingXToken), salt);\\n        return LPStakingXTokenUpgradeable(tokenAddr);\\n    }\\n\\n    function xTokenAddr(address stakedToken, address baseToken) public view override returns (address) {\\n        StakingPool memory pool = StakingPool(stakedToken, baseToken);\\n        return address(xToken(pool));\\n    }\\n\\n    function retrieveTokens(uint256 vaultId, uint256 amount, address from, address to) public override onlyOwner {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        LPStakingXTokenUpgradeable _xToken = xToken(pool);\\n        _xToken.burnFrom(from, amount);\\n        _xToken.mint(to, amount);\\n    }\\n\\n    function _claimRewards(StakingPool memory pool, address account) internal {\\n        if (pool.stakingToken == address(0)) revert PoolDoesNotExist();\\n        xToken(pool).withdrawReward(account);\\n    }\\n\\n    function _deployDividendToken(StakingPool memory pool) internal returns (address) {\\n        // Changed to use new nonces.\\n        bytes32 salt = keccak256(abi.encodePacked(pool.stakingToken, pool.baseToken, uint256(2)));\\n        address _xToken = ClonesUpgradeable.cloneDeterministic(address(lpStakingXToken), salt);\\n        string memory name = stakingTokenProvider.nameForStakingToken(pool.baseToken);\\n        LPStakingXTokenUpgradeable(_xToken).__LPStakingXToken_init(IERC20Upgradeable(pool.baseToken), name, name);\\n        return _xToken;\\n    }\\n\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function _withdraw(StakingPool memory pool, uint256 amount, address account) internal {\\n        if (pool.stakingToken == address(0)) revert PoolDoesNotExist();\\n        xToken(pool).burnFrom(account, amount);\\n        IERC20Upgradeable(pool.stakingToken).safeTransfer(account, amount);\\n    }\\n}\",\"keccak256\":\"0xb5b05418e58e2f550369338465c69104b70bca23ed7cf0f3647def88fd022cec\",\"license\":\"MIT\"},\"src/contracts/interfaces/ILPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IStakingTokenProvider.sol\\\";\\nimport \\\"../token/LPStakingXTokenUpgradeable.sol\\\";\\n\\ninterface ILPStaking {\\n    struct StakingPool {\\n        address stakingToken;\\n        address baseToken;\\n    }\\n\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function stakingTokenProvider() external view returns (IStakingTokenProvider);\\n\\n    function lpStakingXToken() external view returns (LPStakingXTokenUpgradeable);\\n\\n    function vaultStakingInfo(uint256) external view returns (address, address);\\n\\n    function __LPStaking__init(address _vaultManager, address _stakingTokenProvider) external;\\n\\n    function setStakingTokenProvider(address _stakingTokenProvider) external;\\n\\n    function addPoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVaults(uint256[] calldata vaultIds) external;\\n\\n    function updatePoolForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 amount) external;\\n\\n    function timelockDepositFor(uint256 vaultId, address account, uint256 amount, uint256 timelockLength) external;\\n\\n    function exit(uint256 vaultId) external;\\n\\n    function emergencyExitAndClaim(address _stakingToken, address _baseToken) external;\\n\\n    function emergencyExit(address _stakingToken, address _baseToken) external;\\n\\n    function withdrawTo(uint256 vaultId, uint256 amount, address to) external;\\n\\n    function claimRewardsTo(uint256 vaultId, address to) external;\\n\\n    function claimMultipleRewards(uint256[] calldata vaultIds) external;\\n\\n    function xToken(uint256 vaultId) external view returns (LPStakingXTokenUpgradeable);\\n\\n    function xTokenAddr(address stakedToken, address baseToken) external view returns (address);\\n\\n    function balanceOf(uint256 vaultId, address addr) external view returns (uint256);\\n\\n    function lockedUntil(uint256 vaultId, address who) external view returns (uint256);\\n\\n    function lockedLPBalance(uint256 vaultId, address who) external view returns (uint256);\\n\\n    function xToken(StakingPool memory pool) external view returns (LPStakingXTokenUpgradeable);\\n\\n    function retrieveTokens(uint256 vaultId, uint256 amount, address from, address to) external;\\n\\n    event StakingPoolCreated(uint256 vaultId, address xToken, address baseToken);\\n    event StakingPoolUpdated(uint256 vaultId, address xToken);\\n    event FeesReceived(uint256 vaultId, uint256 amount, address xToken);\\n    event LPDeposited(uint256 vaultId, uint256 amount, address xToken, address sender);\\n    event XTokenWithdrawn(uint256 vaultId, uint256 amount, address xToken, address sender);\\n    event StakingTokenProviderUpdated(address oldStakingTokenProvider, address newStakingTokenProvider);\\n\\n    error NotAPool();\\n    error NotDeployingProperDistro();\\n    error NotExcludedFromFees();\\n    error NothingToMigrate();\\n    error PoolAlreadyExists();\\n    error PoolDoesNotExist();\\n    error LPStakingXTokenAlreadySet();\\n    error TimelockTooLong();\\n    error VaultManagerAlreadySet();\\n    error VaultManagerNotSet();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x6c8766af488b3c056fb361a8e507618ebf80011baa1aee29d0400942920abbbf\",\"license\":\"MIT\"},\"src/contracts/interfaces/IStakingTokenProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakingTokenProvider {\\n    function uniLikeExchange() external returns (address);\\n\\n    function defaultPairedToken() external returns (address);\\n\\n    function defaultPrefix() external returns (string memory);\\n\\n    function pairedToken(address) external returns (address);\\n\\n    function pairedPrefix(address) external returns (string memory);\\n\\n    function __StakingTokenProvider_init(address _uniLikeExchange, address _defaultPairedtoken, string memory _defaultPrefix) external;\\n\\n    function setPairedTokenForVaultToken(address _vaultToken, address _newPairedToken, string calldata _newPrefix) external;\\n\\n    function setDefaultPairedToken(address _defaultPairedToken, string calldata _defaultPrefix) external;\\n\\n    function stakingTokenForVaultToken(address _vaultToken) external view returns (address);\\n\\n    function nameForStakingToken(address _vaultToken) external view returns (string memory);\\n\\n    function pairForVaultToken(address _vaultToken, address _pairedToken) external view returns (address);\\n\\n    event DefaultPairedTokenUpdated(address oldDefaultPairedToken, address newDefaultPairedToken);\\n    event PairedTokenForVaultUpdated(address vaultToken, address oldPairedtoken, address newPairedToken);\\n\\n    error IdenticalAddress();\\n    error ZeroAddress();\\n}\",\"keccak256\":\"0x9e1fb1537606cdea4faf2baf748657800337b12d2586f1f83cc3d96cbaec17ce\",\"license\":\"MIT\"},\"src/contracts/interfaces/IVaultManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IVaultManager {\\n    function fnftSingleFactory() external view returns (address);\\n\\n    function fnftCollectionFactory() external view returns (address);\\n\\n    function excludedFromFees(address) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function __VaultManager_init(address _weth) external;\\n\\n    function WETH() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function ifoFactory() external view returns (address);\\n\\n    function zapContract() external view returns (address);\\n\\n    function feeReceiver() external view returns (address payable);\\n\\n    function togglePaused() external;\\n\\n    function addVault(address _fnft) external returns (uint256 vaultId);\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setFeeExclusion(address _address, bool _excluded) external;\\n\\n    function setFeeReceiver(address payable _feeReceiver) external;\\n\\n    function setIFOFactory(address _ifoFactory) external;\\n\\n    function setZapContract(address _zapContract) external;\\n\\n    function setFNFTCollectionFactory(address _fnftCollectionFactory) external;\\n\\n    function setFNFTSingleFactory(address _fnftCollectionFactory) external;\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function vaults(uint256) external view returns (address);\\n\\n    function numVaults() external view returns (uint);\\n\\n    event PriceOracleUpdated(address oldPriceOracle, address newPriceOracle);\\n    event IFOFactoryUpdated(address oldIFOFactory, address newIFOFactory);\\n    event FeeReceiverUpdated(address oldFeeReceiver, address newFeeReceiver);\\n    event ZapContractUpdated(address oldZapContract, address newZapContract);\\n    event FNFTCollectionFactoryUpdated(address oldFNFTCollectionFactory, address newFNFTCollectionFactory);\\n    event FNFTSingleFactoryUpdated(address oldFNFTSingleFactory, address newFNFTSingleFactory);\\n    event VaultAdded(uint256 vaultId, address vault);\\n    event FeeDistributorUpdated(address oldFeeDistributor, address newFeeDistributor);\\n    event FeeExclusionUpdated(address target, bool excluded);\\n\\n    error FeeTooHigh();\\n    error MaxAuctionLengthOutOfBounds();\\n    error MaxReserveFactorTooLow();\\n    error MinAuctionLengthOutOfBounds();\\n    error MinBidIncreaseOutOfBounds();\\n    error MinReserveFactorTooHigh();\\n    error MinVotePercentageTooHigh();\\n    error MultiplierTooLow();\\n    error OnlyFactory();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0xf883c7d6e14d75bac6f1b2533293234d93608e563d45d79b80b3d31ee07395f2\",\"license\":\"MIT\"},\"src/contracts/token/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\",\"keccak256\":\"0x6ffb3595113d54827e8eca1b15cf843744a8d5865bb591ba974a7d978b9ea571\",\"license\":\"MIT\"},\"src/contracts/token/LPStakingXTokenUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/// @title Reward-Paying Token (renamed from Dividend)\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute a target token\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\ncontract LPStakingXTokenUpgradeable is OwnableUpgradeable, ERC20Upgradeable {\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  IERC20Upgradeable public target;\\n\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received target is small.\\n  // For more discussion about choosing the value of `magnitude`,\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n  uint256 constant internal magnitude = 2**128;\\n\\n  uint256 internal magnifiedRewardPerShare;\\n\\n  // About dividendCorrection:\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n  //   `dividendOf(_user)` should not be changed,\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n  mapping(address => int256) internal magnifiedRewardCorrections;\\n  mapping(address => uint256) internal withdrawnRewards;\\n\\n  mapping(address => uint256) internal timelock;\\n\\n  event Timelocked(address user, uint256 amount, uint256 until);\\n\\n  error UserIsLocked();\\n  error ZeroAmount();\\n  error ZeroSupply();\\n\\n  function __LPStakingXToken_init(IERC20Upgradeable _target, string memory _name, string memory _symbol) public initializer {\\n    __Ownable_init();\\n    __ERC20_init(_name, _symbol);\\n    target = _target;\\n  }\\n\\n  function transfer(address recipient, uint256 amount)\\n      public\\n      virtual\\n      override\\n      returns (bool)\\n  {\\n      _transfer(_msgSender(), recipient, amount);\\n      return true;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Emits an {Approval} event indicating the updated allowance. This is not\\n    * required by the EIP. See the note at the beginning of {ERC20}.\\n    *\\n    * Requirements:\\n    *\\n    * - `sender` and `recipient` cannot be the zero address.\\n    * - `sender` must have a balance of at least `amount`.\\n    * - the caller must have allowance for ``sender``'s tokens of at least\\n    * `amount`.\\n    */\\n  function transferFrom(address sender, address recipient, uint256 amount)\\n      public\\n      virtual\\n      override\\n      returns (bool)\\n  {\\n      _transfer(sender, recipient, amount);\\n      _approve(sender, _msgSender(), allowance(sender, _msgSender()) - amount);\\n      return true;\\n  }\\n\\n  function mint(address account, uint256 amount) public onlyOwner virtual {\\n      _mint(account, amount);\\n  }\\n\\n  function timelockMint(address account, uint256 amount, uint256 timelockLength) public onlyOwner virtual {\\n    uint256 timelockFinish = block.timestamp + timelockLength;\\n    timelock[account] = timelockFinish;\\n    emit Timelocked(account, amount, timelockFinish);\\n    _mint(account, amount);\\n  }\\n\\n  function timelockUntil(address account) public view returns (uint256) {\\n    return timelock[account];\\n  }\\n\\n  /**\\n    * @dev Destroys `amount` tokens from `account`, without deducting from the caller's\\n    * allowance. Dangerous.\\n    *\\n    * See {ERC20-_burn} and {ERC20-allowance}.\\n    */\\n  function burnFrom(address account, uint256 amount) public virtual onlyOwner {\\n      _burn(account, amount);\\n  }\\n\\n  /// @notice Distributes target to token holders as dividends.\\n  /// @dev It reverts if the total supply of tokens is 0.\\n  /// It emits the `RewardsDistributed` event if the amount of received target is greater than 0.\\n  /// About undistributed target tokens:\\n  ///   In each distribution, there is a small amount of target not distributed,\\n  ///     the magnified amount of which is\\n  ///     `(amount * magnitude) % totalSupply()`.\\n  ///   With a well-chosen `magnitude`, the amount of undistributed target\\n  ///     (de-magnified) in a distribution can be less than 1 wei.\\n  ///   We can actually keep track of the undistributed target in a distribution\\n  ///     and try to distribute it in the next distribution,\\n  ///     but keeping track of such data on-chain costs much more than\\n  ///     the saved target, so we don't do that.\\n  function distributeRewards(uint amount) external virtual onlyOwner {\\n    if (totalSupply() == 0) revert ZeroSupply();\\n    if (amount == 0) revert ZeroAmount();\\n\\n    // Because we receive the tokens from the staking contract, we assume the tokens have been received.\\n    magnifiedRewardPerShare = magnifiedRewardPerShare + (amount * magnitude / totalSupply());\\n\\n    emit RewardsDistributed(msg.sender, amount);\\n  }\\n\\n  /// @notice Withdraws the target distributed to the sender.\\n  /// @dev It emits a `RewardWithdrawn` event if the amount of withdrawn target is greater than 0.\\n  function withdrawReward(address user) external onlyOwner {\\n    uint256 _withdrawableReward = withdrawableRewardOf(user);\\n    if (_withdrawableReward > 0) {\\n      withdrawnRewards[user] = withdrawnRewards[user] + _withdrawableReward;\\n      target.safeTransfer(user, _withdrawableReward);\\n      emit RewardWithdrawn(user, _withdrawableReward);\\n    }\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner) public view returns(uint256) {\\n    return withdrawableRewardOf(_owner);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableRewardOf(address _owner) internal view returns(uint256) {\\n    return accumulativeRewardOf(_owner) - withdrawnRewards[_owner];\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnRewardOf(address _owner) public view returns(uint256) {\\n    return withdrawnRewards[_owner];\\n  }\\n\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeRewardOf(_owner) = withdrawableRewardOf(_owner) + withdrawnRewardOf(_owner)\\n  /// = (magnifiedRewardPerShare * balanceOf(_owner) + magnifiedRewardCorrections[_owner]) / magnitude\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeRewardOf(address _owner) public view returns(uint256) {\\n    return ((magnifiedRewardPerShare * balanceOf(_owner)).toInt256() + magnifiedRewardCorrections[_owner]).toUint256() / magnitude;\\n  }\\n\\n  /// @dev Internal function that transfer tokens from one address to another.\\n  /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n  /// @param from The address to transfer from.\\n  /// @param to The address to transfer to.\\n  /// @param value The amount to be transferred.\\n  function _transfer(address from, address to, uint256 value) internal override {\\n    if (timelock[from] >= block.timestamp) revert UserIsLocked();\\n    super._transfer(from, to, value);\\n\\n    int256 _magCorrection = (magnifiedRewardPerShare * value).toInt256();\\n    magnifiedRewardCorrections[from] = magnifiedRewardCorrections[from] + _magCorrection;\\n    magnifiedRewardCorrections[to] = magnifiedRewardCorrections[to] - _magCorrection;\\n  }\\n\\n  /// @dev Internal function that mints tokens to an account.\\n  /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n  /// @param account The account that will receive the created tokens.\\n  /// @param value The amount that will be created.\\n  function _mint(address account, uint256 value) internal override {\\n    super._mint(account, value);\\n\\n    magnifiedRewardCorrections[account] = magnifiedRewardCorrections[account] - (magnifiedRewardPerShare * value).toInt256();\\n  }\\n\\n  /// @dev Internal function that burns an amount of the token of a given account.\\n  /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n  /// @param account The account whose tokens will be burnt.\\n  /// @param value The amount that will be burnt.\\n  function _burn(address account, uint256 value) internal override {\\n    if (timelock[account] >= block.timestamp) revert UserIsLocked();\\n    super._burn(account, value);\\n\\n    magnifiedRewardCorrections[account] = magnifiedRewardCorrections[account] + (magnifiedRewardPerShare * value).toInt256();\\n  }\\n\\n\\n  /// @dev This event MUST emit when target is distributed to token holders.\\n  /// @param from The address which sends target to this contract.\\n  /// @param weiAmount The amount of distributed target in wei.\\n  event RewardsDistributed(\\n    address indexed from,\\n    uint256 weiAmount\\n  );\\n\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\n  /// @param to The address which withdraws target from this contract.\\n  /// @param weiAmount The amount of withdrawn target in wei.\\n  event RewardWithdrawn(\\n    address indexed to,\\n    uint256 weiAmount\\n  );\\n}\",\"keccak256\":\"0xb1c86212e64708255110a346342716f0abd0f7a1b9713bc8b3f295a73b0c062d\",\"license\":\"Unlicense\"},\"src/contracts/util/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract Pausable is OwnableUpgradeable {\\n\\n    function __Pausable_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    event SetIsGuardian(address addr, bool isGuardian);\\n    event SetPaused(uint256 lockId, bool paused);\\n\\n    mapping(address => bool) public isGuardian;\\n    mapping(uint256 => bool) public isPaused;\\n    // 0  : createVault\\n    // 1  : mint\\n    // 2  : redeem\\n    // 3  : swap\\n    // 4  : auction\\n    // 5  : flashloan\\n    // 6  : fee\\n    // 7  : price\\n    // 10 : stake\\n\\n    error Paused();\\n    error Unauthorized();\\n\\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\\n        if (isPaused[lockId] && msg.sender != owner()) revert Paused();\\n    }\\n\\n    function pause(uint256 lockId) public virtual {\\n        if (!isGuardian[msg.sender]) revert Unauthorized();\\n        isPaused[lockId] = true;\\n        emit SetPaused(lockId, true);\\n    }\\n\\n    function setIsGuardian(address _address, bool _isGuardian) public virtual onlyOwner {\\n        isGuardian[_address] = _isGuardian;\\n        emit SetIsGuardian(_address, _isGuardian);\\n    }\\n\\n    function unpause(uint256 lockId)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        isPaused[lockId] = false;\\n        emit SetPaused(lockId, false);\\n    }\\n}\\n\",\"keccak256\":\"0x63dab5ed768e7ff4157e8dc9c794ad3800b26c5b7beb4392aab586e118a83b69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614512806100206000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c806386c920fc1161011a578063e0e9e64d116100ad578063f36d52da1161007c578063f36d52da146104c3578063f79b61ba146104d6578063f99e7405146104e9578063fabc1cbc146104fc578063fd744da91461050f57600080fd5b8063e0e9e64d14610477578063e2bbb1581461048a578063e8e571181461049d578063f2fde38b146104b057600080fd5b806391ff8051116100e957806391ff80511461041b578063b1412be01461042e578063bdf2a43c14610441578063cd4605321461046457600080fd5b806386c920fc146103b957806387a6753f146103e45780638a4adf24146103f75780638da5cb5b1461040a57600080fd5b80635cec16c01161019d578063729d0a8a1161016c578063729d0a8a1461035a5780637a77a5f71461036d5780637c77b616146103805780637ec732ab146103935780637f8661a1146103a657600080fd5b80635cec16c0146103195780635e1cc7121461032c5780636c9b95881461033f578063715018a61461035257600080fd5b80633504f437116101d95780633504f4371461027e5780633580c2f2146102d25780633656eec2146102e5578063482d0fd21461030657600080fd5b80630c68ba211461020b578063136439dd1461024357806314cd70e41461025857806323845fb51461026b575b600080fd5b61022e61021936600461235a565b60656020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b610256610251366004612377565b610522565b005b610256610266366004612390565b6105a9565b6102566102793660046123d7565b610653565b6102b261028c366004612377565b606760205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b0393841681529290911660208301520161023a565b6102566102e0366004612410565b6106e9565b6102f86102f336600461243e565b6107b7565b60405190815260200161023a565b610256610314366004612377565b61088e565b610256610327366004612410565b610a29565b61025661033a36600461243e565b610a73565b61025661034d366004612463565b610ab6565b610256610c5c565b6102566103683660046124a0565b610c92565b61025661037b3660046124a0565b610cc8565b61025661038e366004612377565b610cfd565b6102566103a136600461235a565b610d47565b6102566103b4366004612377565b610e01565b6068546103cc906001600160a01b031681565b6040516001600160a01b03909116815260200161023a565b6102566103f2366004612377565b610e51565b606a546103cc906001600160a01b031681565b6033546001600160a01b03166103cc565b6069546103cc906001600160a01b031681565b6103cc61043c36600461252b565b61110c565b61022e61044f366004612377565b60666020526000908152604090205460ff1681565b61025661047236600461258a565b611186565b6102f861048536600461243e565b6112c0565b6102566104983660046125d4565b611380565b6103cc6104ab366004612377565b6115bf565b6102566104be36600461235a565b611614565b61022e6104d13660046125d4565b6116ac565b6102566104e4366004612410565b61191e565b6102f86104f736600461243e565b611ac8565b61025661050a366004612377565b611b3a565b6103cc61051d366004612410565b611bb1565b3360009081526065602052604090205460ff16610551576040516282b42960e81b815260040160405180910390fd5b600081815260666020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b600083815260676020908152604091829020825180840190935280546001600160a01b03908116845260019091015416908201526105e78183611bdb565b6105f2818484611c6d565b7f19511320b665885ef3c08fe86b05785c4aa981da411301a85730a092dc030955848461061e8461110c565b6040805193845260208401929092526001600160a01b039081168383015285166060830152519081900360800190a150505050565b6033546001600160a01b031633146106865760405162461bcd60e51b815260040161067d906125f6565b60405180910390fd5b6001600160a01b038216600081815260656020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a910160405180910390a15050565b604080518082019091526001600160a01b0380841682528216602082015260006107128261110c565b9050803b61073357604051632bab424160e01b815260040160405180910390fd5b61073d8233611bdb565b6040516370a0823160e01b81523360048201526107b19083906001600160a01b038416906370a0823190602401602060405180830381865afa158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab919061262b565b33611c6d565b50505050565b6000828152606760209081526040808320815180830190925280546001600160a01b0390811683526001909101541691810191909152816107f78261110c565b9050803b61081857604051632bab424160e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b0385811660048301528216906370a08231906024015b602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610883919061262b565b925050505b92915050565b600081815260676020908152604091829020825180840190935280546001600160a01b0390811680855260019092015416918301919091526108e3576040516302721e1f60e61b815260040160405180910390fd5b60685460208201516040516387c13f4d60e01b81526001600160a01b03918216600482015260009291909116906387c13f4d90602401602060405180830381865afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190612644565b6040805180820182526001600160a01b038084168252602086810151821681840190815260008981526067909252938120835181549084166001600160a01b03199182161782559451600190910180549190931694169390931790559192506109c28261110c565b9050803b156109d2575050505050565b60006109dd83611d19565b604080518881526001600160a01b03831660208201529192507f3e66638b61edd20ef6b951155f42d5e53c3d1dba0bfffec1b438d1ca6dc02d56910160405180910390a1505050505050565b604080518082019091526001600160a01b038084168252821660208201526000610a528261110c565b9050803b61073d57604051632bab424160e01b815260040160405180910390fd5b600082815260676020908152604091829020825180840190935280546001600160a01b0390811684526001909101541690820152610ab18183611bdb565b505050565b62278d008110610ad957604051632e3f1a4f60e11b815260040160405180910390fd5b606a546040516306df336560e51b81523360048201526001600160a01b039091169063dbe66ca090602401602060405180830381865afa158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b459190612661565b610b625760405163185ab21560e01b815260040160405180910390fd5b610b6c600a610cfd565b610b758461088e565b600084815260676020908152604091829020825180840190935280546001600160a01b039081168085526001909201541691830191909152610bca576040516302721e1f60e61b815260040160405180910390fd5b8051610be1906001600160a01b0316333086611e78565b610bea8161110c565b60405163145e612f60e11b81526001600160a01b038681166004830152602482018690526044820185905291909116906328bcc25e90606401600060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050505050505050565b6033546001600160a01b03163314610c865760405162461bcd60e51b815260040161067d906125f6565b610c906000611ee3565b565b8060005b818110156107b157610cc0848483818110610cb357610cb361267e565b9050602002013533610a73565b600101610c96565b8060005b818110156107b157610cf5848483818110610ce957610ce961267e565b9050602002013561088e565b600101610ccc565b60008181526066602052604090205460ff168015610d2657506033546001600160a01b03163314155b15610d44576040516313d0ff5960e31b815260040160405180910390fd5b50565b6033546001600160a01b03163314610d715760405162461bcd60e51b815260040161067d906125f6565b6001600160a01b038116610d985760405163d92e233d60e01b815260040160405180910390fd5b606854604080516001600160a01b03928316815291831660208301527f4ef475fbf37deec715d594b5cf58fdb74d55a638dbc2f03bb6b7e7f736da2e1d910160405180910390a1606880546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260676020908152604091829020825180840190935280546001600160a01b0390811684526001909101541690820152610e3f8133611bdb565b610e4d816107ab84336107b7565b5050565b6033546001600160a01b03163314801590610ef45750606a60009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ede9190612644565b6001600160a01b0316336001600160a01b031614155b15610f11576040516282b42960e81b815260040160405180910390fd5b606a546001600160a01b0316610f3a5760405163047b368d60e01b815260040160405180910390fd5b6000818152606760205260409020546001600160a01b031615610f7057604051630188c99160e11b815260040160405180910390fd5b606a546040516340d1b7db60e11b8152600481018390526000916001600160a01b0316906381a36fb690602401602060405180830381865afa158015610fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fde9190612644565b6068546040516387c13f4d60e01b81526001600160a01b038084166004830152929350600092909116906387c13f4d90602401602060405180830381865afa15801561102e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110529190612644565b6040805180820182526001600160a01b038084168252858116602080840191825260008981526067909152938420835181549084166001600160a01b03199182161782559151600190910180549190931691161790559192506110b482611d19565b604080518781526001600160a01b0380841660208301528716918101919091529091507f056067fe6492bd58817601fe2c177ad41634f59fa61a75c560052894c84f8fce906060015b60405180910390a15050505050565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b16603482015260026048820152600090819060680160408051601f19818403018152919052805160209091012060695490915060009061117e906001600160a01b031683611f35565b949350505050565b6033546001600160a01b031633146111b05760405162461bcd60e51b815260040161067d906125f6565b6000848152606760209081526040808320815180830190925280546001600160a01b0390811683526001909101541691810191909152906111f08261110c565b60405163079cc67960e41b81526001600160a01b03868116600483015260248201889052919250908216906379cc679090604401600060405180830381600087803b15801561123e57600080fd5b505af1158015611252573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03868116600483015260248201899052841692506340c10f199150604401600060405180830381600087803b1580156112a057600080fd5b505af11580156112b4573d6000803e3d6000fd5b50505050505050505050565b6000828152606760209081526040808320815180830190925280546001600160a01b0390811683526001909101541691810191909152816113008261110c565b60405163c19ea05360e01b81526001600160a01b0386811660048301529192509082169063c19ea05390602401602060405180830381865afa15801561134a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136e919061262b565b42111561081857600092505050610888565b61138a600a610cfd565b6113938261088e565b600082815260676020908152604091829020825180840190935280546001600160a01b0390811680855260019092015416918301919091526113e8576040516302721e1f60e61b815260040160405180910390fd5b80516113ff906001600160a01b0316333085611e78565b600061140a8261110c565b60405163c19ea05360e01b81523360048201529091506000906001600160a01b0383169063c19ea05390602401602060405180830381865afa158015611454573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611478919061262b565b905042811115611508576001600160a01b0382166328bcc25e338661149d4286612694565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b50505050611570565b60405163145e612f60e11b815233600482015260248101859052600260448201526001600160a01b038316906328bcc25e90606401600060405180830381600087803b15801561155757600080fd5b505af115801561156b573d6000803e3d6000fd5b505050505b60408051868152602081018690526001600160a01b038416918101919091523360608201527f80a3346f097d5600049b367aab55610897818195fa680c71ca496d1a5742d809906080016110fd565b6000818152606760209081526040808320815180830190925280546001600160a01b039081168084526001909201541692820192909252906116045750600092915050565b61160d8161110c565b9392505050565b6033546001600160a01b0316331461163e5760405162461bcd60e51b815260040161067d906125f6565b6001600160a01b0381166116a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161067d565b610d4481611ee3565b60006116c06033546001600160a01b031690565b6001600160a01b0316336001600160a01b0316141580156117695750606a60009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561172f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117539190612644565b6001600160a01b0316336001600160a01b031614155b15611786576040516282b42960e81b815260040160405180910390fd5b600083815260676020908152604091829020825180840190935280546001600160a01b0390811680855260019092015416918301919091526117cc576000915050610888565b60006117d78261110c565b9050803b15806118465750806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611820573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611844919061262b565b155b1561185657600092505050610888565b6020820151611870906001600160a01b0316338387611e78565b604051630b32e9c760e31b8152600481018590526001600160a01b038216906359974e3890602401600060405180830381600087803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b505060408051888152602081018890526001600160a01b0385168183015290517f7ab84b72efa4574988089c5a1831f7d56a254f969fbe7d2b6d7e6238272a4afc9350908190036060019150a1506001949350505050565b600061192a6001611f9b565b90508015611942576000805461ff0019166101001790555b61194a612023565b6001600160a01b0382166119715760405163d92e233d60e01b815260040160405180910390fd5b6069546001600160a01b03161561199b57604051635e9154fb60e01b815260040160405180910390fd5b606a80546001600160a01b038086166001600160a01b03199283161790925560688054928516929091169190911790556040516119d790612338565b604051809103906000f0801580156119f3573d6000803e3d6000fd5b50606980546001600160a01b0319166001600160a01b03929092169182179055604051631fdc71b560e11b81526000600482018190526060602483015260648201819052608060448301526084820152633fb8e36a9060a401600060405180830381600087803b158015611a6657600080fd5b505af1158015611a7a573d6000803e3d6000fd5b505050508015610ab1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6000828152606760209081526040808320815180830190925280546001600160a01b039081168352600190910154169181019190915281611b088261110c565b60405163c19ea05360e01b81526001600160a01b0386811660048301529192509082169063c19ea05390602401610842565b6033546001600160a01b03163314611b645760405162461bcd60e51b815260040161067d906125f6565b6000818152606660209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d74910161059e565b604080518082019091526001600160a01b0380841682528216602082015260009061117e8161110c565b81516001600160a01b0316611c03576040516302721e1f60e61b815260040160405180910390fd5b611c0c8261110c565b604051632e1b8c8760e21b81526001600160a01b038381166004830152919091169063b86e321c90602401600060405180830381600087803b158015611c5157600080fd5b505af1158015611c65573d6000803e3d6000fd5b505050505050565b82516001600160a01b0316611c95576040516302721e1f60e61b815260040160405180910390fd5b611c9e8361110c565b60405163079cc67960e41b81526001600160a01b0383811660048301526024820185905291909116906379cc679090604401600060405180830381600087803b158015611cea57600080fd5b505af1158015611cfe573d6000803e3d6000fd5b50508451610ab192506001600160a01b031690508284612052565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b16603482015260026048820152600090819060680160408051601f198184030181529190528051602090910120606954909150600090611d8b906001600160a01b031683612082565b60685460208601516040516396c5967160e01b81526001600160a01b0391821660048201529293506000929116906396c5967190602401600060405180830381865afa158015611ddf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e0791908101906126e5565b6020860151604051631fdc71b560e11b81529192506001600160a01b03841691633fb8e36a91611e3d91859081906004016127b3565b600060405180830381600087803b158015611e5757600080fd5b505af1158015611e6b573d6000803e3d6000fd5b5093979650505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526107b19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612122565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061160d838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b60008054610100900460ff1615611fe2578160ff166001148015611fbe5750303b155b611fda5760405162461bcd60e51b815260040161067d906127f3565b506000919050565b60005460ff8084169116106120095760405162461bcd60e51b815260040161067d906127f3565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff1661204a5760405162461bcd60e51b815260040161067d90612841565b610c906121f4565b6040516001600160a01b038316602482015260448101829052610ab190849063a9059cbb60e01b90606401611eac565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166108885760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640161067d565b6000612177826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122249092919063ffffffff16565b805190915015610ab157808060200190518101906121959190612661565b610ab15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161067d565b600054610100900460ff1661221b5760405162461bcd60e51b815260040161067d90612841565b610c9033611ee3565b606061117e8484600085856001600160a01b0385163b6122865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161067d565b600080866001600160a01b031685876040516122a2919061288c565b60006040518083038185875af1925050503d80600081146122df576040519150601f19603f3d011682016040523d82523d6000602084013e6122e4565b606091505b50915091506122f48282866122ff565b979650505050505050565b6060831561230e57508161160d565b82511561231e5782518084602001fd5b8160405162461bcd60e51b815260040161067d91906128a8565b611c21806128bc83390190565b6001600160a01b0381168114610d4457600080fd5b60006020828403121561236c57600080fd5b813561160d81612345565b60006020828403121561238957600080fd5b5035919050565b6000806000606084860312156123a557600080fd5b833592506020840135915060408401356123be81612345565b809150509250925092565b8015158114610d4457600080fd5b600080604083850312156123ea57600080fd5b82356123f581612345565b91506020830135612405816123c9565b809150509250929050565b6000806040838503121561242357600080fd5b823561242e81612345565b9150602083013561240581612345565b6000806040838503121561245157600080fd5b82359150602083013561240581612345565b6000806000806080858703121561247957600080fd5b84359350602085013561248b81612345565b93969395505050506040820135916060013590565b600080602083850312156124b357600080fd5b823567ffffffffffffffff808211156124cb57600080fd5b818501915085601f8301126124df57600080fd5b8135818111156124ee57600080fd5b8660208260051b850101111561250357600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b60006040828403121561253d57600080fd5b6040516040810181811067ffffffffffffffff8211171561256057612560612515565b604052823561256e81612345565b8152602083013561257e81612345565b60208201529392505050565b600080600080608085870312156125a057600080fd5b843593506020850135925060408501356125b981612345565b915060608501356125c981612345565b939692955090935050565b600080604083850312156125e757600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561263d57600080fd5b5051919050565b60006020828403121561265657600080fd5b815161160d81612345565b60006020828403121561267357600080fd5b815161160d816123c9565b634e487b7160e01b600052603260045260246000fd5b6000828210156126b457634e487b7160e01b600052601160045260246000fd5b500390565b60005b838110156126d45781810151838201526020016126bc565b838111156107b15750506000910152565b6000602082840312156126f757600080fd5b815167ffffffffffffffff8082111561270f57600080fd5b818401915084601f83011261272357600080fd5b81518181111561273557612735612515565b604051601f8201601f19908116603f0116810190838211818310171561275d5761275d612515565b8160405282815287602084870101111561277657600080fd5b6122f48360208301602088016126b9565b6000815180845261279f8160208601602086016126b9565b601f01601f19169290920160200192915050565b6001600160a01b03841681526060602082018190526000906127d790830185612787565b82810360408401526127e98185612787565b9695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825161289e8184602087016126b9565b9190910192915050565b60208152600061160d602083018461278756fe608060405234801561001057600080fd5b50611c01806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063a9059cbb11610097578063c19ea05311610071578063c19ea05314610347578063d4b8399214610370578063dd62ed3e14610383578063f2fde38b146103bc57600080fd5b8063a9059cbb146102f8578063ad76d6861461030b578063b86e321c1461033457600080fd5b8063715018a61461028a57806379cc6790146102925780638da5cb5b146102a557806391b89fba146102ca57806395d89b41146102dd578063a457c2d7146102e557600080fd5b8063313ce56711610130578063313ce5671461020657806339509351146102155780633fb8e36a1461022857806340c10f191461023b57806359974e381461024e57806370a082311461026157600080fd5b806305b3ccb41461017857806306fdde031461019e578063095ea7b3146101b357806318160ddd146101d657806323b872dd146101de57806328bcc25e146101f1575b600080fd5b61018b6101863660046116f6565b6103cf565b6040519081526020015b60405180910390f35b6101a6610432565b604051610195919061173f565b6101c66101c1366004611772565b6104c4565b6040519015158152602001610195565b60675461018b565b6101c66101ec36600461179e565b6104dc565b6102046101ff3660046117df565b61050f565b005b60405160128152602001610195565b6101c6610223366004611772565b6105bc565b6102046102363660046118b7565b6105f6565b610204610249366004611772565b610692565b61020461025c36600461192d565b6106ca565b61018b61026f3660046116f6565b6001600160a01b031660009081526065602052604090205490565b61020461079b565b6102046102a0366004611772565b6107d1565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610195565b61018b6102d83660046116f6565b610805565b6101a6610810565b6101c66102f3366004611772565b61081f565b6101c6610306366004611772565b6108bc565b61018b6103193660046116f6565b6001600160a01b03166000908152609a602052604090205490565b6102046103423660046116f6565b6108d2565b61018b6103553660046116f6565b6001600160a01b03166000908152609b602052604090205490565b6097546102b2906001600160a01b031681565b61018b610391366004611946565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b6102046103ca3660046116f6565b6109a6565b6001600160a01b0381166000908152609960209081526040808320546065909252822054600160801b91610422916104139060985461040e9190611995565b610a41565b61041d91906119b4565b610aaf565b61042c91906119f5565b92915050565b60606068805461044190611a17565b80601f016020809104026020016040519081016040528092919081815260200182805461046d90611a17565b80156104ba5780601f1061048f576101008083540402835291602001916104ba565b820191906000526020600020905b81548152906001019060200180831161049d57829003601f168201915b5050505050905090565b6000336104d2818585610b01565b5060019392505050565b60006104e9848484610c25565b6104d28433846104f98833610391565b6105039190611a51565b610b01565b9392505050565b6033546001600160a01b031633146105425760405162461bcd60e51b815260040161053990611a68565b60405180910390fd5b600061054e8242611a9d565b6001600160a01b0385166000818152609b60209081526040918290208490558151928352820186905281018290529091507fe1d6ea7b60537f263509ee48f8e298cc60801e7bddbec613b343272d897dc5e79060600160405180910390a16105b68484610cf4565b50505050565b3360008181526066602090815260408083206001600160a01b03871684529091528120549091906104d29082908690610503908790611a9d565b60006106026001610d52565b9050801561061a576000805461ff0019166101001790555b610622610dda565b61062c8383610e09565b609780546001600160a01b0319166001600160a01b03861617905580156105b6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6033546001600160a01b031633146106bc5760405162461bcd60e51b815260040161053990611a68565b6106c68282610cf4565b5050565b6033546001600160a01b031633146106f45760405162461bcd60e51b815260040161053990611a68565b6067546000036107175760405163c16f3a9360e01b815260040160405180910390fd5b8060000361073857604051631f2a200560e01b815260040160405180910390fd5b606754610749600160801b83611995565b61075391906119f5565b6098546107609190611a9d565b60985560405181815233907fdf29796aad820e4bb192f3a8d631b76519bcd2cbe77cc85af20e9df53cece0869060200160405180910390a250565b6033546001600160a01b031633146107c55760405162461bcd60e51b815260040161053990611a68565b6107cf6000610e3a565b565b6033546001600160a01b031633146107fb5760405162461bcd60e51b815260040161053990611a68565b6106c68282610e8c565b600061042c82610f02565b60606069805461044190611a17565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190838110156108a45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610539565b6108b18286868403610b01565b506001949350505050565b60006108c9338484610c25565b50600192915050565b6033546001600160a01b031633146108fc5760405162461bcd60e51b815260040161053990611a68565b600061090782610f02565b905080156106c6576001600160a01b0382166000908152609a6020526040902054610933908290611a9d565b6001600160a01b038084166000908152609a602052604090209190915560975461095f91168383610f2e565b816001600160a01b03167f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e13378260405161099a91815260200190565b60405180910390a25050565b6033546001600160a01b031633146109d05760405162461bcd60e51b815260040161053990611a68565b6001600160a01b038116610a355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610539565b610a3e81610e3a565b50565b60006001600160ff1b03821115610aab5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610539565b5090565b600080821215610aab5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610539565b6001600160a01b038316610b635760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610539565b6001600160a01b038216610bc45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610539565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166000908152609b60205260409020544211610c5d5760405163249bb0b560e21b815260040160405180910390fd5b610c68838383610f85565b6000610c7b8260985461040e9190611995565b6001600160a01b038516600090815260996020526040902054909150610ca29082906119b4565b6001600160a01b038086166000908152609960205260408082209390935590851681522054610cd2908290611ab5565b6001600160a01b03909316600090815260996020526040902092909255505050565b610cfe8282611153565b610d0f8160985461040e9190611995565b6001600160a01b038316600090815260996020526040902054610d329190611ab5565b6001600160a01b0390921660009081526099602052604090209190915550565b60008054610100900460ff1615610d99578160ff166001148015610d755750303b155b610d915760405162461bcd60e51b815260040161053990611af4565b506000919050565b60005460ff808416911610610dc05760405162461bcd60e51b815260040161053990611af4565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16610e015760405162461bcd60e51b815260040161053990611b42565b6107cf611232565b600054610100900460ff16610e305760405162461bcd60e51b815260040161053990611b42565b6106c68282611262565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000908152609b60205260409020544211610ec45760405163249bb0b560e21b815260040160405180910390fd5b610ece82826112b0565b610edf8160985461040e9190611995565b6001600160a01b038316600090815260996020526040902054610d3291906119b4565b6001600160a01b0381166000908152609a6020526040812054610f24836103cf565b61042c9190611a51565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f809084906113fe565b505050565b6001600160a01b038316610fe95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610539565b6001600160a01b03821661104b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610539565b6001600160a01b038316600090815260656020526040902054818110156110c35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610539565b6001600160a01b038085166000908152606560205260408082208585039055918516815290812080548492906110fa908490611a9d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161114691815260200190565b60405180910390a36105b6565b6001600160a01b0382166111a95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610539565b80606760008282546111bb9190611a9d565b90915550506001600160a01b038216600090815260656020526040812080548392906111e8908490611a9d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff166112595760405162461bcd60e51b815260040161053990611b42565b6107cf33610e3a565b600054610100900460ff166112895760405162461bcd60e51b815260040161053990611b42565b815161129c906068906020850190611651565b508051610f80906069906020840190611651565b6001600160a01b0382166113105760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610539565b6001600160a01b038216600090815260656020526040902054818110156113845760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610539565b6001600160a01b03831660009081526065602052604081208383039055606780548492906113b3908490611a51565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000611453826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114d09092919063ffffffff16565b805190915015610f8057808060200190518101906114719190611b8d565b610f805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610539565b60606114df84846000856114e7565b949350505050565b6060824710156115485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610539565b6001600160a01b0385163b61159f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610539565b600080866001600160a01b031685876040516115bb9190611baf565b60006040518083038185875af1925050503d80600081146115f8576040519150601f19603f3d011682016040523d82523d6000602084013e6115fd565b606091505b509150915061160d828286611618565b979650505050505050565b60608315611627575081610508565b8251156116375782518084602001fd5b8160405162461bcd60e51b8152600401610539919061173f565b82805461165d90611a17565b90600052602060002090601f01602090048101928261167f57600085556116c5565b82601f1061169857805160ff19168380011785556116c5565b828001600101855582156116c5579182015b828111156116c55782518255916020019190600101906116aa565b50610aab9291505b80821115610aab57600081556001016116cd565b6001600160a01b0381168114610a3e57600080fd5b60006020828403121561170857600080fd5b8135610508816116e1565b60005b8381101561172e578181015183820152602001611716565b838111156105b65750506000910152565b602081526000825180602084015261175e816040850160208701611713565b601f01601f19169190910160400192915050565b6000806040838503121561178557600080fd5b8235611790816116e1565b946020939093013593505050565b6000806000606084860312156117b357600080fd5b83356117be816116e1565b925060208401356117ce816116e1565b929592945050506040919091013590565b6000806000606084860312156117f457600080fd5b83356117ff816116e1565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261183b57600080fd5b813567ffffffffffffffff8082111561185657611856611814565b604051601f8301601f19908116603f0116810190828211818310171561187e5761187e611814565b8160405283815286602085880101111561189757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156118cc57600080fd5b83356118d7816116e1565b9250602084013567ffffffffffffffff808211156118f457600080fd5b6119008783880161182a565b9350604086013591508082111561191657600080fd5b506119238682870161182a565b9150509250925092565b60006020828403121561193f57600080fd5b5035919050565b6000806040838503121561195957600080fd5b8235611964816116e1565b91506020830135611974816116e1565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156119af576119af61197f565b500290565b600080821280156001600160ff1b03849003851316156119d6576119d661197f565b600160ff1b83900384128116156119ef576119ef61197f565b50500190565b600082611a1257634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680611a2b57607f821691505b602082108103611a4b57634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015611a6357611a6361197f565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611ab057611ab061197f565b500190565b60008083128015600160ff1b850184121615611ad357611ad361197f565b6001600160ff1b0384018313811615611aee57611aee61197f565b50500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611b9f57600080fd5b8151801515811461050857600080fd5b60008251611bc1818460208701611713565b919091019291505056fea2646970667358221220eb86b6ea5d57ce2281b560dd07e2f06667f1e1f3bc89d23c51a01e29a284991264736f6c634300080d0033a2646970667358221220aea7ee0efe9fe4abd816e080ac25a99a6066bcf1412d87cd2fe9c2ce902eadd364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806386c920fc1161011a578063e0e9e64d116100ad578063f36d52da1161007c578063f36d52da146104c3578063f79b61ba146104d6578063f99e7405146104e9578063fabc1cbc146104fc578063fd744da91461050f57600080fd5b8063e0e9e64d14610477578063e2bbb1581461048a578063e8e571181461049d578063f2fde38b146104b057600080fd5b806391ff8051116100e957806391ff80511461041b578063b1412be01461042e578063bdf2a43c14610441578063cd4605321461046457600080fd5b806386c920fc146103b957806387a6753f146103e45780638a4adf24146103f75780638da5cb5b1461040a57600080fd5b80635cec16c01161019d578063729d0a8a1161016c578063729d0a8a1461035a5780637a77a5f71461036d5780637c77b616146103805780637ec732ab146103935780637f8661a1146103a657600080fd5b80635cec16c0146103195780635e1cc7121461032c5780636c9b95881461033f578063715018a61461035257600080fd5b80633504f437116101d95780633504f4371461027e5780633580c2f2146102d25780633656eec2146102e5578063482d0fd21461030657600080fd5b80630c68ba211461020b578063136439dd1461024357806314cd70e41461025857806323845fb51461026b575b600080fd5b61022e61021936600461235a565b60656020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b610256610251366004612377565b610522565b005b610256610266366004612390565b6105a9565b6102566102793660046123d7565b610653565b6102b261028c366004612377565b606760205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b0393841681529290911660208301520161023a565b6102566102e0366004612410565b6106e9565b6102f86102f336600461243e565b6107b7565b60405190815260200161023a565b610256610314366004612377565b61088e565b610256610327366004612410565b610a29565b61025661033a36600461243e565b610a73565b61025661034d366004612463565b610ab6565b610256610c5c565b6102566103683660046124a0565b610c92565b61025661037b3660046124a0565b610cc8565b61025661038e366004612377565b610cfd565b6102566103a136600461235a565b610d47565b6102566103b4366004612377565b610e01565b6068546103cc906001600160a01b031681565b6040516001600160a01b03909116815260200161023a565b6102566103f2366004612377565b610e51565b606a546103cc906001600160a01b031681565b6033546001600160a01b03166103cc565b6069546103cc906001600160a01b031681565b6103cc61043c36600461252b565b61110c565b61022e61044f366004612377565b60666020526000908152604090205460ff1681565b61025661047236600461258a565b611186565b6102f861048536600461243e565b6112c0565b6102566104983660046125d4565b611380565b6103cc6104ab366004612377565b6115bf565b6102566104be36600461235a565b611614565b61022e6104d13660046125d4565b6116ac565b6102566104e4366004612410565b61191e565b6102f86104f736600461243e565b611ac8565b61025661050a366004612377565b611b3a565b6103cc61051d366004612410565b611bb1565b3360009081526065602052604090205460ff16610551576040516282b42960e81b815260040160405180910390fd5b600081815260666020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b600083815260676020908152604091829020825180840190935280546001600160a01b03908116845260019091015416908201526105e78183611bdb565b6105f2818484611c6d565b7f19511320b665885ef3c08fe86b05785c4aa981da411301a85730a092dc030955848461061e8461110c565b6040805193845260208401929092526001600160a01b039081168383015285166060830152519081900360800190a150505050565b6033546001600160a01b031633146106865760405162461bcd60e51b815260040161067d906125f6565b60405180910390fd5b6001600160a01b038216600081815260656020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a910160405180910390a15050565b604080518082019091526001600160a01b0380841682528216602082015260006107128261110c565b9050803b61073357604051632bab424160e01b815260040160405180910390fd5b61073d8233611bdb565b6040516370a0823160e01b81523360048201526107b19083906001600160a01b038416906370a0823190602401602060405180830381865afa158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab919061262b565b33611c6d565b50505050565b6000828152606760209081526040808320815180830190925280546001600160a01b0390811683526001909101541691810191909152816107f78261110c565b9050803b61081857604051632bab424160e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b0385811660048301528216906370a08231906024015b602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610883919061262b565b925050505b92915050565b600081815260676020908152604091829020825180840190935280546001600160a01b0390811680855260019092015416918301919091526108e3576040516302721e1f60e61b815260040160405180910390fd5b60685460208201516040516387c13f4d60e01b81526001600160a01b03918216600482015260009291909116906387c13f4d90602401602060405180830381865afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190612644565b6040805180820182526001600160a01b038084168252602086810151821681840190815260008981526067909252938120835181549084166001600160a01b03199182161782559451600190910180549190931694169390931790559192506109c28261110c565b9050803b156109d2575050505050565b60006109dd83611d19565b604080518881526001600160a01b03831660208201529192507f3e66638b61edd20ef6b951155f42d5e53c3d1dba0bfffec1b438d1ca6dc02d56910160405180910390a1505050505050565b604080518082019091526001600160a01b038084168252821660208201526000610a528261110c565b9050803b61073d57604051632bab424160e01b815260040160405180910390fd5b600082815260676020908152604091829020825180840190935280546001600160a01b0390811684526001909101541690820152610ab18183611bdb565b505050565b62278d008110610ad957604051632e3f1a4f60e11b815260040160405180910390fd5b606a546040516306df336560e51b81523360048201526001600160a01b039091169063dbe66ca090602401602060405180830381865afa158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b459190612661565b610b625760405163185ab21560e01b815260040160405180910390fd5b610b6c600a610cfd565b610b758461088e565b600084815260676020908152604091829020825180840190935280546001600160a01b039081168085526001909201541691830191909152610bca576040516302721e1f60e61b815260040160405180910390fd5b8051610be1906001600160a01b0316333086611e78565b610bea8161110c565b60405163145e612f60e11b81526001600160a01b038681166004830152602482018690526044820185905291909116906328bcc25e90606401600060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050505050505050565b6033546001600160a01b03163314610c865760405162461bcd60e51b815260040161067d906125f6565b610c906000611ee3565b565b8060005b818110156107b157610cc0848483818110610cb357610cb361267e565b9050602002013533610a73565b600101610c96565b8060005b818110156107b157610cf5848483818110610ce957610ce961267e565b9050602002013561088e565b600101610ccc565b60008181526066602052604090205460ff168015610d2657506033546001600160a01b03163314155b15610d44576040516313d0ff5960e31b815260040160405180910390fd5b50565b6033546001600160a01b03163314610d715760405162461bcd60e51b815260040161067d906125f6565b6001600160a01b038116610d985760405163d92e233d60e01b815260040160405180910390fd5b606854604080516001600160a01b03928316815291831660208301527f4ef475fbf37deec715d594b5cf58fdb74d55a638dbc2f03bb6b7e7f736da2e1d910160405180910390a1606880546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260676020908152604091829020825180840190935280546001600160a01b0390811684526001909101541690820152610e3f8133611bdb565b610e4d816107ab84336107b7565b5050565b6033546001600160a01b03163314801590610ef45750606a60009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ede9190612644565b6001600160a01b0316336001600160a01b031614155b15610f11576040516282b42960e81b815260040160405180910390fd5b606a546001600160a01b0316610f3a5760405163047b368d60e01b815260040160405180910390fd5b6000818152606760205260409020546001600160a01b031615610f7057604051630188c99160e11b815260040160405180910390fd5b606a546040516340d1b7db60e11b8152600481018390526000916001600160a01b0316906381a36fb690602401602060405180830381865afa158015610fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fde9190612644565b6068546040516387c13f4d60e01b81526001600160a01b038084166004830152929350600092909116906387c13f4d90602401602060405180830381865afa15801561102e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110529190612644565b6040805180820182526001600160a01b038084168252858116602080840191825260008981526067909152938420835181549084166001600160a01b03199182161782559151600190910180549190931691161790559192506110b482611d19565b604080518781526001600160a01b0380841660208301528716918101919091529091507f056067fe6492bd58817601fe2c177ad41634f59fa61a75c560052894c84f8fce906060015b60405180910390a15050505050565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b16603482015260026048820152600090819060680160408051601f19818403018152919052805160209091012060695490915060009061117e906001600160a01b031683611f35565b949350505050565b6033546001600160a01b031633146111b05760405162461bcd60e51b815260040161067d906125f6565b6000848152606760209081526040808320815180830190925280546001600160a01b0390811683526001909101541691810191909152906111f08261110c565b60405163079cc67960e41b81526001600160a01b03868116600483015260248201889052919250908216906379cc679090604401600060405180830381600087803b15801561123e57600080fd5b505af1158015611252573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03868116600483015260248201899052841692506340c10f199150604401600060405180830381600087803b1580156112a057600080fd5b505af11580156112b4573d6000803e3d6000fd5b50505050505050505050565b6000828152606760209081526040808320815180830190925280546001600160a01b0390811683526001909101541691810191909152816113008261110c565b60405163c19ea05360e01b81526001600160a01b0386811660048301529192509082169063c19ea05390602401602060405180830381865afa15801561134a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136e919061262b565b42111561081857600092505050610888565b61138a600a610cfd565b6113938261088e565b600082815260676020908152604091829020825180840190935280546001600160a01b0390811680855260019092015416918301919091526113e8576040516302721e1f60e61b815260040160405180910390fd5b80516113ff906001600160a01b0316333085611e78565b600061140a8261110c565b60405163c19ea05360e01b81523360048201529091506000906001600160a01b0383169063c19ea05390602401602060405180830381865afa158015611454573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611478919061262b565b905042811115611508576001600160a01b0382166328bcc25e338661149d4286612694565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b50505050611570565b60405163145e612f60e11b815233600482015260248101859052600260448201526001600160a01b038316906328bcc25e90606401600060405180830381600087803b15801561155757600080fd5b505af115801561156b573d6000803e3d6000fd5b505050505b60408051868152602081018690526001600160a01b038416918101919091523360608201527f80a3346f097d5600049b367aab55610897818195fa680c71ca496d1a5742d809906080016110fd565b6000818152606760209081526040808320815180830190925280546001600160a01b039081168084526001909201541692820192909252906116045750600092915050565b61160d8161110c565b9392505050565b6033546001600160a01b0316331461163e5760405162461bcd60e51b815260040161067d906125f6565b6001600160a01b0381166116a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161067d565b610d4481611ee3565b60006116c06033546001600160a01b031690565b6001600160a01b0316336001600160a01b0316141580156117695750606a60009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561172f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117539190612644565b6001600160a01b0316336001600160a01b031614155b15611786576040516282b42960e81b815260040160405180910390fd5b600083815260676020908152604091829020825180840190935280546001600160a01b0390811680855260019092015416918301919091526117cc576000915050610888565b60006117d78261110c565b9050803b15806118465750806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611820573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611844919061262b565b155b1561185657600092505050610888565b6020820151611870906001600160a01b0316338387611e78565b604051630b32e9c760e31b8152600481018590526001600160a01b038216906359974e3890602401600060405180830381600087803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b505060408051888152602081018890526001600160a01b0385168183015290517f7ab84b72efa4574988089c5a1831f7d56a254f969fbe7d2b6d7e6238272a4afc9350908190036060019150a1506001949350505050565b600061192a6001611f9b565b90508015611942576000805461ff0019166101001790555b61194a612023565b6001600160a01b0382166119715760405163d92e233d60e01b815260040160405180910390fd5b6069546001600160a01b03161561199b57604051635e9154fb60e01b815260040160405180910390fd5b606a80546001600160a01b038086166001600160a01b03199283161790925560688054928516929091169190911790556040516119d790612338565b604051809103906000f0801580156119f3573d6000803e3d6000fd5b50606980546001600160a01b0319166001600160a01b03929092169182179055604051631fdc71b560e11b81526000600482018190526060602483015260648201819052608060448301526084820152633fb8e36a9060a401600060405180830381600087803b158015611a6657600080fd5b505af1158015611a7a573d6000803e3d6000fd5b505050508015610ab1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6000828152606760209081526040808320815180830190925280546001600160a01b039081168352600190910154169181019190915281611b088261110c565b60405163c19ea05360e01b81526001600160a01b0386811660048301529192509082169063c19ea05390602401610842565b6033546001600160a01b03163314611b645760405162461bcd60e51b815260040161067d906125f6565b6000818152606660209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d74910161059e565b604080518082019091526001600160a01b0380841682528216602082015260009061117e8161110c565b81516001600160a01b0316611c03576040516302721e1f60e61b815260040160405180910390fd5b611c0c8261110c565b604051632e1b8c8760e21b81526001600160a01b038381166004830152919091169063b86e321c90602401600060405180830381600087803b158015611c5157600080fd5b505af1158015611c65573d6000803e3d6000fd5b505050505050565b82516001600160a01b0316611c95576040516302721e1f60e61b815260040160405180910390fd5b611c9e8361110c565b60405163079cc67960e41b81526001600160a01b0383811660048301526024820185905291909116906379cc679090604401600060405180830381600087803b158015611cea57600080fd5b505af1158015611cfe573d6000803e3d6000fd5b50508451610ab192506001600160a01b031690508284612052565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b16603482015260026048820152600090819060680160408051601f198184030181529190528051602090910120606954909150600090611d8b906001600160a01b031683612082565b60685460208601516040516396c5967160e01b81526001600160a01b0391821660048201529293506000929116906396c5967190602401600060405180830381865afa158015611ddf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e0791908101906126e5565b6020860151604051631fdc71b560e11b81529192506001600160a01b03841691633fb8e36a91611e3d91859081906004016127b3565b600060405180830381600087803b158015611e5757600080fd5b505af1158015611e6b573d6000803e3d6000fd5b5093979650505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526107b19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612122565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061160d838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b60008054610100900460ff1615611fe2578160ff166001148015611fbe5750303b155b611fda5760405162461bcd60e51b815260040161067d906127f3565b506000919050565b60005460ff8084169116106120095760405162461bcd60e51b815260040161067d906127f3565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff1661204a5760405162461bcd60e51b815260040161067d90612841565b610c906121f4565b6040516001600160a01b038316602482015260448101829052610ab190849063a9059cbb60e01b90606401611eac565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166108885760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640161067d565b6000612177826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122249092919063ffffffff16565b805190915015610ab157808060200190518101906121959190612661565b610ab15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161067d565b600054610100900460ff1661221b5760405162461bcd60e51b815260040161067d90612841565b610c9033611ee3565b606061117e8484600085856001600160a01b0385163b6122865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161067d565b600080866001600160a01b031685876040516122a2919061288c565b60006040518083038185875af1925050503d80600081146122df576040519150601f19603f3d011682016040523d82523d6000602084013e6122e4565b606091505b50915091506122f48282866122ff565b979650505050505050565b6060831561230e57508161160d565b82511561231e5782518084602001fd5b8160405162461bcd60e51b815260040161067d91906128a8565b611c21806128bc83390190565b6001600160a01b0381168114610d4457600080fd5b60006020828403121561236c57600080fd5b813561160d81612345565b60006020828403121561238957600080fd5b5035919050565b6000806000606084860312156123a557600080fd5b833592506020840135915060408401356123be81612345565b809150509250925092565b8015158114610d4457600080fd5b600080604083850312156123ea57600080fd5b82356123f581612345565b91506020830135612405816123c9565b809150509250929050565b6000806040838503121561242357600080fd5b823561242e81612345565b9150602083013561240581612345565b6000806040838503121561245157600080fd5b82359150602083013561240581612345565b6000806000806080858703121561247957600080fd5b84359350602085013561248b81612345565b93969395505050506040820135916060013590565b600080602083850312156124b357600080fd5b823567ffffffffffffffff808211156124cb57600080fd5b818501915085601f8301126124df57600080fd5b8135818111156124ee57600080fd5b8660208260051b850101111561250357600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b60006040828403121561253d57600080fd5b6040516040810181811067ffffffffffffffff8211171561256057612560612515565b604052823561256e81612345565b8152602083013561257e81612345565b60208201529392505050565b600080600080608085870312156125a057600080fd5b843593506020850135925060408501356125b981612345565b915060608501356125c981612345565b939692955090935050565b600080604083850312156125e757600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561263d57600080fd5b5051919050565b60006020828403121561265657600080fd5b815161160d81612345565b60006020828403121561267357600080fd5b815161160d816123c9565b634e487b7160e01b600052603260045260246000fd5b6000828210156126b457634e487b7160e01b600052601160045260246000fd5b500390565b60005b838110156126d45781810151838201526020016126bc565b838111156107b15750506000910152565b6000602082840312156126f757600080fd5b815167ffffffffffffffff8082111561270f57600080fd5b818401915084601f83011261272357600080fd5b81518181111561273557612735612515565b604051601f8201601f19908116603f0116810190838211818310171561275d5761275d612515565b8160405282815287602084870101111561277657600080fd5b6122f48360208301602088016126b9565b6000815180845261279f8160208601602086016126b9565b601f01601f19169290920160200192915050565b6001600160a01b03841681526060602082018190526000906127d790830185612787565b82810360408401526127e98185612787565b9695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825161289e8184602087016126b9565b9190910192915050565b60208152600061160d602083018461278756fe608060405234801561001057600080fd5b50611c01806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063a9059cbb11610097578063c19ea05311610071578063c19ea05314610347578063d4b8399214610370578063dd62ed3e14610383578063f2fde38b146103bc57600080fd5b8063a9059cbb146102f8578063ad76d6861461030b578063b86e321c1461033457600080fd5b8063715018a61461028a57806379cc6790146102925780638da5cb5b146102a557806391b89fba146102ca57806395d89b41146102dd578063a457c2d7146102e557600080fd5b8063313ce56711610130578063313ce5671461020657806339509351146102155780633fb8e36a1461022857806340c10f191461023b57806359974e381461024e57806370a082311461026157600080fd5b806305b3ccb41461017857806306fdde031461019e578063095ea7b3146101b357806318160ddd146101d657806323b872dd146101de57806328bcc25e146101f1575b600080fd5b61018b6101863660046116f6565b6103cf565b6040519081526020015b60405180910390f35b6101a6610432565b604051610195919061173f565b6101c66101c1366004611772565b6104c4565b6040519015158152602001610195565b60675461018b565b6101c66101ec36600461179e565b6104dc565b6102046101ff3660046117df565b61050f565b005b60405160128152602001610195565b6101c6610223366004611772565b6105bc565b6102046102363660046118b7565b6105f6565b610204610249366004611772565b610692565b61020461025c36600461192d565b6106ca565b61018b61026f3660046116f6565b6001600160a01b031660009081526065602052604090205490565b61020461079b565b6102046102a0366004611772565b6107d1565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610195565b61018b6102d83660046116f6565b610805565b6101a6610810565b6101c66102f3366004611772565b61081f565b6101c6610306366004611772565b6108bc565b61018b6103193660046116f6565b6001600160a01b03166000908152609a602052604090205490565b6102046103423660046116f6565b6108d2565b61018b6103553660046116f6565b6001600160a01b03166000908152609b602052604090205490565b6097546102b2906001600160a01b031681565b61018b610391366004611946565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b6102046103ca3660046116f6565b6109a6565b6001600160a01b0381166000908152609960209081526040808320546065909252822054600160801b91610422916104139060985461040e9190611995565b610a41565b61041d91906119b4565b610aaf565b61042c91906119f5565b92915050565b60606068805461044190611a17565b80601f016020809104026020016040519081016040528092919081815260200182805461046d90611a17565b80156104ba5780601f1061048f576101008083540402835291602001916104ba565b820191906000526020600020905b81548152906001019060200180831161049d57829003601f168201915b5050505050905090565b6000336104d2818585610b01565b5060019392505050565b60006104e9848484610c25565b6104d28433846104f98833610391565b6105039190611a51565b610b01565b9392505050565b6033546001600160a01b031633146105425760405162461bcd60e51b815260040161053990611a68565b60405180910390fd5b600061054e8242611a9d565b6001600160a01b0385166000818152609b60209081526040918290208490558151928352820186905281018290529091507fe1d6ea7b60537f263509ee48f8e298cc60801e7bddbec613b343272d897dc5e79060600160405180910390a16105b68484610cf4565b50505050565b3360008181526066602090815260408083206001600160a01b03871684529091528120549091906104d29082908690610503908790611a9d565b60006106026001610d52565b9050801561061a576000805461ff0019166101001790555b610622610dda565b61062c8383610e09565b609780546001600160a01b0319166001600160a01b03861617905580156105b6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6033546001600160a01b031633146106bc5760405162461bcd60e51b815260040161053990611a68565b6106c68282610cf4565b5050565b6033546001600160a01b031633146106f45760405162461bcd60e51b815260040161053990611a68565b6067546000036107175760405163c16f3a9360e01b815260040160405180910390fd5b8060000361073857604051631f2a200560e01b815260040160405180910390fd5b606754610749600160801b83611995565b61075391906119f5565b6098546107609190611a9d565b60985560405181815233907fdf29796aad820e4bb192f3a8d631b76519bcd2cbe77cc85af20e9df53cece0869060200160405180910390a250565b6033546001600160a01b031633146107c55760405162461bcd60e51b815260040161053990611a68565b6107cf6000610e3a565b565b6033546001600160a01b031633146107fb5760405162461bcd60e51b815260040161053990611a68565b6106c68282610e8c565b600061042c82610f02565b60606069805461044190611a17565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190838110156108a45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610539565b6108b18286868403610b01565b506001949350505050565b60006108c9338484610c25565b50600192915050565b6033546001600160a01b031633146108fc5760405162461bcd60e51b815260040161053990611a68565b600061090782610f02565b905080156106c6576001600160a01b0382166000908152609a6020526040902054610933908290611a9d565b6001600160a01b038084166000908152609a602052604090209190915560975461095f91168383610f2e565b816001600160a01b03167f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e13378260405161099a91815260200190565b60405180910390a25050565b6033546001600160a01b031633146109d05760405162461bcd60e51b815260040161053990611a68565b6001600160a01b038116610a355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610539565b610a3e81610e3a565b50565b60006001600160ff1b03821115610aab5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610539565b5090565b600080821215610aab5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610539565b6001600160a01b038316610b635760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610539565b6001600160a01b038216610bc45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610539565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166000908152609b60205260409020544211610c5d5760405163249bb0b560e21b815260040160405180910390fd5b610c68838383610f85565b6000610c7b8260985461040e9190611995565b6001600160a01b038516600090815260996020526040902054909150610ca29082906119b4565b6001600160a01b038086166000908152609960205260408082209390935590851681522054610cd2908290611ab5565b6001600160a01b03909316600090815260996020526040902092909255505050565b610cfe8282611153565b610d0f8160985461040e9190611995565b6001600160a01b038316600090815260996020526040902054610d329190611ab5565b6001600160a01b0390921660009081526099602052604090209190915550565b60008054610100900460ff1615610d99578160ff166001148015610d755750303b155b610d915760405162461bcd60e51b815260040161053990611af4565b506000919050565b60005460ff808416911610610dc05760405162461bcd60e51b815260040161053990611af4565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16610e015760405162461bcd60e51b815260040161053990611b42565b6107cf611232565b600054610100900460ff16610e305760405162461bcd60e51b815260040161053990611b42565b6106c68282611262565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000908152609b60205260409020544211610ec45760405163249bb0b560e21b815260040160405180910390fd5b610ece82826112b0565b610edf8160985461040e9190611995565b6001600160a01b038316600090815260996020526040902054610d3291906119b4565b6001600160a01b0381166000908152609a6020526040812054610f24836103cf565b61042c9190611a51565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f809084906113fe565b505050565b6001600160a01b038316610fe95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610539565b6001600160a01b03821661104b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610539565b6001600160a01b038316600090815260656020526040902054818110156110c35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610539565b6001600160a01b038085166000908152606560205260408082208585039055918516815290812080548492906110fa908490611a9d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161114691815260200190565b60405180910390a36105b6565b6001600160a01b0382166111a95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610539565b80606760008282546111bb9190611a9d565b90915550506001600160a01b038216600090815260656020526040812080548392906111e8908490611a9d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff166112595760405162461bcd60e51b815260040161053990611b42565b6107cf33610e3a565b600054610100900460ff166112895760405162461bcd60e51b815260040161053990611b42565b815161129c906068906020850190611651565b508051610f80906069906020840190611651565b6001600160a01b0382166113105760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610539565b6001600160a01b038216600090815260656020526040902054818110156113845760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610539565b6001600160a01b03831660009081526065602052604081208383039055606780548492906113b3908490611a51565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000611453826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114d09092919063ffffffff16565b805190915015610f8057808060200190518101906114719190611b8d565b610f805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610539565b60606114df84846000856114e7565b949350505050565b6060824710156115485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610539565b6001600160a01b0385163b61159f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610539565b600080866001600160a01b031685876040516115bb9190611baf565b60006040518083038185875af1925050503d80600081146115f8576040519150601f19603f3d011682016040523d82523d6000602084013e6115fd565b606091505b509150915061160d828286611618565b979650505050505050565b60608315611627575081610508565b8251156116375782518084602001fd5b8160405162461bcd60e51b8152600401610539919061173f565b82805461165d90611a17565b90600052602060002090601f01602090048101928261167f57600085556116c5565b82601f1061169857805160ff19168380011785556116c5565b828001600101855582156116c5579182015b828111156116c55782518255916020019190600101906116aa565b50610aab9291505b80821115610aab57600081556001016116cd565b6001600160a01b0381168114610a3e57600080fd5b60006020828403121561170857600080fd5b8135610508816116e1565b60005b8381101561172e578181015183820152602001611716565b838111156105b65750506000910152565b602081526000825180602084015261175e816040850160208701611713565b601f01601f19169190910160400192915050565b6000806040838503121561178557600080fd5b8235611790816116e1565b946020939093013593505050565b6000806000606084860312156117b357600080fd5b83356117be816116e1565b925060208401356117ce816116e1565b929592945050506040919091013590565b6000806000606084860312156117f457600080fd5b83356117ff816116e1565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261183b57600080fd5b813567ffffffffffffffff8082111561185657611856611814565b604051601f8301601f19908116603f0116810190828211818310171561187e5761187e611814565b8160405283815286602085880101111561189757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156118cc57600080fd5b83356118d7816116e1565b9250602084013567ffffffffffffffff808211156118f457600080fd5b6119008783880161182a565b9350604086013591508082111561191657600080fd5b506119238682870161182a565b9150509250925092565b60006020828403121561193f57600080fd5b5035919050565b6000806040838503121561195957600080fd5b8235611964816116e1565b91506020830135611974816116e1565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156119af576119af61197f565b500290565b600080821280156001600160ff1b03849003851316156119d6576119d661197f565b600160ff1b83900384128116156119ef576119ef61197f565b50500190565b600082611a1257634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680611a2b57607f821691505b602082108103611a4b57634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015611a6357611a6361197f565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611ab057611ab061197f565b500190565b60008083128015600160ff1b850184121615611ad357611ad361197f565b6001600160ff1b0384018313811615611aee57611aee61197f565b50500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611b9f57600080fd5b8151801515811461050857600080fd5b60008251611bc1818460208701611713565b919091019291505056fea2646970667358221220eb86b6ea5d57ce2281b560dd07e2f06667f1e1f3bc89d23c51a01e29a284991264736f6c634300080d0033a2646970667358221220aea7ee0efe9fe4abd816e080ac25a99a6066bcf1412d87cd2fe9c2ce902eadd364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 274,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 277,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2270,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21677,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "isGuardian",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21681,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "isPaused",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 12175,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "vaultStakingInfo",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_struct(StakingPool)16272_storage)"
      },
      {
        "astId": 12179,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "stakingTokenProvider",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IStakingTokenProvider)16799"
      },
      {
        "astId": 12183,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "lpStakingXToken",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(LPStakingXTokenUpgradeable)21647"
      },
      {
        "astId": 12187,
        "contract": "src/contracts/LPStaking.sol:LPStaking",
        "label": "vaultManager",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IVaultManager)17110"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStakingTokenProvider)16799": {
        "encoding": "inplace",
        "label": "contract IStakingTokenProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)17110": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_contract(LPStakingXTokenUpgradeable)21647": {
        "encoding": "inplace",
        "label": "contract LPStakingXTokenUpgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(StakingPool)16272_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILPStaking.StakingPool)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingPool)16272_storage"
      },
      "t_struct(StakingPool)16272_storage": {
        "encoding": "inplace",
        "label": "struct ILPStaking.StakingPool",
        "members": [
          {
            "astId": 16269,
            "contract": "src/contracts/LPStaking.sol:LPStaking",
            "label": "stakingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16271,
            "contract": "src/contracts/LPStaking.sol:LPStaking",
            "label": "baseToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}