{
  "address": "0xaDdCdE3006B9E89022131DA81827002AD1922973",
  "abi": [
    {
      "inputs": [],
      "name": "LockTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExcludedFromFees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotZapContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "XTokenNotDeployed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timelockUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "BaseTokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "xToken",
          "type": "address"
        }
      ],
      "name": "FeesReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInventoryLockTimeErc20",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInventoryLockTimeErc20",
          "type": "uint256"
        }
      ],
      "name": "InventoryLockTimeErc20Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isGuardian",
          "type": "bool"
        }
      ],
      "name": "SetIsGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "xToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "StakingPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTimelockExcludeList",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTimelockExcludeList",
          "type": "address"
        }
      ],
      "name": "TimelockExcludeListUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "childImplementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "XTokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childImplementation_",
          "type": "address"
        }
      ],
      "name": "__BeaconUpgradeable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "__FNFTStaking_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "deployXTokenForVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inventoryLockTimeErc20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "isAddressTimelockExcluded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "onlyOwnerIfPaused",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "receiveRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inventoryLockTimeErc20",
          "type": "uint256"
        }
      ],
      "name": "setInventoryLockTimeErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isGuardian",
          "type": "bool"
        }
      ],
      "name": "setIsGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelockExcludeList",
          "type": "address"
        }
      ],
      "name": "setTimelockExcludeList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockExcludeList",
      "outputs": [
        {
          "internalType": "contract ITimelockExcludeList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timelockLength",
          "type": "uint256"
        }
      ],
      "name": "timelockMintFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "timelockUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newChildImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeChildTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "vaultXToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "xTokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "xTokenShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb3964d518ab212558177194e09b616cab1f971c4cc44cedcb9056c21d8405aa",
  "receipt": {
    "to": null,
    "from": "0xB249c8Bbb7D1e8833c3cd9dd9Ebe6aCE798a9D8C",
    "contractAddress": "0xaDdCdE3006B9E89022131DA81827002AD1922973",
    "transactionIndex": 0,
    "gasUsed": "3781568",
    "logsBloom": "0x
    "blockHash": "0xc8d745f548e77873120df8c13c3b9473852fd711730ee538a2ae78aaa1cc9bbf",
    "transactionHash": "0xeb3964d518ab212558177194e09b616cab1f971c4cc44cedcb9056c21d8405aa",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31738981,
        "transactionHash": "0xeb3964d518ab212558177194e09b616cab1f971c4cc44cedcb9056c21d8405aa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b249c8bbb7d1e8833c3cd9dd9ebe6ace798a9d8c",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000068f5a80919e7a7c0000000000000000000000000000000000000000000000002cf616295033ac150000000000000000000000000000000000000000000001137afd86b188acb5cb9000000000000000000000000000000000000000000000002666bba8be953199000000000000000000000000000000000000000000000113818ce1321a4b30479",
        "logIndex": 0,
        "blockHash": "0xc8d745f548e77873120df8c13c3b9473852fd711730ee538a2ae78aaa1cc9bbf"
      }
    ],
    "blockNumber": 31738981,
    "cumulativeGasUsed": "3781568",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf0ff9e6b7fc2e915dfac7a0da096a36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LockTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExcludedFromFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZapContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"XTokenNotDeployed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelockUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"BaseTokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"}],\"name\":\"FeesReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInventoryLockTimeErc20\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInventoryLockTimeErc20\",\"type\":\"uint256\"}],\"name\":\"InventoryLockTimeErc20Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGuardian\",\"type\":\"bool\"}],\"name\":\"SetIsGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"StakingPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTimelockExcludeList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTimelockExcludeList\",\"type\":\"address\"}],\"name\":\"TimelockExcludeListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"XTokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childImplementation_\",\"type\":\"address\"}],\"name\":\"__BeaconUpgradeable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"__FNFTStaking_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"deployXTokenForVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryLockTimeErc20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"isAddressTimelockExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"onlyOwnerIfPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inventoryLockTimeErc20\",\"type\":\"uint256\"}],\"name\":\"setInventoryLockTimeErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isGuardian\",\"type\":\"bool\"}],\"name\":\"setIsGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelockExcludeList\",\"type\":\"address\"}],\"name\":\"setTimelockExcludeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockExcludeList\",\"outputs\":[{\"internalType\":\"contract ITimelockExcludeList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockLength\",\"type\":\"uint256\"}],\"name\":\"timelockMintFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"timelockUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChildImplementation\",\"type\":\"address\"}],\"name\":\"upgradeChildTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"vaultXToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"xTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"xTokenShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"childImplementation()\":{\"details\":\"Returns the current child implementation address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeChildTo(address)\":{\"details\":\"Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newChildImplementation` must be a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/FNFTStaking.sol\":\"FNFTStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xe26a9d6acdb88e0b83c7659f9c809847da6996528dc8a4e6f0ed14e395dd1657\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrowerUpgradeable {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x51e5fea61116bd84d45c4bbb0d7923ab0ab182e923b0187667f146327d6ef496\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xebe3f8a59f0f1c96344a05edb984ef666ee4207e993cca99af3808f1de8771b5\",\"license\":\"MIT\"},\"src/contracts/FNFTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"./interfaces/IVaultManager.sol\\\";\\nimport \\\"./interfaces/IFNFTCollection.sol\\\";\\nimport \\\"./interfaces/IFNFTStaking.sol\\\";\\nimport \\\"./util/Pausable.sol\\\";\\nimport \\\"./proxy/BeaconUpgradeable.sol\\\";\\nimport \\\"./proxy/Create2BeaconProxy.sol\\\";\\nimport \\\"./token/FNFTStakingXTokenUpgradeable.sol\\\";\\nimport \\\"./interfaces/ITimelockExcludeList.sol\\\";\\n\\n// Author: 0xKiwi.\\n\\n// Pausing codes for inventory staking are:\\n// 10: Deposit\\n\\ncontract FNFTStaking is IFNFTStaking, Pausable, BeaconUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // Small locktime to prevent flash deposits.\\n    uint256 internal constant DEFAULT_LOCKTIME = 2;\\n    bytes internal constant BEACON_CODE = type(Create2BeaconProxy).creationCode;\\n\\n    IVaultManager public override vaultManager;\\n    ITimelockExcludeList public override timelockExcludeList;\\n\\n    uint256 public override inventoryLockTimeErc20;\\n\\n    function __FNFTStaking_init(address _vaultManager) external virtual override initializer {\\n        __Ownable_init();\\n        vaultManager = IVaultManager(_vaultManager);\\n        address xTokenImpl = address(new FNFTStakingXTokenUpgradeable());\\n        __BeaconUpgradeable__init(xTokenImpl);\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != owner() && msg.sender != vaultManager.feeDistributor()) revert Unauthorized();\\n        _;\\n    }\\n\\n    function balanceOf(uint256 vaultId, address who) external view override returns (uint256) {\\n        FNFTStakingXTokenUpgradeable xToken = FNFTStakingXTokenUpgradeable(vaultXToken(vaultId));\\n        return xToken.balanceOf(who);\\n    }\\n\\n    // Enter staking. Staking, get minted shares and\\n    // locks base tokens and mints xTokens.\\n    function deposit(uint256 vaultId, uint256 _amount) external virtual override {\\n        onlyOwnerIfPaused(10);\\n\\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId) ? 0 : inventoryLockTimeErc20;\\n\\n        (IERC20Upgradeable baseToken, FNFTStakingXTokenUpgradeable xToken, uint256 xTokensMinted) = _timelockMintFor(vaultId, msg.sender, _amount, timelockTime);\\n        // Lock the base token in the xtoken contract\\n        baseToken.safeTransferFrom(msg.sender, address(xToken), _amount);\\n        emit BaseTokenDeposited(vaultId, _amount, xTokensMinted, timelockTime, msg.sender);\\n    }\\n\\n    function isAddressTimelockExcluded(address addr, uint256 vaultId) public view override returns (bool) {\\n        if (address(timelockExcludeList) == address(0)) {\\n            return false;\\n        } else {\\n            return timelockExcludeList.isExcluded(addr, vaultId);\\n        }\\n    }\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount) external virtual override onlyAdmin returns (bool) {\\n        address baseToken = vaultManager.vault(vaultId);\\n        address deployedXToken = xTokenAddr(address(baseToken));\\n\\n        // Don't distribute rewards unless there are people to distribute to.\\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\\n        if (!_isContract(deployedXToken) || FNFTStakingXTokenUpgradeable(deployedXToken).totalSupply() == 0) {\\n            return false;\\n        }\\n        // We \\\"pull\\\" to the dividend tokens so the fee distributor only needs to approve this contract.\\n        IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, deployedXToken, amount);\\n        emit FeesReceived(vaultId, amount, deployedXToken);\\n        return true;\\n    }\\n\\n    function setInventoryLockTimeErc20(uint256 _inventoryLockTimeErc20) external override onlyOwner {\\n        if (_inventoryLockTimeErc20 > 14 days) revert LockTooLong();\\n        emit InventoryLockTimeErc20Updated(inventoryLockTimeErc20, _inventoryLockTimeErc20);\\n        inventoryLockTimeErc20 = _inventoryLockTimeErc20;\\n    }\\n\\n    // TODO: timelock exclude list is not yet implemented\\n    function setTimelockExcludeList(address _timelockExcludeList) external override onlyOwner {\\n        emit TimelockExcludeListUpdated(address(timelockExcludeList), _timelockExcludeList);\\n        timelockExcludeList = ITimelockExcludeList(_timelockExcludeList);\\n    }\\n\\n    function timelockMintFor(uint256 vaultId, uint256 amount, address to, uint256 timelockLength) external virtual override returns (uint256) {\\n        onlyOwnerIfPaused(10);\\n        if (msg.sender != vaultManager.zapContract()) revert NotZapContract();\\n        // important for math that staking zap is excluded from fees\\n        if (!vaultManager.excludedFromFees(msg.sender)) revert NotExcludedFromFees();\\n\\n        (, , uint256 xTokensMinted) = _timelockMintFor(vaultId, to, amount, timelockLength);\\n        emit BaseTokenDeposited(vaultId, amount, xTokensMinted, timelockLength, to);\\n        return xTokensMinted;\\n    }\\n\\n    function timelockUntil(uint256 vaultId, address who) external view override returns (uint256) {\\n        FNFTStakingXTokenUpgradeable xToken = FNFTStakingXTokenUpgradeable(vaultXToken(vaultId));\\n        return xToken.timelockUntil(who);\\n    }\\n\\n    // Leave the bar. Claim back your tokens.\\n    // Unlocks the staked + gained tokens and burns xTokens.\\n    function withdraw(uint256 vaultId, uint256 _share) external virtual override {\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(vaultManager.vault(vaultId));\\n        FNFTStakingXTokenUpgradeable xToken = FNFTStakingXTokenUpgradeable(xTokenAddr(address(baseToken)));\\n\\n        uint256 baseTokensRedeemed = xToken.burnXTokens(msg.sender, _share);\\n        emit XTokenWithdrawn(vaultId, baseTokensRedeemed, _share, msg.sender);\\n    }\\n\\n   function xTokenShareValue(uint256 vaultId) external view virtual override returns (uint256) {\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(vaultManager.vault(vaultId));\\n        FNFTStakingXTokenUpgradeable xToken = FNFTStakingXTokenUpgradeable(xTokenAddr(address(baseToken)));\\n        if (!_isContract(address(xToken))) revert XTokenNotDeployed();\\n\\n        uint256 multiplier = 10 ** 18;\\n        return xToken.totalSupply() > 0\\n            ? multiplier * baseToken.balanceOf(address(xToken)) / xToken.totalSupply()\\n            : multiplier;\\n    }\\n\\n    function deployXTokenForVault(uint256 vaultId) public virtual override {\\n        address baseToken = vaultManager.vault(vaultId);\\n        address deployedXToken = xTokenAddr(address(baseToken));\\n\\n        if (_isContract(deployedXToken)) {\\n            return;\\n        }\\n\\n        address xToken = _deployXToken(baseToken);\\n        emit StakingPoolCreated(vaultId, xToken, baseToken);\\n    }\\n\\n    function vaultXToken(uint256 vaultId) public view virtual override returns (address) {\\n        address baseToken = vaultManager.vault(vaultId);\\n        address xToken = xTokenAddr(baseToken);\\n        if (!_isContract(xToken)) revert XTokenNotDeployed();\\n        return xToken;\\n    }\\n\\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\\n    function xTokenAddr(address baseToken) public view virtual override returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\\n        address tokenAddr = Create2.computeAddress(salt, keccak256(type(Create2BeaconProxy).creationCode));\\n        return tokenAddr;\\n    }\\n\\n    function _deployXToken(address baseToken) internal returns (address) {\\n        string memory symbol = IERC20Metadata(baseToken).symbol();\\n        symbol = string(abi.encodePacked(\\\"x\\\", symbol));\\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\\n        address deployedXToken = Create2.deploy(0, salt, BEACON_CODE);\\n        FNFTStakingXTokenUpgradeable(deployedXToken).__FNFTStakingXToken_init(baseToken, symbol, symbol);\\n        return deployedXToken;\\n    }\\n\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size != 0;\\n    }\\n\\n    function _timelockMintFor(uint256 vaultId, address account, uint256 _amount, uint256 timelockLength) internal returns (IERC20Upgradeable, FNFTStakingXTokenUpgradeable, uint256) {\\n        deployXTokenForVault(vaultId);\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(vaultManager.vault(vaultId));\\n        FNFTStakingXTokenUpgradeable xToken = FNFTStakingXTokenUpgradeable((xTokenAddr(address(baseToken))));\\n\\n        uint256 xTokensMinted = xToken.mintXTokens(account, _amount, timelockLength);\\n        return (baseToken, xToken, xTokensMinted);\\n    }\\n}\\n\",\"keccak256\":\"0xe8a3fbf869c622a9e8a11cd62627aaeafe35fe4e4133bdfdc6b4e71b126b6ffc\",\"license\":\"MIT\"},\"src/contracts/interfaces/IEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __Eligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2eeb6bdbe34301a2267cdda92a10c82b242406818873bcac89b691b2178689e7\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\\\";\\n\\nimport \\\"./IEligibility.sol\\\";\\nimport \\\"./IFNFTCollectionFactory.sol\\\";\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"../token/ERC20Upgradeable.sol\\\";\\n\\ninterface IFNFTCollection is IERC20Upgradeable {\\n    enum AuctionState { Inactive, Live, Ended }\\n\\n    struct Auction {\\n        uint256 livePrice;\\n        uint256 end;\\n        AuctionState state;\\n        address winning;\\n    }\\n\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function curator() external view returns (address);\\n\\n    function assetAddress() external view returns (address);\\n\\n    function factory() external view returns (IFNFTCollectionFactory);\\n\\n    function eligibilityStorage() external view returns (IEligibility);\\n\\n    function is1155() external view returns (bool);\\n\\n    function allowAllItems() external view returns (bool);\\n\\n    function enableMint() external view returns (bool);\\n\\n    function enableRandomRedeem() external view returns (bool);\\n\\n    function enableTargetRedeem() external view returns (bool);\\n\\n    function enableRandomSwap() external view returns (bool);\\n\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function enableBid() external view returns (bool);\\n\\n    function auctionLength() external view returns (uint256);\\n\\n    function quantity1155(uint256) external view returns (uint256);\\n\\n    function vaultId() external view returns (uint256);\\n\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n\\n    function allHoldings() external view returns (uint256[] memory);\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function randomRedeemFee() external view returns (uint256);\\n\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    function randomSwapFee() external view returns (uint256);\\n\\n    function targetSwapFee() external view returns (uint256);\\n\\n    function vaultFees() external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function shutdown(address recipient) external;\\n\\n    function version() external returns (string memory);\\n\\n    function __FNFTCollection_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _curator,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap,\\n        bool _enableBid\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n\\n    function setAuctionLength(uint256 _auctionLength) external;\\n\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The curator has control over options like fees and features\\n    function setCurator(address _curator) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n    function withdraw(uint256[] calldata tokenIds) external returns (uint256[] memory);\\n\\n    function startAuction(uint256 tokenId, uint256 price) external;\\n    function bid(uint256 tokenId, uint256 price) external;\\n    function endAuction(uint256 tokenId) external;\\n\\n    function flashFee(address borrowedToken, uint256 amount) external view returns (uint256);\\n\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address borrowedToken,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function allValidNFTs(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAuction(uint256 tokenId) external view returns (uint256, uint256, AuctionState, address);\\n    function getDepositor(uint256 tokenId) external view returns (address);\\n\\n    // /// @notice An event emitted when someone redeems all tokens for the NFT\\n    // event TokenRedeemed(address indexed redeemer);\\n\\n    event AuctionLengthUpdated(uint256 length);\\n    /// @notice An event emitted when an auction starts\\n    event AuctionStarted(address indexed buyer, uint256 tokenId, uint256 price);\\n    /// @notice An event emitted when an auction is won\\n    event AuctionWon(address indexed buyer, uint256 tokenId, uint256 price);\\n    /// @notice An event emitted when a bid is made\\n    event BidMade(address indexed buyer, uint256 tokenId, uint256 price);\\n    event CuratorUpdated(address oldCurator, address newCurator);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        address to\\n    );\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n    event VaultFeaturesUpdated(\\n      bool enableMint,\\n      bool enableRandomRedeem,\\n      bool enableTargetRedeem,\\n      bool enableRandomSwap,\\n      bool enableTargetSwap,\\n      bool enableBid\\n    );\\n    event VaultShutdown(address assetAddress, uint256 numItems, address recipient);\\n\\n    error AuctionEnded();\\n    error AuctionLive();\\n    error AuctionNotEnded();\\n    error AuctionNotLive();\\n    error BidDisabled();\\n    error BidEnabled();\\n    error BidTooLow();\\n    error EligibilityAlreadySet();\\n    error FeeTooHigh();\\n    error IneligibleNFTs();\\n    error InvalidAuctionLength();\\n    error MintDisabled();\\n    error NFTAlreadyInCollection();\\n    error NotCurator();\\n    error NotNFTOwner();\\n    error NotInVault();\\n    error NotOwner();\\n    error Paused();\\n    error RandomRedeemDisabled();\\n    error RandomSwapDisabled();\\n    error TargetRedeemDisabled();\\n    error TargetSwapDisabled();\\n    error TooManyNFTs();\\n    error InvalidToken();\\n    error SameCurator();\\n    error ZeroAddress();\\n    error ZeroTransferAmount();\\n}\",\"keccak256\":\"0x73c0a4f17e8693c5a13b247941a378d2c5f7d597348a4a9dd132b000d094aa0e\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTCollectionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\nimport \\\"./IVaultManager.sol\\\";\\n\\ninterface IFNFTCollectionFactory is IBeacon {\\n  struct VaultFees {\\n      bool active;\\n      uint64 mintFee;\\n      uint64 randomRedeemFee;\\n      uint64 targetRedeemFee;\\n      uint64 randomSwapFee;\\n      uint64 targetSwapFee;\\n  }\\n\\n  // Read functions.\\n  function vaultManager() external view returns (IVaultManager);\\n\\n  function eligibilityManager() external view returns (address);\\n\\n  function factoryMintFee() external view returns (uint64);\\n\\n  function factoryRandomRedeemFee() external view returns (uint64);\\n\\n  function factoryTargetRedeemFee() external view returns (uint64);\\n\\n  function factoryRandomSwapFee() external view returns (uint64);\\n\\n  function factoryTargetSwapFee() external view returns (uint64);\\n\\n  function vaultFees(uint256 vaultId) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n  function flashLoanFee() external view returns (uint256);\\n\\n  function maxAuctionLength() external view returns (uint256);\\n\\n  function minAuctionLength() external view returns (uint256);\\n\\n  function minBidIncrease() external view returns (uint256);\\n\\n  // Write functions.\\n  function __FNFTCollectionFactory_init(address _vaultManager, address _fnftCollection) external;\\n\\n  function createVault(\\n      address _assetAddress,\\n      bool is1155,\\n      bool allowAllItems,\\n      string calldata _name,\\n      string calldata _symbol\\n  ) external returns (address);\\n\\n  function setEligibilityManager(address _eligibilityManager) external;\\n\\n  function setFactoryFees(\\n    uint256 _factoryMintFee,\\n    uint256 _factoryRandomRedeemFee,\\n    uint256 _factoryTargetRedeemFee,\\n    uint256 _factoryRandomSwapFee,\\n    uint256 _factoryTargetSwapFee,\\n    uint256 _flashLoanFee\\n  ) external;\\n\\n  function setFactoryThresholds(\\n      uint256 _maxAuctionLength,\\n      uint256 _minAuctionLength,\\n      uint256 _minBidIncrease\\n  ) external;\\n\\n  function setVaultFees(\\n      uint256 vaultId,\\n      uint256 _mintFee,\\n      uint256 _randomRedeemFee,\\n      uint256 _targetRedeemFee,\\n      uint256 _randomSwapFee,\\n      uint256 _targetSwapFee\\n  ) external;\\n\\n  function disableVaultFees(uint256 vaultId) external;\\n\\n  event FactoryThresholdsUpdated(uint256 maxAuctionLength, uint256 minAuctionLength, uint256 minBidIncrease);\\n  event EligibilityManagerUpdated(address oldEligManager, address newEligManager);\\n  event VaultCreated(uint256 indexed vaultId, address curator, address vaultAddress, address assetAddress, string name, string symbol);\\n  event VaultFeesUpdated(uint256 vaultId, uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\\n  event VaultFeesDisabled(uint256 vaultId);\\n  event FactoryFeesUpdated(uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee, uint256 flashLoanFee);\\n\\n  error NotVault();\\n  error FeeTooHigh();\\n  error MaxAuctionLengthOutOfBounds();\\n  error MinAuctionLengthOutOfBounds();\\n  error MinBidIncreaseOutOfBounds();\\n  error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x3a40606069aab5c31d4d30a52ff4d834f5e67054eebdf3b6bbdd3d8ef97e7040\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./ITimelockExcludeList.sol\\\";\\n\\n\\ninterface IFNFTStaking {\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function inventoryLockTimeErc20() external view returns (uint256);\\n\\n    function timelockExcludeList() external view returns (ITimelockExcludeList);\\n\\n    function __FNFTStaking_init(address _vaultManager) external;\\n\\n    function setTimelockExcludeList(address _timelockExcludeList) external;\\n\\n    function setInventoryLockTimeErc20(uint256 _inventoryLockTimeErc20) external;\\n\\n    function isAddressTimelockExcluded(address addr, uint256 vaultId) external returns (bool);\\n\\n    function deployXTokenForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\n\\n    function timelockMintFor(uint256 vaultId, uint256 amount, address to, uint256 timelockLength) external returns (uint256);\\n\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\n\\n    function xTokenShareValue(uint256 vaultId) external returns (uint256);\\n\\n    function timelockUntil(uint256 vaultId, address who) external returns (uint256);\\n\\n    function balanceOf(uint256 vaultId, address who) external returns (uint256);\\n\\n    function xTokenAddr(address baseToken) external returns (address);\\n\\n    function vaultXToken(uint256 vaultId) external view returns (address);\\n\\n    event StakingPoolCreated(uint256 vaultId, address xToken, address baseToken);\\n    event FeesReceived(uint256 vaultId, uint256 amount, address xToken);\\n    event BaseTokenDeposited(uint256 vaultId, uint256 baseTokenAmount, uint256 amount, uint256 timelockUntil, address sender);\\n    event XTokenWithdrawn(uint256 vaultId, uint256 baseTokenAmount, uint256 amount, address sender);\\n\\n    event InventoryLockTimeErc20Updated(uint256 oldInventoryLockTimeErc20, uint256 newInventoryLockTimeErc20);\\n    event TimelockExcludeListUpdated(address oldTimelockExcludeList, address newTimelockExcludeList);\\n\\n    error LockTooLong();\\n    error NotExcludedFromFees();\\n    error NotZapContract();\\n    error XTokenNotDeployed();\\n\\n}\",\"keccak256\":\"0xcdb51e91728e2f01a8b9090be9012d7f058c0b4875746782707a7d8d81e2706d\",\"license\":\"MIT\"},\"src/contracts/interfaces/ITimelockExcludeList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITimelockExcludeList {\\n    function isExcluded(address addr, uint256 vaultId) external view returns (bool);\\n}\",\"keccak256\":\"0xb908cf66c38d674f2970c91a15f5edb3c8b310261b0cd70f61f936feb02eab8d\",\"license\":\"MIT\"},\"src/contracts/interfaces/IVaultManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IVaultManager {\\n    function fnftSingleFactory() external view returns (address);\\n\\n    function fnftCollectionFactory() external view returns (address);\\n\\n    function excludedFromFees(address) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function __VaultManager_init(address _weth) external;\\n\\n    function WETH() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function ifoFactory() external view returns (address);\\n\\n    function zapContract() external view returns (address);\\n\\n    function feeReceiver() external view returns (address payable);\\n\\n    function togglePaused() external;\\n\\n    function addVault(address _fnft) external returns (uint256 vaultId);\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setFeeExclusion(address _address, bool _excluded) external;\\n\\n    function setFeeReceiver(address payable _feeReceiver) external;\\n\\n    function setIFOFactory(address _ifoFactory) external;\\n\\n    function setZapContract(address _zapContract) external;\\n\\n    function setFNFTCollectionFactory(address _fnftCollectionFactory) external;\\n\\n    function setFNFTSingleFactory(address _fnftCollectionFactory) external;\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function vaults(uint256) external view returns (address);\\n\\n    function numVaults() external view returns (uint);\\n\\n    event PriceOracleUpdated(address oldPriceOracle, address newPriceOracle);\\n    event IFOFactoryUpdated(address oldIFOFactory, address newIFOFactory);\\n    event FeeReceiverUpdated(address oldFeeReceiver, address newFeeReceiver);\\n    event ZapContractUpdated(address oldZapContract, address newZapContract);\\n    event FNFTCollectionFactoryUpdated(address oldFNFTCollectionFactory, address newFNFTCollectionFactory);\\n    event FNFTSingleFactoryUpdated(address oldFNFTSingleFactory, address newFNFTSingleFactory);\\n    event VaultAdded(uint256 vaultId, address vault);\\n    event FeeDistributorUpdated(address oldFeeDistributor, address newFeeDistributor);\\n    event FeeExclusionUpdated(address target, bool excluded);\\n\\n    error FeeTooHigh();\\n    error MaxAuctionLengthOutOfBounds();\\n    error MaxReserveFactorTooLow();\\n    error MinAuctionLengthOutOfBounds();\\n    error MinBidIncreaseOutOfBounds();\\n    error MinReserveFactorTooHigh();\\n    error MinVotePercentageTooHigh();\\n    error MultiplierTooLow();\\n    error OnlyFactory();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0xf883c7d6e14d75bac6f1b2533293234d93608e563d45d79b80b3d31ee07395f2\",\"license\":\"MIT\"},\"src/contracts/proxy/BeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract BeaconUpgradeable is OwnableUpgradeable, IBeacon {\\n    address private _childImplementation;\\n\\n    /**\\n     * @dev Emitted when the child implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed childImplementation);\\n\\n    function __BeaconUpgradeable__init(address childImplementation_) public initializer {\\n        _setChildImplementation(childImplementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current child implementation address.\\n     */\\n    function childImplementation() public view virtual override returns (address) {\\n        return _childImplementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newChildImplementation` must be a contract.\\n     */\\n    function upgradeChildTo(address newChildImplementation) external virtual override onlyOwner {\\n        _setChildImplementation(newChildImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newChildImplementation` must be a contract.\\n     */\\n    function _setChildImplementation(address newChildImplementation) private {\\n        require(Address.isContract(newChildImplementation), \\\"UpgradeableBeacon: child implementation is not a contract\\\");\\n        _childImplementation = newChildImplementation;\\n        emit Upgraded(newChildImplementation);\\n    }\\n}\",\"keccak256\":\"0x2258f167a87cad73f9a5ce3daf73bf232c3179a79961e903d57468c20343cb16\",\"license\":\"MIT\"},\"src/contracts/proxy/Create2BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n * Slightly modified to allow using beacon proxies with Create2.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract Create2BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor() payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _setBeacon(msg.sender, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_beacon()).childImplementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).childImplementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(_implementation(), data, \\\"BeaconProxy: function call failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x40d5892e65825c3e6171f0f876ca3410728f0766b11a1c76f1b3149a233932f2\",\"license\":\"MIT\"},\"src/contracts/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n    function upgradeChildTo(address newImplementation) external;\\n}\",\"keccak256\":\"0x2ee2683fe16040709f07a18653117d408b026c5f9eb933b3b6af6d26b617f35c\",\"license\":\"MIT\"},\"src/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n    * @dev Function that is run as the first thing in the fallback function.\\n    * Can be redefined in derived contracts to add functionality.\\n    * Redefinitions must call super._willFallback().\\n    */\\n    function _willFallback() internal virtual {\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\",\"keccak256\":\"0xe39547f99ea306cdbea6d184b91c94a4da952605da3ee9175aa27075fee6032e\",\"license\":\"MIT\"},\"src/contracts/token/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\",\"keccak256\":\"0x6ffb3595113d54827e8eca1b15cf843744a8d5865bb591ba974a7d978b9ea571\",\"license\":\"MIT\"},\"src/contracts/token/FNFTStakingXTokenUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\n// XTokens let you come in with some vault tokens, and leave with more! The longer you stay, the more vault tokens you get.\\n//\\n// This contract handles swapping to and from xSushi, SushiSwap's staking token.\\ncontract FNFTStakingXTokenUpgradeable is OwnableUpgradeable, ERC20Upgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint256 internal constant MAX_TIMELOCK = 2592000;\\n    IERC20Upgradeable public baseToken;\\n\\n    mapping(address => uint256) internal timelock;\\n\\n    event Timelocked(address user, uint256 until);\\n\\n    error LockTooLong();\\n    error UserIsLocked();\\n\\n    function __FNFTStakingXToken_init(address _baseToken, string memory name, string memory symbol) public initializer {\\n        __Ownable_init();\\n        __ERC20_init(name, symbol);\\n        baseToken = IERC20Upgradeable(_baseToken);\\n    }\\n\\n    function burnXTokens(address who, uint256 _share) external onlyOwner returns (uint256) {\\n        // Gets the amount of xToken in existence\\n        uint256 totalShares = totalSupply();\\n        // Calculates the amount of base tokens the xToken is worth\\n        uint256 what = (_share * baseToken.balanceOf(address(this))) / totalShares;\\n        _burn(who, _share);\\n        baseToken.safeTransfer(who, what);\\n        return what;\\n    }\\n\\n    // Needs to be called BEFORE new base tokens are deposited.\\n    function mintXTokens(address account, uint256 _amount, uint256 timelockLength) external onlyOwner returns (uint256) {\\n        // Gets the amount of Base Token locked in the contract\\n        uint256 totalBaseToken = baseToken.balanceOf(address(this));\\n        // Gets the amount of xTokens in existence\\n        uint256 totalShares = totalSupply();\\n        // If no xTokens exist, mint it 1:1 to the amount put in\\n        if (totalShares == 0 || totalBaseToken == 0) {\\n            _timelockMint(account, _amount, timelockLength);\\n            return _amount;\\n        }\\n        // Calculate and mint the amount of xTokens the base tokens are worth. The ratio will change overtime, as xTokens are burned/minted and base tokens deposited + gained from fees / withdrawn.\\n        else {\\n            uint256 what = (_amount * totalShares) / totalBaseToken;\\n            _timelockMint(account, what, timelockLength);\\n            return what;\\n        }\\n    }\\n\\n    function timelockUntil(address account) external view returns (uint256) {\\n        return timelock[account];\\n    }\\n\\n    function timelockAccount(address account, uint256 timelockLength) public onlyOwner {\\n        if (timelockLength >= MAX_TIMELOCK) revert LockTooLong();\\n        uint256 timelockFinish = block.timestamp + timelockLength;\\n        if (timelockFinish > timelock[account]) {\\n            timelock[account] = timelockFinish;\\n            emit Timelocked(account, timelockFinish);\\n        }\\n    }\\n\\n    function _burn(address who, uint256 amount) internal override {\\n        if (timelock[who] >= block.timestamp) revert UserIsLocked();\\n        super._burn(who, amount);\\n    }\\n\\n    function _timelockMint(address account, uint256 amount, uint256 timelockLength) internal {\\n        timelockAccount(account, timelockLength);\\n        _mint(account, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 value) internal override {\\n        if (timelock[from] >= block.timestamp) revert UserIsLocked();\\n        super._transfer(from, to, value);\\n    }\\n}\",\"keccak256\":\"0xb3b73b6cb9017172ce554eba86c8b7d89368080404643b0e608395c629a48db1\",\"license\":\"MIT\"},\"src/contracts/util/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract Pausable is OwnableUpgradeable {\\n\\n    function __Pausable_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    event SetIsGuardian(address addr, bool isGuardian);\\n    event SetPaused(uint256 lockId, bool paused);\\n\\n    mapping(address => bool) public isGuardian;\\n    mapping(uint256 => bool) public isPaused;\\n    // 0  : createVault\\n    // 1  : mint\\n    // 2  : redeem\\n    // 3  : swap\\n    // 4  : auction\\n    // 5  : flashloan\\n    // 6  : fee\\n    // 7  : price\\n    // 10 : stake\\n\\n    error Paused();\\n    error Unauthorized();\\n\\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\\n        if (isPaused[lockId] && msg.sender != owner()) revert Paused();\\n    }\\n\\n    function pause(uint256 lockId) public virtual {\\n        if (!isGuardian[msg.sender]) revert Unauthorized();\\n        isPaused[lockId] = true;\\n        emit SetPaused(lockId, true);\\n    }\\n\\n    function setIsGuardian(address _address, bool _isGuardian) public virtual onlyOwner {\\n        isGuardian[_address] = _isGuardian;\\n        emit SetIsGuardian(_address, _isGuardian);\\n    }\\n\\n    function unpause(uint256 lockId)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        isPaused[lockId] = false;\\n        emit SetPaused(lockId, false);\\n    }\\n}\\n\",\"keccak256\":\"0x63dab5ed768e7ff4157e8dc9c794ad3800b26c5b7beb4392aab586e118a83b69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061438a806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620001f55760003560e01c8063715018a61162000119578063c23c6da011620000af578063f0f2a4d7116200007a578063f0f2a4d7146200046c578063f2fde38b1462000483578063f36d52da146200049a578063fabc1cbc14620004b157600080fd5b8063c23c6da01462000415578063cda13d67146200042c578063da5257161462000443578063e2bbb158146200045557600080fd5b80638a4adf2411620000f05780638a4adf2414620003b25780638da5cb5b14620003c657806392054f8b14620003d8578063bdf2a43c14620003ef57600080fd5b8063715018a6146200037a5780637c77b6161462000384578063881b2f2d146200039b57600080fd5b80632699f55a116200018f5780633a2950af11620001665780633a2950af146200031e5780634363fcd21462000335578063441a3e70146200034c5780636bf4b28d146200036357600080fd5b80632699f55a14620002d75780633656eec214620002fd57806337ce42bf146200031457600080fd5b806311ad9d3811620001d057806311ad9d38146200027e578063136439dd14620002925780631f1713fc14620002a957806323845fb514620002c057600080fd5b8063034fc83c14620001fa5780630c68ba21146200022e57806310d25c511462000265575b600080fd5b620002116200020b36600462001e55565b620004c8565b6040516001600160a01b0390911681526020015b60405180910390f35b620002546200023f36600462001e85565b60656020526000908152604090205460ff1681565b604051901515815260200162000225565b6200027c6200027636600462001e85565b62000575565b005b60695462000211906001600160a01b031681565b6200027c620002a336600462001e55565b620005f3565b6200027c620002ba36600462001e85565b6200067b565b6200027c620002d136600462001eb4565b620006bf565b620002ee620002e836600462001ef2565b62000749565b60405190815260200162000225565b620002ee6200030e36600462001f34565b62000904565b620002ee606a5481565b6200027c6200032f36600462001e55565b6200098e565b620002ee6200034636600462001e55565b62000a21565b6200027c6200035d36600462001f5c565b62000c3b565b6200027c6200037436600462001e85565b62000d86565b6200027c62000e53565b6200027c6200039536600462001e55565b62000e8e565b62000254620003ac36600462001f7f565b62000ed7565b60685462000211906001600160a01b031681565b6033546001600160a01b031662000211565b6200027c620003e936600462001e85565b62000f74565b620002546200040036600462001e55565b60666020526000908152604090205460ff1681565b620002ee6200042636600462001f34565b6200100a565b620002116200043d36600462001e85565b6200104b565b6067546001600160a01b031662000211565b6200027c6200046636600462001f5c565b620010c4565b6200027c6200047d36600462001e55565b62001178565b6200027c6200049436600462001e85565b62001267565b62000254620004ab36600462001f5c565b62001306565b6200027c620004c236600462001e55565b62001555565b6068546040516340d1b7db60e11b81526004810183905260009182916001600160a01b03909116906381a36fb690602401602060405180830381865afa15801562000517573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200053d919062001fae565b905060006200054c826200104b565b9050803b6200056e5760405163247ada6f60e21b815260040160405180910390fd5b9392505050565b6000620005836001620015d0565b905080156200059c576000805461ff0019166101001790555b620005a78262001660565b8015620005ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b3360009081526065602052604090205460ff1662000623576040516282b42960e81b815260040160405180910390fd5b600081815260666020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b6033546001600160a01b03163314620006b15760405162461bcd60e51b8152600401620006a89062001fce565b60405180910390fd5b620006bc8162001660565b50565b6033546001600160a01b03163314620006ec5760405162461bcd60e51b8152600401620006a89062001fce565b6001600160a01b038216600081815260656020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a9101620005e6565b600062000757600a62000e8e565b606860009054906101000a90046001600160a01b03166001600160a01b0316632549dad96040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d1919062001fae565b6001600160a01b0316336001600160a01b031614620008035760405163cc38e9cd60e01b815260040160405180910390fd5b6068546040516306df336560e51b81523360048201526001600160a01b039091169063dbe66ca090602401602060405180830381865afa1580156200084c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000872919062002003565b620008905760405163185ab21560e01b815260040160405180910390fd5b6000620008a08685878662001729565b604080518a8152602081018a9052808201839052606081018890526001600160a01b038916608082015290519194507fcb948aa5466c16c5e14f1d6a1eac8be9a89ae1e1c54e0b62a310dd9aad78b3e2935081900360a0019150a195945050505050565b6000806200091284620004c8565b6040516370a0823160e01b81526001600160a01b038581166004830152919250908216906370a08231906024015b602060405180830381865afa1580156200095e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000984919062002023565b9150505b92915050565b6033546001600160a01b03163314620009bb5760405162461bcd60e51b8152600401620006a89062001fce565b62127500811115620009e05760405163d6946a4360e01b815260040160405180910390fd5b606a5460408051918252602082018390527fe5952d275d14a5e568e02a067d5c6713666d1c2ef6a8799aabfe14a6f447e7fd910160405180910390a1606a55565b6068546040516340d1b7db60e11b81526004810183905260009182916001600160a01b03909116906381a36fb690602401602060405180830381865afa15801562000a70573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a96919062001fae565b9050600062000aa5826200104b565b9050803b62000ac75760405163247ada6f60e21b815260040160405180910390fd5b6000670de0b6b3a764000090506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b3b919062002023565b1162000b48578062000c32565b816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bad919062002023565b6040516370a0823160e01b81526001600160a01b0384811660048301528516906370a0823190602401602060405180830381865afa15801562000bf4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c1a919062002023565b62000c2690836200203d565b62000c3291906200206b565b95945050505050565b6068546040516340d1b7db60e11b8152600481018490526000916001600160a01b0316906381a36fb690602401602060405180830381865afa15801562000c86573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cac919062001fae565b9050600062000cbb826200104b565b6040516319e616a360e01b8152336004820152602481018590529091506000906001600160a01b038316906319e616a3906044016020604051808303816000875af115801562000d0f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d35919062002023565b60408051878152602081018390529081018690523360608201529091507f69aab271f7a095bfee243dba74e553831e9cfa92f358c798ba0fa3be6af4439f9060800160405180910390a15050505050565b600062000d946001620015d0565b9050801562000dad576000805461ff0019166101001790555b62000db76200184d565b606880546001600160a01b0319166001600160a01b03841617905560405160009062000de39062001e39565b604051809103906000f08015801562000e00573d6000803e3d6000fd5b50905062000e0e8162000575565b508015620005ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001620005e6565b6033546001600160a01b0316331462000e805760405162461bcd60e51b8152600401620006a89062001fce565b62000e8c600062001881565b565b60008181526066602052604090205460ff16801562000eb857506033546001600160a01b03163314155b15620006bc576040516313d0ff5960e31b815260040160405180910390fd5b6069546000906001600160a01b031662000ef45750600062000988565b6069546040516340f4bdb360e11b81526001600160a01b03858116600483015260248201859052909116906381e97b6690604401602060405180830381865afa15801562000f46573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f6c919062002003565b905062000988565b6033546001600160a01b0316331462000fa15760405162461bcd60e51b8152600401620006a89062001fce565b606954604080516001600160a01b03928316815291831660208301527f3c20340c4c83dfad2af129dad6f4e34a96aa936e0e81f9a1d07989d218e0a211910160405180910390a1606980546001600160a01b0319166001600160a01b0392909216919091179055565b6000806200101884620004c8565b60405163c19ea05360e01b81526001600160a01b0385811660048301529192509082169063c19ea0539060240162000940565b6040516001600160601b0319606083901b16602082015260009081906034016040516020818303038152906040528051906020012090506000620010bc82604051806020016200109b9062001e47565b6020820181038252601f19601f8201166040525080519060200120620018d3565b949350505050565b620010d0600a62000e8e565b6000620010de338462000ed7565b620010ec57606a54620010ef565b60005b90506000806000620011048633878762001729565b91945092509050620011226001600160a01b0384163384886200192b565b6040805187815260208101879052908101829052606081018590523360808201527fcb948aa5466c16c5e14f1d6a1eac8be9a89ae1e1c54e0b62a310dd9aad78b3e29060a00160405180910390a1505050505050565b6068546040516340d1b7db60e11b8152600481018390526000916001600160a01b0316906381a36fb690602401602060405180830381865afa158015620011c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e9919062001fae565b90506000620011f8826200104b565b9050803b156200120757505050565b600062001214836200198d565b604080518681526001600160a01b03838116602083015286168183015290519192507f056067fe6492bd58817601fe2c177ad41634f59fa61a75c560052894c84f8fce919081900360600190a150505050565b6033546001600160a01b03163314620012945760405162461bcd60e51b8152600401620006a89062001fce565b6001600160a01b038116620012fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006a8565b620006bc8162001881565b60006200131b6033546001600160a01b031690565b6001600160a01b0316336001600160a01b031614158015620013c85750606860009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200138c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013b2919062001fae565b6001600160a01b0316336001600160a01b031614155b15620013e6576040516282b42960e81b815260040160405180910390fd5b6068546040516340d1b7db60e11b8152600481018590526000916001600160a01b0316906381a36fb690602401602060405180830381865afa15801562001431573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001457919062001fae565b9050600062001466826200104b565b9050803b1580620014d95750806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620014b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014d7919062002023565b155b15620014eb5760009250505062000988565b620015026001600160a01b0383163383876200192b565b60408051868152602081018690526001600160a01b0383168183015290517f7ab84b72efa4574988089c5a1831f7d56a254f969fbe7d2b6d7e6238272a4afc9181900360600190a1506001949350505050565b6033546001600160a01b03163314620015825760405162461bcd60e51b8152600401620006a89062001fce565b6000818152606660209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d74910162000670565b60008054610100900460ff16156200161c578160ff166001148015620015f55750303b155b620016145760405162461bcd60e51b8152600401620006a8906200208e565b506000919050565b60005460ff808416911610620016465760405162461bcd60e51b8152600401620006a8906200208e565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b0381163b620016df5760405162461bcd60e51b815260206004820152603960248201527f5570677261646561626c65426561636f6e3a206368696c6420696d706c656d6560448201527f6e746174696f6e206973206e6f74206120636f6e7472616374000000000000006064820152608401620006a8565b606780546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000806000620017398762001178565b6068546040516340d1b7db60e11b8152600481018990526000916001600160a01b0316906381a36fb690602401602060405180830381865afa15801562001784573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017aa919062001fae565b90506000620017b9826200104b565b604051637efe41b160e01b81526001600160a01b038a81166004830152602482018a905260448201899052919250600091831690637efe41b1906064016020604051808303816000875af115801562001816573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200183c919062002023565b929a91995091975095505050505050565b600054610100900460ff16620018775760405162461bcd60e51b8152600401620006a890620020dc565b62000e8c62001af9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160f81b03196020808301919091526001600160601b03193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000906200056e565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526200198790859062001b2e565b50505050565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620019cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620019f991908101906200216c565b90508060405160200162001a0e91906200221a565b60408051601f19818403018152908290526001600160601b0319606086901b1660208301529150600090603401604051602081830303815290604052805190602001209050600062001a876000836040518060200162001a6e9062001e47565b601f1982820381018352601f9091011660405262001c0c565b604051632db1cb1360e01b81529091506001600160a01b03821690632db1cb139062001abc9088908790819060040162002273565b600060405180830381600087803b15801562001ad757600080fd5b505af115801562001aec573d6000803e3d6000fd5b5092979650505050505050565b600054610100900460ff1662001b235760405162461bcd60e51b8152600401620006a890620020dc565b62000e8c3362001881565b600062001b85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031662001d179092919063ffffffff16565b80519091501562001c07578080602001905181019062001ba6919062002003565b62001c075760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620006a8565b505050565b6000808447101562001c615760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401620006a8565b825160000362001cb45760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401620006a8565b8383516020850187f590506001600160a01b038116620010bc5760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401620006a8565b6060620010bc8484600085856001600160a01b0385163b62001d7c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620006a8565b600080866001600160a01b0316858760405162001d9a9190620022b7565b60006040518083038185875af1925050503d806000811462001dd9576040519150601f19603f3d011682016040523d82523d6000602084013e62001dde565b606091505b509150915062001df082828662001dfb565b979650505050505050565b6060831562001e0c5750816200056e565b82511562001e1d5782518084602001fd5b8160405162461bcd60e51b8152600401620006a89190620022d5565b61189380620022eb83390190565b6107d78062003b7e83390190565b60006020828403121562001e6857600080fd5b5035919050565b6001600160a01b0381168114620006bc57600080fd5b60006020828403121562001e9857600080fd5b81356200056e8162001e6f565b8015158114620006bc57600080fd5b6000806040838503121562001ec857600080fd5b823562001ed58162001e6f565b9150602083013562001ee78162001ea5565b809150509250929050565b6000806000806080858703121562001f0957600080fd5b8435935060208501359250604085013562001f248162001e6f565b9396929550929360600135925050565b6000806040838503121562001f4857600080fd5b82359150602083013562001ee78162001e6f565b6000806040838503121562001f7057600080fd5b50508035926020909101359150565b6000806040838503121562001f9357600080fd5b823562001fa08162001e6f565b946020939093013593505050565b60006020828403121562001fc157600080fd5b81516200056e8162001e6f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156200201657600080fd5b81516200056e8162001ea5565b6000602082840312156200203657600080fd5b5051919050565b60008160001904831182151516156200206657634e487b7160e01b600052601160045260246000fd5b500290565b6000826200208957634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200215a57818101518382015260200162002140565b83811115620019875750506000910152565b6000602082840312156200217f57600080fd5b815167ffffffffffffffff808211156200219857600080fd5b818401915084601f830112620021ad57600080fd5b815181811115620021c257620021c262002127565b604051601f8201601f19908116603f01168101908382118183101715620021ed57620021ed62002127565b816040528281528760208487010111156200220757600080fd5b62001df08360208301602088016200213d565b600f60fb1b815260008251620022388160018501602087016200213d565b9190910160010192915050565b600081518084526200225f8160208601602086016200213d565b601f01601f19169290920160200192915050565b6001600160a01b0384168152606060208201819052600090620022999083018562002245565b8281036040840152620022ad818562002245565b9695505050505050565b60008251620022cb8184602087016200213d565b9190910192915050565b6020815260006200056e60208301846200224556fe608060405234801561001057600080fd5b50611873806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637efe41b1116100ad578063b068498d11610071578063b068498d14610278578063c19ea0531461028b578063c55dae63146102b4578063dd62ed3e146102c7578063f2fde38b1461030057600080fd5b80637efe41b1146102125780638da5cb5b1461022557806395d89b411461024a578063a457c2d714610252578063a9059cbb1461026557600080fd5b80632db1cb13116100f45780632db1cb13146101aa578063313ce567146101bf57806339509351146101ce57806370a08231146101e1578063715018a61461020a57600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806319e616a31461018457806323b872dd14610197575b600080fd5b610139610313565b6040516101469190611410565b60405180910390f35b61016261015d36600461145a565b6103a5565b6040519015158152602001610146565b6067545b604051908152602001610146565b61017661019236600461145a565b6103bd565b6101626101a5366004611484565b6104af565b6101bd6101b8366004611563565b6104d5565b005b60405160128152602001610146565b6101626101dc36600461145a565b610572565b6101766101ef3660046115d7565b6001600160a01b031660009081526065602052604090205490565b6101bd6105b1565b6101766102203660046115f2565b6105e7565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610146565b6101396106e3565b61016261026036600461145a565b6106f2565b61016261027336600461145a565b61078f565b6101bd61028636600461145a565b61079d565b6101766102993660046115d7565b6001600160a01b031660009081526098602052604090205490565b609754610232906001600160a01b031681565b6101766102d5366004611625565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b6101bd61030e3660046115d7565b610873565b60606068805461032290611658565b80601f016020809104026020016040519081016040528092919081815260200182805461034e90611658565b801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b5050505050905090565b6000336103b381858561090e565b5060019392505050565b6033546000906001600160a01b031633146103f35760405162461bcd60e51b81526004016103ea90611692565b60405180910390fd5b60006103fe60675490565b6097546040516370a0823160e01b815230600482015291925060009183916001600160a01b0316906370a0823190602401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047091906116c7565b61047a90866116f6565b6104849190611715565b90506104908585610a32565b6097546104a7906001600160a01b03168683610a78565b949350505050565b6000336104bd858285610aca565b6104c8858585610b56565b60019150505b9392505050565b60006104e16001610b99565b905080156104f9576000805461ff0019166101001790555b610501610c26565b61050b8383610c55565b609780546001600160a01b0319166001600160a01b038616179055801561056c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b3360008181526066602090815260408083206001600160a01b03871684529091528120549091906103b390829086906105ac908790611737565b61090e565b6033546001600160a01b031633146105db5760405162461bcd60e51b81526004016103ea90611692565b6105e56000610c86565b565b6033546000906001600160a01b031633146106145760405162461bcd60e51b81526004016103ea90611692565b6097546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561065d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068191906116c7565b9050600061068e60675490565b905080158061069b575081155b156106b5576106ab868686610cd8565b84925050506104ce565b6000826106c283886116f6565b6106cc9190611715565b90506106d9878287610cd8565b92506104ce915050565b60606069805461032290611658565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190838110156107775760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103ea565b610784828686840361090e565b506001949350505050565b6000336103b3818585610b56565b6033546001600160a01b031633146107c75760405162461bcd60e51b81526004016103ea90611692565b62278d0081106107ea5760405163d6946a4360e01b815260040160405180910390fd5b60006107f68242611737565b6001600160a01b03841660009081526098602052604090205490915081111561086e576001600160a01b038316600081815260986020908152604091829020849055815192835282018390527f38f63775093182d55eb9f15cb41c506fd976eadb1b4544ba0aeaed494ee70cde910160405180910390a15b505050565b6033546001600160a01b0316331461089d5760405162461bcd60e51b81526004016103ea90611692565b6001600160a01b0381166109025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ea565b61090b81610c86565b50565b6001600160a01b0383166109705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103ea565b6001600160a01b0382166109d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103ea565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0382166000908152609860205260409020544211610a6a5760405163249bb0b560e21b815260040160405180910390fd5b610a748282610cec565b5050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261086e908490610e3a565b6001600160a01b03838116600090815260666020908152604080832093861683529290522054600019811461056c5781811015610b495760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103ea565b61056c848484840361090e565b6001600160a01b0383166000908152609860205260409020544211610b8e5760405163249bb0b560e21b815260040160405180910390fd5b61086e838383610f0c565b60008054610100900460ff1615610be0578160ff166001148015610bbc5750303b155b610bd85760405162461bcd60e51b81526004016103ea9061174f565b506000919050565b60005460ff808416911610610c075760405162461bcd60e51b81526004016103ea9061174f565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610c4d5760405162461bcd60e51b81526004016103ea9061179d565b6105e56110da565b600054610100900460ff16610c7c5760405162461bcd60e51b81526004016103ea9061179d565b610a74828261110a565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610ce2838261079d565b61086e8383611158565b6001600160a01b038216610d4c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103ea565b6001600160a01b03821660009081526065602052604090205481811015610dc05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103ea565b6001600160a01b0383166000908152606560205260408120838303905560678054849290610def9084906117e8565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000610e8f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112379092919063ffffffff16565b80519091501561086e5780806020019051810190610ead91906117ff565b61086e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ea565b6001600160a01b038316610f705760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103ea565b6001600160a01b038216610fd25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103ea565b6001600160a01b0383166000908152606560205260409020548181101561104a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103ea565b6001600160a01b03808516600090815260656020526040808220858503905591851681529081208054849290611081908490611737565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110cd91815260200190565b60405180910390a361056c565b600054610100900460ff166111015760405162461bcd60e51b81526004016103ea9061179d565b6105e533610c86565b600054610100900460ff166111315760405162461bcd60e51b81526004016103ea9061179d565b815161114490606890602085019061134b565b50805161086e90606990602084019061134b565b6001600160a01b0382166111ae5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103ea565b80606760008282546111c09190611737565b90915550506001600160a01b038216600090815260656020526040812080548392906111ed908490611737565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60606104a78484600085856001600160a01b0385163b6112995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ea565b600080866001600160a01b031685876040516112b59190611821565b60006040518083038185875af1925050503d80600081146112f2576040519150601f19603f3d011682016040523d82523d6000602084013e6112f7565b606091505b5091509150611307828286611312565b979650505050505050565b606083156113215750816104ce565b8251156113315782518084602001fd5b8160405162461bcd60e51b81526004016103ea9190611410565b82805461135790611658565b90600052602060002090601f01602090048101928261137957600085556113bf565b82601f1061139257805160ff19168380011785556113bf565b828001600101855582156113bf579182015b828111156113bf5782518255916020019190600101906113a4565b506113cb9291506113cf565b5090565b5b808211156113cb57600081556001016113d0565b60005b838110156113ff5781810151838201526020016113e7565b8381111561056c5750506000910152565b602081526000825180602084015261142f8160408501602087016113e4565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610c2157600080fd5b6000806040838503121561146d57600080fd5b61147683611443565b946020939093013593505050565b60008060006060848603121561149957600080fd5b6114a284611443565b92506114b060208501611443565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126114e757600080fd5b813567ffffffffffffffff80821115611502576115026114c0565b604051601f8301601f19908116603f0116810190828211818310171561152a5761152a6114c0565b8160405283815286602085880101111561154357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561157857600080fd5b61158184611443565b9250602084013567ffffffffffffffff8082111561159e57600080fd5b6115aa878388016114d6565b935060408601359150808211156115c057600080fd5b506115cd868287016114d6565b9150509250925092565b6000602082840312156115e957600080fd5b6104ce82611443565b60008060006060848603121561160757600080fd5b61161084611443565b95602085013595506040909401359392505050565b6000806040838503121561163857600080fd5b61164183611443565b915061164f60208401611443565b90509250929050565b600181811c9082168061166c57607f821691505b60208210810361168c57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156116d957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611710576117106116e0565b500290565b60008261173257634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561174a5761174a6116e0565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000828210156117fa576117fa6116e0565b500390565b60006020828403121561181157600080fd5b815180151581146104ce57600080fd5b600082516118338184602087016113e4565b919091019291505056fea2646970667358221220d0aca272cd83b1c68929c894c1e7cf140d5e2a51f9469ebc8f2960d58a9c520164736f6c634300080d0033608060405261002f60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516103c1565b6000805160206107968339815191521461004b5761004b6103e6565b61006a336040518060200160405280600081525061006f60201b60201c565b6104a0565b6100828261021b60201b6100291760201c565b6100e15760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610155826001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014691906103fc565b61021b60201b6100291760201c565b6101c75760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100d8565b600080516020610796833981519152828155815115610216576102146101eb61022a565b836040518060600160405280602181526020016107b6602191396102a860201b6100381760201c565b505b505050565b6001600160a01b03163b151590565b60006102426000805160206107968339815191525490565b6001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561027f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a391906103fc565b905090565b60606001600160a01b0384163b6103105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100d8565b600080856001600160a01b03168560405161032b9190610451565b600060405180830381855af49150503d8060008114610366576040519150601f19603f3d011682016040523d82523d6000602084013e61036b565b606091505b50909250905061037c828286610388565b925050505b9392505050565b60608315610397575081610381565b8251156103a75782518084602001fd5b8160405162461bcd60e51b81526004016100d8919061046d565b6000828210156103e157634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561040e57600080fd5b81516001600160a01b038116811461038157600080fd5b60005b83811015610440578181015183820152602001610428565b838111156102145750506000910152565b60008251610463818460208701610425565b9190910192915050565b602081526000825180602084015261048c816040850160208701610425565b601f01601f19169190910160400192915050565b6102e7806104af6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261011c565b6101ac565b565b6001600160a01b03163b151590565b60606001600160a01b0384163b6100a55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516100c09190610239565b600060405180830381855af49150503d80600081146100fb576040519150601f19603f3d011682016040523d82523d6000602084013e610100565b606091505b50915091506101108282866101d0565b925050505b9392505050565b60006101467fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b6001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a79190610255565b905090565b3660008037600080366000845af43d6000803e8080156101cb573d6000f35b3d6000fd5b606083156101df575081610115565b8251156101ef5782518084602001fd5b8160405162461bcd60e51b815260040161009c919061027e565b60005b8381101561022457818101518382015260200161020c565b83811115610233576000848401525b50505050565b6000825161024b818460208701610209565b9190910192915050565b60006020828403121561026757600080fd5b81516001600160a01b038116811461011557600080fd5b602081526000825180602084015261029d816040850160208701610209565b601f01601f1916919091016040019291505056fea2646970667358221220caf286a04b09e13e7dde997e25f3e63727bd1688918c49bbfb2ecc19e239583064736f6c634300080d0033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564a2646970667358221220ab2d4669f9f128fe2903cbc3641f4c15b972b7624c58ac6577b7ea97a15fb32d64736f6c634300080d0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001f55760003560e01c8063715018a61162000119578063c23c6da011620000af578063f0f2a4d7116200007a578063f0f2a4d7146200046c578063f2fde38b1462000483578063f36d52da146200049a578063fabc1cbc14620004b157600080fd5b8063c23c6da01462000415578063cda13d67146200042c578063da5257161462000443578063e2bbb158146200045557600080fd5b80638a4adf2411620000f05780638a4adf2414620003b25780638da5cb5b14620003c657806392054f8b14620003d8578063bdf2a43c14620003ef57600080fd5b8063715018a6146200037a5780637c77b6161462000384578063881b2f2d146200039b57600080fd5b80632699f55a116200018f5780633a2950af11620001665780633a2950af146200031e5780634363fcd21462000335578063441a3e70146200034c5780636bf4b28d146200036357600080fd5b80632699f55a14620002d75780633656eec214620002fd57806337ce42bf146200031457600080fd5b806311ad9d3811620001d057806311ad9d38146200027e578063136439dd14620002925780631f1713fc14620002a957806323845fb514620002c057600080fd5b8063034fc83c14620001fa5780630c68ba21146200022e57806310d25c511462000265575b600080fd5b620002116200020b36600462001e55565b620004c8565b6040516001600160a01b0390911681526020015b60405180910390f35b620002546200023f36600462001e85565b60656020526000908152604090205460ff1681565b604051901515815260200162000225565b6200027c6200027636600462001e85565b62000575565b005b60695462000211906001600160a01b031681565b6200027c620002a336600462001e55565b620005f3565b6200027c620002ba36600462001e85565b6200067b565b6200027c620002d136600462001eb4565b620006bf565b620002ee620002e836600462001ef2565b62000749565b60405190815260200162000225565b620002ee6200030e36600462001f34565b62000904565b620002ee606a5481565b6200027c6200032f36600462001e55565b6200098e565b620002ee6200034636600462001e55565b62000a21565b6200027c6200035d36600462001f5c565b62000c3b565b6200027c6200037436600462001e85565b62000d86565b6200027c62000e53565b6200027c6200039536600462001e55565b62000e8e565b62000254620003ac36600462001f7f565b62000ed7565b60685462000211906001600160a01b031681565b6033546001600160a01b031662000211565b6200027c620003e936600462001e85565b62000f74565b620002546200040036600462001e55565b60666020526000908152604090205460ff1681565b620002ee6200042636600462001f34565b6200100a565b620002116200043d36600462001e85565b6200104b565b6067546001600160a01b031662000211565b6200027c6200046636600462001f5c565b620010c4565b6200027c6200047d36600462001e55565b62001178565b6200027c6200049436600462001e85565b62001267565b62000254620004ab36600462001f5c565b62001306565b6200027c620004c236600462001e55565b62001555565b6068546040516340d1b7db60e11b81526004810183905260009182916001600160a01b03909116906381a36fb690602401602060405180830381865afa15801562000517573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200053d919062001fae565b905060006200054c826200104b565b9050803b6200056e5760405163247ada6f60e21b815260040160405180910390fd5b9392505050565b6000620005836001620015d0565b905080156200059c576000805461ff0019166101001790555b620005a78262001660565b8015620005ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b3360009081526065602052604090205460ff1662000623576040516282b42960e81b815260040160405180910390fd5b600081815260666020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b6033546001600160a01b03163314620006b15760405162461bcd60e51b8152600401620006a89062001fce565b60405180910390fd5b620006bc8162001660565b50565b6033546001600160a01b03163314620006ec5760405162461bcd60e51b8152600401620006a89062001fce565b6001600160a01b038216600081815260656020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a9101620005e6565b600062000757600a62000e8e565b606860009054906101000a90046001600160a01b03166001600160a01b0316632549dad96040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d1919062001fae565b6001600160a01b0316336001600160a01b031614620008035760405163cc38e9cd60e01b815260040160405180910390fd5b6068546040516306df336560e51b81523360048201526001600160a01b039091169063dbe66ca090602401602060405180830381865afa1580156200084c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000872919062002003565b620008905760405163185ab21560e01b815260040160405180910390fd5b6000620008a08685878662001729565b604080518a8152602081018a9052808201839052606081018890526001600160a01b038916608082015290519194507fcb948aa5466c16c5e14f1d6a1eac8be9a89ae1e1c54e0b62a310dd9aad78b3e2935081900360a0019150a195945050505050565b6000806200091284620004c8565b6040516370a0823160e01b81526001600160a01b038581166004830152919250908216906370a08231906024015b602060405180830381865afa1580156200095e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000984919062002023565b9150505b92915050565b6033546001600160a01b03163314620009bb5760405162461bcd60e51b8152600401620006a89062001fce565b62127500811115620009e05760405163d6946a4360e01b815260040160405180910390fd5b606a5460408051918252602082018390527fe5952d275d14a5e568e02a067d5c6713666d1c2ef6a8799aabfe14a6f447e7fd910160405180910390a1606a55565b6068546040516340d1b7db60e11b81526004810183905260009182916001600160a01b03909116906381a36fb690602401602060405180830381865afa15801562000a70573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a96919062001fae565b9050600062000aa5826200104b565b9050803b62000ac75760405163247ada6f60e21b815260040160405180910390fd5b6000670de0b6b3a764000090506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b3b919062002023565b1162000b48578062000c32565b816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bad919062002023565b6040516370a0823160e01b81526001600160a01b0384811660048301528516906370a0823190602401602060405180830381865afa15801562000bf4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c1a919062002023565b62000c2690836200203d565b62000c3291906200206b565b95945050505050565b6068546040516340d1b7db60e11b8152600481018490526000916001600160a01b0316906381a36fb690602401602060405180830381865afa15801562000c86573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cac919062001fae565b9050600062000cbb826200104b565b6040516319e616a360e01b8152336004820152602481018590529091506000906001600160a01b038316906319e616a3906044016020604051808303816000875af115801562000d0f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d35919062002023565b60408051878152602081018390529081018690523360608201529091507f69aab271f7a095bfee243dba74e553831e9cfa92f358c798ba0fa3be6af4439f9060800160405180910390a15050505050565b600062000d946001620015d0565b9050801562000dad576000805461ff0019166101001790555b62000db76200184d565b606880546001600160a01b0319166001600160a01b03841617905560405160009062000de39062001e39565b604051809103906000f08015801562000e00573d6000803e3d6000fd5b50905062000e0e8162000575565b508015620005ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001620005e6565b6033546001600160a01b0316331462000e805760405162461bcd60e51b8152600401620006a89062001fce565b62000e8c600062001881565b565b60008181526066602052604090205460ff16801562000eb857506033546001600160a01b03163314155b15620006bc576040516313d0ff5960e31b815260040160405180910390fd5b6069546000906001600160a01b031662000ef45750600062000988565b6069546040516340f4bdb360e11b81526001600160a01b03858116600483015260248201859052909116906381e97b6690604401602060405180830381865afa15801562000f46573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f6c919062002003565b905062000988565b6033546001600160a01b0316331462000fa15760405162461bcd60e51b8152600401620006a89062001fce565b606954604080516001600160a01b03928316815291831660208301527f3c20340c4c83dfad2af129dad6f4e34a96aa936e0e81f9a1d07989d218e0a211910160405180910390a1606980546001600160a01b0319166001600160a01b0392909216919091179055565b6000806200101884620004c8565b60405163c19ea05360e01b81526001600160a01b0385811660048301529192509082169063c19ea0539060240162000940565b6040516001600160601b0319606083901b16602082015260009081906034016040516020818303038152906040528051906020012090506000620010bc82604051806020016200109b9062001e47565b6020820181038252601f19601f8201166040525080519060200120620018d3565b949350505050565b620010d0600a62000e8e565b6000620010de338462000ed7565b620010ec57606a54620010ef565b60005b90506000806000620011048633878762001729565b91945092509050620011226001600160a01b0384163384886200192b565b6040805187815260208101879052908101829052606081018590523360808201527fcb948aa5466c16c5e14f1d6a1eac8be9a89ae1e1c54e0b62a310dd9aad78b3e29060a00160405180910390a1505050505050565b6068546040516340d1b7db60e11b8152600481018390526000916001600160a01b0316906381a36fb690602401602060405180830381865afa158015620011c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e9919062001fae565b90506000620011f8826200104b565b9050803b156200120757505050565b600062001214836200198d565b604080518681526001600160a01b03838116602083015286168183015290519192507f056067fe6492bd58817601fe2c177ad41634f59fa61a75c560052894c84f8fce919081900360600190a150505050565b6033546001600160a01b03163314620012945760405162461bcd60e51b8152600401620006a89062001fce565b6001600160a01b038116620012fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006a8565b620006bc8162001881565b60006200131b6033546001600160a01b031690565b6001600160a01b0316336001600160a01b031614158015620013c85750606860009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200138c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013b2919062001fae565b6001600160a01b0316336001600160a01b031614155b15620013e6576040516282b42960e81b815260040160405180910390fd5b6068546040516340d1b7db60e11b8152600481018590526000916001600160a01b0316906381a36fb690602401602060405180830381865afa15801562001431573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001457919062001fae565b9050600062001466826200104b565b9050803b1580620014d95750806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620014b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014d7919062002023565b155b15620014eb5760009250505062000988565b620015026001600160a01b0383163383876200192b565b60408051868152602081018690526001600160a01b0383168183015290517f7ab84b72efa4574988089c5a1831f7d56a254f969fbe7d2b6d7e6238272a4afc9181900360600190a1506001949350505050565b6033546001600160a01b03163314620015825760405162461bcd60e51b8152600401620006a89062001fce565b6000818152606660209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d74910162000670565b60008054610100900460ff16156200161c578160ff166001148015620015f55750303b155b620016145760405162461bcd60e51b8152600401620006a8906200208e565b506000919050565b60005460ff808416911610620016465760405162461bcd60e51b8152600401620006a8906200208e565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b0381163b620016df5760405162461bcd60e51b815260206004820152603960248201527f5570677261646561626c65426561636f6e3a206368696c6420696d706c656d6560448201527f6e746174696f6e206973206e6f74206120636f6e7472616374000000000000006064820152608401620006a8565b606780546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000806000620017398762001178565b6068546040516340d1b7db60e11b8152600481018990526000916001600160a01b0316906381a36fb690602401602060405180830381865afa15801562001784573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017aa919062001fae565b90506000620017b9826200104b565b604051637efe41b160e01b81526001600160a01b038a81166004830152602482018a905260448201899052919250600091831690637efe41b1906064016020604051808303816000875af115801562001816573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200183c919062002023565b929a91995091975095505050505050565b600054610100900460ff16620018775760405162461bcd60e51b8152600401620006a890620020dc565b62000e8c62001af9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160f81b03196020808301919091526001600160601b03193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000906200056e565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526200198790859062001b2e565b50505050565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620019cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620019f991908101906200216c565b90508060405160200162001a0e91906200221a565b60408051601f19818403018152908290526001600160601b0319606086901b1660208301529150600090603401604051602081830303815290604052805190602001209050600062001a876000836040518060200162001a6e9062001e47565b601f1982820381018352601f9091011660405262001c0c565b604051632db1cb1360e01b81529091506001600160a01b03821690632db1cb139062001abc9088908790819060040162002273565b600060405180830381600087803b15801562001ad757600080fd5b505af115801562001aec573d6000803e3d6000fd5b5092979650505050505050565b600054610100900460ff1662001b235760405162461bcd60e51b8152600401620006a890620020dc565b62000e8c3362001881565b600062001b85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031662001d179092919063ffffffff16565b80519091501562001c07578080602001905181019062001ba6919062002003565b62001c075760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620006a8565b505050565b6000808447101562001c615760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401620006a8565b825160000362001cb45760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401620006a8565b8383516020850187f590506001600160a01b038116620010bc5760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401620006a8565b6060620010bc8484600085856001600160a01b0385163b62001d7c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620006a8565b600080866001600160a01b0316858760405162001d9a9190620022b7565b60006040518083038185875af1925050503d806000811462001dd9576040519150601f19603f3d011682016040523d82523d6000602084013e62001dde565b606091505b509150915062001df082828662001dfb565b979650505050505050565b6060831562001e0c5750816200056e565b82511562001e1d5782518084602001fd5b8160405162461bcd60e51b8152600401620006a89190620022d5565b61189380620022eb83390190565b6107d78062003b7e83390190565b60006020828403121562001e6857600080fd5b5035919050565b6001600160a01b0381168114620006bc57600080fd5b60006020828403121562001e9857600080fd5b81356200056e8162001e6f565b8015158114620006bc57600080fd5b6000806040838503121562001ec857600080fd5b823562001ed58162001e6f565b9150602083013562001ee78162001ea5565b809150509250929050565b6000806000806080858703121562001f0957600080fd5b8435935060208501359250604085013562001f248162001e6f565b9396929550929360600135925050565b6000806040838503121562001f4857600080fd5b82359150602083013562001ee78162001e6f565b6000806040838503121562001f7057600080fd5b50508035926020909101359150565b6000806040838503121562001f9357600080fd5b823562001fa08162001e6f565b946020939093013593505050565b60006020828403121562001fc157600080fd5b81516200056e8162001e6f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156200201657600080fd5b81516200056e8162001ea5565b6000602082840312156200203657600080fd5b5051919050565b60008160001904831182151516156200206657634e487b7160e01b600052601160045260246000fd5b500290565b6000826200208957634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200215a57818101518382015260200162002140565b83811115620019875750506000910152565b6000602082840312156200217f57600080fd5b815167ffffffffffffffff808211156200219857600080fd5b818401915084601f830112620021ad57600080fd5b815181811115620021c257620021c262002127565b604051601f8201601f19908116603f01168101908382118183101715620021ed57620021ed62002127565b816040528281528760208487010111156200220757600080fd5b62001df08360208301602088016200213d565b600f60fb1b815260008251620022388160018501602087016200213d565b9190910160010192915050565b600081518084526200225f8160208601602086016200213d565b601f01601f19169290920160200192915050565b6001600160a01b0384168152606060208201819052600090620022999083018562002245565b8281036040840152620022ad818562002245565b9695505050505050565b60008251620022cb8184602087016200213d565b9190910192915050565b6020815260006200056e60208301846200224556fe608060405234801561001057600080fd5b50611873806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637efe41b1116100ad578063b068498d11610071578063b068498d14610278578063c19ea0531461028b578063c55dae63146102b4578063dd62ed3e146102c7578063f2fde38b1461030057600080fd5b80637efe41b1146102125780638da5cb5b1461022557806395d89b411461024a578063a457c2d714610252578063a9059cbb1461026557600080fd5b80632db1cb13116100f45780632db1cb13146101aa578063313ce567146101bf57806339509351146101ce57806370a08231146101e1578063715018a61461020a57600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806319e616a31461018457806323b872dd14610197575b600080fd5b610139610313565b6040516101469190611410565b60405180910390f35b61016261015d36600461145a565b6103a5565b6040519015158152602001610146565b6067545b604051908152602001610146565b61017661019236600461145a565b6103bd565b6101626101a5366004611484565b6104af565b6101bd6101b8366004611563565b6104d5565b005b60405160128152602001610146565b6101626101dc36600461145a565b610572565b6101766101ef3660046115d7565b6001600160a01b031660009081526065602052604090205490565b6101bd6105b1565b6101766102203660046115f2565b6105e7565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610146565b6101396106e3565b61016261026036600461145a565b6106f2565b61016261027336600461145a565b61078f565b6101bd61028636600461145a565b61079d565b6101766102993660046115d7565b6001600160a01b031660009081526098602052604090205490565b609754610232906001600160a01b031681565b6101766102d5366004611625565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b6101bd61030e3660046115d7565b610873565b60606068805461032290611658565b80601f016020809104026020016040519081016040528092919081815260200182805461034e90611658565b801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b5050505050905090565b6000336103b381858561090e565b5060019392505050565b6033546000906001600160a01b031633146103f35760405162461bcd60e51b81526004016103ea90611692565b60405180910390fd5b60006103fe60675490565b6097546040516370a0823160e01b815230600482015291925060009183916001600160a01b0316906370a0823190602401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047091906116c7565b61047a90866116f6565b6104849190611715565b90506104908585610a32565b6097546104a7906001600160a01b03168683610a78565b949350505050565b6000336104bd858285610aca565b6104c8858585610b56565b60019150505b9392505050565b60006104e16001610b99565b905080156104f9576000805461ff0019166101001790555b610501610c26565b61050b8383610c55565b609780546001600160a01b0319166001600160a01b038616179055801561056c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b3360008181526066602090815260408083206001600160a01b03871684529091528120549091906103b390829086906105ac908790611737565b61090e565b6033546001600160a01b031633146105db5760405162461bcd60e51b81526004016103ea90611692565b6105e56000610c86565b565b6033546000906001600160a01b031633146106145760405162461bcd60e51b81526004016103ea90611692565b6097546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561065d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068191906116c7565b9050600061068e60675490565b905080158061069b575081155b156106b5576106ab868686610cd8565b84925050506104ce565b6000826106c283886116f6565b6106cc9190611715565b90506106d9878287610cd8565b92506104ce915050565b60606069805461032290611658565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190838110156107775760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103ea565b610784828686840361090e565b506001949350505050565b6000336103b3818585610b56565b6033546001600160a01b031633146107c75760405162461bcd60e51b81526004016103ea90611692565b62278d0081106107ea5760405163d6946a4360e01b815260040160405180910390fd5b60006107f68242611737565b6001600160a01b03841660009081526098602052604090205490915081111561086e576001600160a01b038316600081815260986020908152604091829020849055815192835282018390527f38f63775093182d55eb9f15cb41c506fd976eadb1b4544ba0aeaed494ee70cde910160405180910390a15b505050565b6033546001600160a01b0316331461089d5760405162461bcd60e51b81526004016103ea90611692565b6001600160a01b0381166109025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ea565b61090b81610c86565b50565b6001600160a01b0383166109705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103ea565b6001600160a01b0382166109d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103ea565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0382166000908152609860205260409020544211610a6a5760405163249bb0b560e21b815260040160405180910390fd5b610a748282610cec565b5050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261086e908490610e3a565b6001600160a01b03838116600090815260666020908152604080832093861683529290522054600019811461056c5781811015610b495760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103ea565b61056c848484840361090e565b6001600160a01b0383166000908152609860205260409020544211610b8e5760405163249bb0b560e21b815260040160405180910390fd5b61086e838383610f0c565b60008054610100900460ff1615610be0578160ff166001148015610bbc5750303b155b610bd85760405162461bcd60e51b81526004016103ea9061174f565b506000919050565b60005460ff808416911610610c075760405162461bcd60e51b81526004016103ea9061174f565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610c4d5760405162461bcd60e51b81526004016103ea9061179d565b6105e56110da565b600054610100900460ff16610c7c5760405162461bcd60e51b81526004016103ea9061179d565b610a74828261110a565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610ce2838261079d565b61086e8383611158565b6001600160a01b038216610d4c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103ea565b6001600160a01b03821660009081526065602052604090205481811015610dc05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103ea565b6001600160a01b0383166000908152606560205260408120838303905560678054849290610def9084906117e8565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000610e8f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112379092919063ffffffff16565b80519091501561086e5780806020019051810190610ead91906117ff565b61086e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ea565b6001600160a01b038316610f705760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103ea565b6001600160a01b038216610fd25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103ea565b6001600160a01b0383166000908152606560205260409020548181101561104a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103ea565b6001600160a01b03808516600090815260656020526040808220858503905591851681529081208054849290611081908490611737565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110cd91815260200190565b60405180910390a361056c565b600054610100900460ff166111015760405162461bcd60e51b81526004016103ea9061179d565b6105e533610c86565b600054610100900460ff166111315760405162461bcd60e51b81526004016103ea9061179d565b815161114490606890602085019061134b565b50805161086e90606990602084019061134b565b6001600160a01b0382166111ae5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103ea565b80606760008282546111c09190611737565b90915550506001600160a01b038216600090815260656020526040812080548392906111ed908490611737565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60606104a78484600085856001600160a01b0385163b6112995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ea565b600080866001600160a01b031685876040516112b59190611821565b60006040518083038185875af1925050503d80600081146112f2576040519150601f19603f3d011682016040523d82523d6000602084013e6112f7565b606091505b5091509150611307828286611312565b979650505050505050565b606083156113215750816104ce565b8251156113315782518084602001fd5b8160405162461bcd60e51b81526004016103ea9190611410565b82805461135790611658565b90600052602060002090601f01602090048101928261137957600085556113bf565b82601f1061139257805160ff19168380011785556113bf565b828001600101855582156113bf579182015b828111156113bf5782518255916020019190600101906113a4565b506113cb9291506113cf565b5090565b5b808211156113cb57600081556001016113d0565b60005b838110156113ff5781810151838201526020016113e7565b8381111561056c5750506000910152565b602081526000825180602084015261142f8160408501602087016113e4565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610c2157600080fd5b6000806040838503121561146d57600080fd5b61147683611443565b946020939093013593505050565b60008060006060848603121561149957600080fd5b6114a284611443565b92506114b060208501611443565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126114e757600080fd5b813567ffffffffffffffff80821115611502576115026114c0565b604051601f8301601f19908116603f0116810190828211818310171561152a5761152a6114c0565b8160405283815286602085880101111561154357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561157857600080fd5b61158184611443565b9250602084013567ffffffffffffffff8082111561159e57600080fd5b6115aa878388016114d6565b935060408601359150808211156115c057600080fd5b506115cd868287016114d6565b9150509250925092565b6000602082840312156115e957600080fd5b6104ce82611443565b60008060006060848603121561160757600080fd5b61161084611443565b95602085013595506040909401359392505050565b6000806040838503121561163857600080fd5b61164183611443565b915061164f60208401611443565b90509250929050565b600181811c9082168061166c57607f821691505b60208210810361168c57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156116d957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611710576117106116e0565b500290565b60008261173257634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561174a5761174a6116e0565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000828210156117fa576117fa6116e0565b500390565b60006020828403121561181157600080fd5b815180151581146104ce57600080fd5b600082516118338184602087016113e4565b919091019291505056fea2646970667358221220d0aca272cd83b1c68929c894c1e7cf140d5e2a51f9469ebc8f2960d58a9c520164736f6c634300080d0033608060405261002f60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516103c1565b6000805160206107968339815191521461004b5761004b6103e6565b61006a336040518060200160405280600081525061006f60201b60201c565b6104a0565b6100828261021b60201b6100291760201c565b6100e15760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610155826001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014691906103fc565b61021b60201b6100291760201c565b6101c75760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100d8565b600080516020610796833981519152828155815115610216576102146101eb61022a565b836040518060600160405280602181526020016107b6602191396102a860201b6100381760201c565b505b505050565b6001600160a01b03163b151590565b60006102426000805160206107968339815191525490565b6001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561027f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a391906103fc565b905090565b60606001600160a01b0384163b6103105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100d8565b600080856001600160a01b03168560405161032b9190610451565b600060405180830381855af49150503d8060008114610366576040519150601f19603f3d011682016040523d82523d6000602084013e61036b565b606091505b50909250905061037c828286610388565b925050505b9392505050565b60608315610397575081610381565b8251156103a75782518084602001fd5b8160405162461bcd60e51b81526004016100d8919061046d565b6000828210156103e157634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561040e57600080fd5b81516001600160a01b038116811461038157600080fd5b60005b83811015610440578181015183820152602001610428565b838111156102145750506000910152565b60008251610463818460208701610425565b9190910192915050565b602081526000825180602084015261048c816040850160208701610425565b601f01601f19169190910160400192915050565b6102e7806104af6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261011c565b6101ac565b565b6001600160a01b03163b151590565b60606001600160a01b0384163b6100a55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516100c09190610239565b600060405180830381855af49150503d80600081146100fb576040519150601f19603f3d011682016040523d82523d6000602084013e610100565b606091505b50915091506101108282866101d0565b925050505b9392505050565b60006101467fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b6001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a79190610255565b905090565b3660008037600080366000845af43d6000803e8080156101cb573d6000f35b3d6000fd5b606083156101df575081610115565b8251156101ef5782518084602001fd5b8160405162461bcd60e51b815260040161009c919061027e565b60005b8381101561022457818101518382015260200161020c565b83811115610233576000848401525b50505050565b6000825161024b818460208701610209565b9190910192915050565b60006020828403121561026757600080fd5b81516001600160a01b038116811461011557600080fd5b602081526000825180602084015261029d816040850160208701610209565b601f01601f1916919091016040019291505056fea2646970667358221220caf286a04b09e13e7dde997e25f3e63727bd1688918c49bbfb2ecc19e239583064736f6c634300080d0033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564a2646970667358221220ab2d4669f9f128fe2903cbc3641f4c15b972b7624c58ac6577b7ea97a15fb32d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "childImplementation()": {
        "details": "Returns the current child implementation address."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeChildTo(address)": {
        "details": "Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newChildImplementation` must be a contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 274,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 277,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2270,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21677,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "isGuardian",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21681,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "isPaused",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 18473,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "_childImplementation",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 10709,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "vaultManager",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IVaultManager)17110"
      },
      {
        "astId": 10713,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "timelockExcludeList",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(ITimelockExcludeList)16811"
      },
      {
        "astId": 10716,
        "contract": "src/contracts/FNFTStaking.sol:FNFTStaking",
        "label": "inventoryLockTimeErc20",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITimelockExcludeList)16811": {
        "encoding": "inplace",
        "label": "contract ITimelockExcludeList",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)17110": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}